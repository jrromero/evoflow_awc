['Agresti', 'Agresti', 'Agresti', 'Agresti', 'Agresti', 'Agresti', 'Ashbacher', 'Ashbacher', 'Ashbacher', 'McKee', 'Ashbacher', 'Cholette', 'Ashbacher', 'Power', 'Ashbacher', 'Ashbacher', 'Ashbacher', 'Riley', 'Ashbacher', 'Ashbacher', 'Lee', 'Auken', 'Auken', 'Auken', 'Auken', 'Auken', 'Chachra', 'Auken', 'Auken', 'Auken', 'Blankenship', 'Blankenship', 'Blankenship', 'Blankenship', 'Blankenship', 'Blankenship', 'Brody', 'Brody', 'Bukowsky', 'Brody', 'Brody', 'Brody', 'Brody', 'Morrison', 'Brown', 'Mitchell', 'Brown', 'Brown', 'Brown', 'Brown', 'Brown', 'Brown', 'Brown', 'Bukowsky', 'Bukowsky', 'Bukowsky', 'Bukowsky', 'Bukowsky', 'Vernon', 'Bukowsky', 'Bukowsky', 'Bukowsky', 'Bukowsky', 'Vernon', 'Bukowsky', 'Calvinnme', 'Calvinnme', 'Calvinnme', 'Calvinnme', 'Koenig', 'Calvinnme', 'Calvinnme', 'CFH', 'CFH', 'CFH', 'CFH', 'Dent', 'CFH', 'CFH', 'CFH', 'CFH', 'CFH', 'CFH', 'Chachra', 'Chachra', 'Chachra', 'Chachra', 'Chachra', 'Chachra', 'Chachra', 'Chachra', 'Chachra', 'Chandler', 'Chandler', 'Chandler', 'Chandler', 'Chandler', 'Chandler', 'Chandler', 'Chell', 'Chell', 'Chell', 'Chell', 'Chell', 'Walters', 'Chell', 'Chell', 'Chell', 'Chell', 'CFH', 'Cholette', 'Cholette', 'Cholette', 'Cholette', 'Cholette', 'Cholette', 'Cholette', 'Comdet', 'Comdet', 'Comdet', 'Comdet', 'Comdet', 'Comdet', 'Chandler', 'Comdet', 'Agresti', 'Comdet', 'Corn', 'Corn', 'Corn', 'Corn', 'Goonan', 'Goonan', 'Corn', 'Grove', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Lovitt', 'Bukowsky', 'Davisson', 'Vision', 'Davisson', 'Davisson', 'Dent', 'Dent', 'Dent', 'Dent', 'Dent', 'Dent', 'Chandler', 'Mark', 'Dent', 'Dent', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Goonan', 'Goonan', 'Goonan', 'Goonan', 'Goonan', 'Goonan', 'Goonan', 'Goonan', 'Goonan', 'Koenig', 'Goonan', 'Grove', 'Grove', 'Chandler', 'Shea', 'Grove', 'Grove', 'Grove', 'McKee', 'Grove', 'Harp', 'Harp', 'Harp', 'Harp', 'Harp', 'Harp', 'Harp', 'Hayes', 'Brody', 'Hayes', 'Hayes', 'Hayes', 'Hayes', 'Johnson', 'Hayes', 'Hayes', 'Janson', 'Janson', 'Janson', 'Janson', 'Janson', 'Janson', 'Janson', 'Lovitt', 'Janson', 'Johnson', 'Johnson', 'Johnson', 'Johnson', 'Johnson', 'Johnson', 'Mark', 'Kolln', 'Koenig', 'Koenig', 'Koenig', 'Koenig', 'Koenig', 'Koenig', 'Koenig', 'Koenig', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Lawyeraau', 'Lawyeraau', 'Lawyeraau', 'Lawyeraau', 'Lawyeraau', 'Messick', 'Lawyeraau', 'Davisson', 'Lawyeraau', 'Chell', 'Chandler', 'Chell', 'Lee', 'Chell', 'Bukowsky', 'Wilson', 'Chell', 'Chell', 'Riley', 'Lee', 'Lovitt', 'Lee', 'Chell', 'Lovitt', 'Chell', 'Lovitt', 'Lovitt', 'Lovitt', 'Lovitt', 'Mahlers2nd', 'Mahlers2nd', 'Mahlers2nd', 'Mahlers2nd', 'Mahlers2nd', 'Mahlers2nd', 'Mahlers2nd', 'Mahlers2nd', 'Mahlers2nd', 'Mahlers2nd', 'Riley', 'Mahlers2nd', 'Nigam', 'Mark', 'Mark', 'Mark', 'Mark', 'Mark', 'Mark', 'Mark', 'Mark', 'Messick', 'McKee', 'McKee', 'McKee', 'Comdet', 'Goonan', 'McKee', 'McKee', 'McKee', 'McKee', 'McKee', 'Merritt', 'Merritt', 'Merritt', 'Merritt', 'Merritt', 'Merritt', 'Merritt', 'Merritt', 'Merritt', 'Peterson', 'Merritt', 'Merritt', 'Merritt', 'Messick', 'Messick', 'Messick', 'Messick', 'Lawyeraau', 'Messick', 'Vernon', 'Mitchell', 'Mitchell', 'Mitchell', 'Mitchell', 'Mitchell', 'Mitchell', 'Morrison', 'Morrison', 'Morrison', 'Morrison', 'Morrison', 'Morrison', 'Morrison', 'Morrison', 'Morrison', 'Neal', 'Neal', 'Agresti', 'Neal', 'Goonan', 'Neal', 'Neal', 'Neal', 'Neal', 'Nigam', 'Nigam', 'Vernon', 'Nigam', 'Nigam', 'Koenig', 'Nigam', 'Peterson', 'Peterson', 'Peterson', 'Power', 'Power', 'Power', 'Power', 'Power', 'Power', 'Power', 'Power', 'Power', 'Riley', 'Riley', 'Riley', 'Riley', 'Riley', 'Riley', 'Riley', 'Riley', 'Wilson', 'Robert', 'Robert', 'Robert', 'Robert', 'Bukowsky', 'Robert', 'Robert', 'Robert', 'Shea', 'Shea', 'Shea', 'Cutey', 'Nigam', 'Shea', 'Shea', 'Lovitt', 'Shea', 'Shea', 'Sherwin', 'Sherwin', 'Sherwin', 'Sherwin', 'Sherwin', 'Sherwin', 'Sherwin', 'Sherwin', 'Sherwin', 'Sherwin', 'Sherwin', 'Sherwin', 'Vision', 'Taylor', 'Taylor', 'Taylor', 'Taylor', 'Taylor', 'Taylor', 'Taylor', 'Taylor', 'Vernon', 'Vernon', 'Vernon', 'Vernon', 'Vernon', 'Vision', 'Vision', 'Goonan', 'Vision', 'Vision', 'Vision', 'Vision', 'Walters', 'Walters', 'Walters', 'Walters', 'Walters', 'Walters', 'Walters', 'Wilson', 'Wilson', 'Wilson', 'Wilson', 'Lovitt', 'Wilson', 'Wilson', 'Wilson', 'Wilson', 'Wilson', 'Wilson', 'Wilson']
{'accuracy_score': 0.8488888888888889, 'balanced_accuracy_score': 0.8565265290265289, 'macro_precision_score': 0.8543965201465202, 'macro_recall_score': 0.8565265290265289, 'macro_f1_score': 0.8450038760644091, 'micro_precision_score': 0.8488888888888889, 'micro_recall_score': 0.8488888888888889, 'micro_f1_score': 0.848888888888889}
('0', Pipeline(steps=[('0', KNNImputer(n_neighbors=3)), ('1', StandardScaler()),
                ('2',
                 PassiveAggressiveClassifier(C=1.9592651772028111,
                                             fit_intercept=False,
                                             random_state=6))]))
('1', Pipeline(steps=[('0', SelectPercentile(percentile=36.77349472488615)),
                ('1', MaxAbsScaler()),
                ('2',
                 PassiveAggressiveClassifier(C=1.9592651772028111,
                                             fit_intercept=False,
                                             random_state=6))]))
('2', Pipeline(steps=[('0', MaxAbsScaler()),
                ('1',
                 LinearSVC(C=0.0736565978053462, class_weight='balanced',
                           random_state=6, tol=0.029698795061349845))]))
('3', Pipeline(steps=[('0', VarianceThreshold()), ('1', MaxAbsScaler()),
                ('2',
                 LinearSVC(C=7.411002118197225, class_weight='balanced',
                           loss='hinge', random_state=6,
                           tol=0.00011422133362409182))]))
('4', Pipeline(steps=[('0', VarianceThreshold()), ('1', MaxAbsScaler()),
                ('2',
                 LinearSVC(C=7.411002118197225, class_weight='balanced',
                           random_state=6, tol=0.00011422133362409182))]))
('5', Pipeline(steps=[('0', MinMaxScaler()),
                ('1', SimpleImputer(strategy='most_frequent')),
                ('2', VarianceThreshold()),
                ('3',
                 PassiveAggressiveClassifier(C=0.0038460780481039676,
                                             random_state=6))]))
('6', Pipeline(steps=[('0', MaxAbsScaler()), ('1', StandardScaler(with_mean=False)),
                ('2',
                 PassiveAggressiveClassifier(C=1.9592651772028111,
                                             fit_intercept=False,
                                             random_state=6))]))
('7', Pipeline(steps=[('0', MinMaxScaler()), ('1', StandardScaler(with_std=False)),
                ('2',
                 PassiveAggressiveClassifier(C=1.9592651772028111,
                                             fit_intercept=False,
                                             random_state=6))]))
('8', Pipeline(steps=[('0', MaxAbsScaler()), ('1', StandardScaler(with_mean=False)),
                ('2',
                 PassiveAggressiveClassifier(C=0.0038460780481039676,
                                             loss='squared_hinge',
                                             random_state=6))]))
('9', Pipeline(steps=[('0', MaxAbsScaler()),
                ('1',
                 SGDClassifier(alpha=0.03968989316818791,
                               epsilon=1.1804413818473912e-05,
                               eta0=0.0008105624708465149,
                               l1_ratio=2.4908606714131184e-05,
                               power_t=0.9162302848894605, random_state=6,
                               tol=1.3635260988651652e-05))]))
