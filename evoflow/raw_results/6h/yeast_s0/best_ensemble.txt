['POX', 'NUC', 'CYT', 'CYT', 'CYT', 'EXC', 'CYT', 'CYT', 'MIT', 'ME1', 'ME1', 'ME2', 'MIT', 'ME2', 'CYT', 'CYT', 'CYT', 'MIT', 'MIT', 'NUC', 'CYT', 'CYT', 'CYT', 'ME1', 'MIT', 'MIT', 'MIT', 'POX', 'ME3', 'MIT', 'ME1', 'ME3', 'CYT', 'CYT', 'CYT', 'POX', 'NUC', 'MIT', 'CYT', 'EXC', 'ME3', 'CYT', 'NUC', 'CYT', 'NUC', 'CYT', 'MIT', 'NUC', 'CYT', 'NUC', 'CYT', 'NUC', 'NUC', 'MIT', 'CYT', 'MIT', 'POX', 'NUC', 'CYT', 'ME1', 'ME1', 'MIT', 'MIT', 'ME3', 'MIT', 'MIT', 'MIT', 'EXC', 'CYT', 'NUC', 'EXC', 'VAC', 'CYT', 'ME2', 'CYT', 'MIT', 'EXC', 'EXC', 'CYT', 'CYT', 'CYT', 'CYT', 'ME3', 'POX', 'NUC', 'NUC', 'CYT', 'NUC', 'MIT', 'NUC', 'ME3', 'NUC', 'ME3', 'CYT', 'ME3', 'NUC', 'CYT', 'ME2', 'CYT', 'CYT', 'ME3', 'ME3', 'NUC', 'ME1', 'ERL', 'NUC', 'CYT', 'ME3', 'ME3', 'POX', 'ME3', 'ME2', 'ME1', 'CYT', 'ME3', 'ME3', 'ME2', 'NUC', 'NUC', 'CYT', 'MIT', 'ME3', 'MIT', 'NUC', 'ME3', 'CYT', 'NUC', 'CYT', 'ME3', 'CYT', 'CYT', 'NUC', 'ME2', 'ME2', 'NUC', 'NUC', 'MIT', 'ME3', 'CYT', 'CYT', 'NUC', 'MIT', 'NUC', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'ME3', 'NUC', 'CYT', 'NUC', 'MIT', 'MIT', 'MIT', 'NUC', 'CYT', 'ME3', 'ME3', 'CYT', 'MIT', 'MIT', 'NUC', 'MIT', 'CYT', 'NUC', 'ME1', 'ME3', 'NUC', 'MIT', 'ME1', 'NUC', 'ERL', 'MIT', 'ME3', 'ME2', 'ME2', 'NUC', 'CYT', 'NUC', 'ME3', 'ME3', 'ME2', 'NUC', 'NUC', 'NUC', 'ME3', 'ME2', 'CYT', 'MIT', 'MIT', 'MIT', 'MIT', 'CYT', 'CYT', 'MIT', 'ME3', 'NUC', 'NUC', 'MIT', 'CYT', 'NUC', 'NUC', 'NUC', 'MIT', 'MIT', 'ME3', 'MIT', 'CYT', 'CYT', 'MIT', 'MIT', 'MIT', 'ME3', 'MIT', 'NUC', 'CYT', 'MIT', 'CYT', 'MIT', 'ME3', 'NUC', 'ME3', 'ME2', 'ME3', 'MIT', 'NUC', 'ME3', 'CYT', 'ME2', 'NUC', 'CYT', 'EXC', 'NUC', 'ME2', 'ME3', 'ME1', 'CYT', 'NUC', 'CYT', 'MIT', 'CYT', 'CYT', 'CYT', 'NUC', 'ME3', 'CYT', 'CYT', 'CYT', 'MIT', 'NUC', 'POX', 'MIT', 'CYT', 'EXC', 'CYT', 'CYT', 'NUC', 'CYT', 'ME1', 'ME2', 'ME3', 'NUC', 'NUC', 'CYT', 'CYT', 'ME3', 'CYT', 'ME2', 'MIT', 'CYT', 'NUC', 'CYT', 'MIT', 'NUC', 'CYT', 'NUC', 'NUC', 'CYT', 'MIT', 'MIT', 'MIT', 'NUC', 'CYT', 'ME3', 'CYT', 'ME2', 'CYT', 'NUC', 'CYT', 'MIT', 'NUC', 'NUC', 'MIT', 'CYT', 'NUC', 'MIT', 'CYT', 'NUC', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'NUC', 'CYT', 'CYT', 'CYT', 'CYT', 'NUC', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'MIT', 'NUC', 'MIT', 'CYT', 'CYT', 'CYT', 'MIT', 'MIT', 'CYT', 'MIT', 'MIT', 'MIT', 'ME2', 'CYT', 'NUC', 'CYT', 'CYT', 'CYT', 'NUC', 'ME3', 'ME3', 'CYT', 'ME1', 'NUC', 'MIT', 'MIT', 'NUC', 'CYT', 'CYT', 'ME3', 'CYT', 'NUC', 'NUC', 'ME3', 'ME3', 'NUC', 'MIT', 'ME3', 'CYT', 'CYT', 'ME3', 'MIT', 'NUC', 'NUC', 'CYT', 'CYT', 'CYT', 'CYT', 'NUC', 'NUC', 'CYT', 'MIT', 'NUC', 'NUC', 'ME3', 'ME3', 'EXC', 'ME3', 'ME1', 'NUC', 'MIT', 'NUC', 'CYT', 'ME1', 'NUC', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'NUC', 'NUC', 'NUC', 'CYT', 'MIT', 'NUC', 'NUC', 'NUC', 'NUC', 'CYT', 'ME1', 'ME1', 'CYT', 'NUC', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'ME3', 'CYT', 'CYT', 'CYT', 'ME1', 'CYT', 'ME1', 'NUC', 'ME1', 'CYT', 'ME3', 'POX', 'ME2', 'ME3', 'ME3', 'ME3', 'ME3', 'ME3', 'ME3', 'MIT', 'NUC', 'ME3', 'MIT', 'NUC', 'CYT', 'CYT', 'NUC', 'CYT', 'ME2']
{'accuracy_score': 0.5932584269662922, 'balanced_accuracy_score': 0.5818459288088893, 'macro_precision_score': 0.5742592207677986, 'macro_recall_score': 0.5236613359280005, 'macro_f1_score': 0.5146952384822088, 'micro_precision_score': 0.5932584269662922, 'micro_recall_score': 0.5932584269662922, 'micro_f1_score': 0.5932584269662922}
('0', Pipeline(steps=[('0', MaxAbsScaler()),
                ('1',
                 RBFSampler(gamma=0.31667299801852966, n_components=90,
                            random_state=0)),
                ('2', MinMaxScaler()),
                ('3',
                 RandomForestClassifier(class_weight='balanced',
                                        max_features='sqrt',
                                        min_samples_leaf=12,
                                        min_samples_split=10, n_estimators=42,
                                        random_state=0))]))
('1', Pipeline(steps=[('0',
                 RBFSampler(gamma=0.007510378549102832, n_components=79,
                            random_state=0)),
                ('1',
                 RandomForestClassifier(bootstrap=False,
                                        class_weight='balanced',
                                        max_features='sqrt', min_samples_leaf=9,
                                        min_samples_split=7, n_estimators=81,
                                        random_state=0))]))
('2', Pipeline(steps=[('0', MaxAbsScaler()), ('1', VarianceThreshold()),
                ('2',
                 RBFSampler(gamma=0.005922846989550136, n_components=73,
                            random_state=0)),
                ('3', MinMaxScaler()),
                ('4',
                 ExtraTreesClassifier(class_weight='balanced_subsample',
                                      criterion='entropy', max_features='sqrt',
                                      min_samples_leaf=7, min_samples_split=15,
                                      n_estimators=91, random_state=0))]))
('3', Pipeline(steps=[('0',
                 RBFSampler(gamma=0.016505690019088144, n_components=37,
                            random_state=0)),
                ('1',
                 RandomForestClassifier(class_weight='balanced',
                                        criterion='entropy',
                                        max_features='sqrt', min_samples_leaf=2,
                                        min_samples_split=10, n_estimators=99,
                                        random_state=0))]))
('4', Pipeline(steps=[('0', MaxAbsScaler()), ('1', VarianceThreshold()),
                ('2',
                 RBFSampler(gamma=0.01763391489857175, n_components=37,
                            random_state=0)),
                ('3', MinMaxScaler()),
                ('4',
                 ExtraTreesClassifier(class_weight='balanced',
                                      max_features='log2', min_samples_leaf=3,
                                      min_samples_split=9, n_estimators=79,
                                      random_state=0))]))
('5', Pipeline(steps=[('0', MaxAbsScaler()), ('1', VarianceThreshold()),
                ('2',
                 RBFSampler(gamma=0.023557379332100205, n_components=49,
                            random_state=0)),
                ('3', MinMaxScaler()),
                ('4',
                 ExtraTreesClassifier(class_weight='balanced',
                                      max_features='log2', min_samples_leaf=3,
                                      min_samples_split=15, n_estimators=14,
                                      random_state=0))]))
('6', Pipeline(steps=[('0', MinMaxScaler()),
                ('1',
                 RandomForestClassifier(class_weight='balanced',
                                        max_features='log2',
                                        min_samples_split=17, n_estimators=83,
                                        random_state=0))]))
('7', Pipeline(steps=[('0', VarianceThreshold()),
                ('1',
                 RBFSampler(gamma=0.0024566428740376, n_components=88,
                            random_state=0)),
                ('2', MinMaxScaler()),
                ('3',
                 ExtraTreesClassifier(bootstrap=True,
                                      class_weight='balanced_subsample',
                                      max_features='log2', min_samples_split=14,
                                      n_estimators=21, random_state=0))]))
('8', Pipeline(steps=[('0', FastICA(n_components=23, random_state=0)),
                ('1', KNNImputer(n_neighbors=9, weights='distance')),
                ('2', Normalizer(norm='l1')),
                ('3',
                 RandomForestClassifier(class_weight='balanced',
                                        max_features='log2',
                                        min_samples_split=17, n_estimators=83,
                                        random_state=0))]))
('9', Pipeline(steps=[('0',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        max_features='sqrt',
                                        min_samples_split=12, n_estimators=59,
                                        random_state=0))]))
