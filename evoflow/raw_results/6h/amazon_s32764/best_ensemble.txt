['Agresti', 'Agresti', 'Agresti', 'Agresti', 'Agresti', 'Agresti', 'Ashbacher', 'Ashbacher', 'Ashbacher', 'Ashbacher', 'Ashbacher', 'Cholette', 'Ashbacher', 'Power', 'Ashbacher', 'Ashbacher', 'Ashbacher', 'Riley', 'Ashbacher', 'Vision', 'Lee', 'Auken', 'Auken', 'Auken', 'Auken', 'Auken', 'Chachra', 'Auken', 'Auken', 'Auken', 'Blankenship', 'Blankenship', 'Blankenship', 'Blankenship', 'Blankenship', 'Blankenship', 'Brody', 'Brody', 'Bukowsky', 'Brody', 'Brody', 'Brody', 'Brody', 'Morrison', 'Brown', 'Mitchell', 'Brown', 'Brown', 'Brown', 'Brown', 'Brown', 'Brown', 'Brown', 'Bukowsky', 'Bukowsky', 'Bukowsky', 'Bukowsky', 'Bukowsky', 'Vernon', 'Bukowsky', 'Bukowsky', 'Bukowsky', 'Lawyeraau', 'Bukowsky', 'Bukowsky', 'Calvinnme', 'Calvinnme', 'Calvinnme', 'Calvinnme', 'Koenig', 'Calvinnme', 'Calvinnme', 'CFH', 'CFH', 'CFH', 'CFH', 'Dent', 'CFH', 'CFH', 'CFH', 'CFH', 'CFH', 'CFH', 'Chachra', 'Chachra', 'Chachra', 'Chachra', 'Chachra', 'Chachra', 'Chachra', 'Chachra', 'Chachra', 'Chandler', 'Chandler', 'Chandler', 'Chandler', 'Chandler', 'Chandler', 'Chandler', 'Chell', 'Chell', 'Kolln', 'Chell', 'Chell', 'Walters', 'Chell', 'Chell', 'Chell', 'Chell', 'CFH', 'Cholette', 'Cholette', 'Cholette', 'Cholette', 'Cholette', 'Cholette', 'Cholette', 'Comdet', 'Comdet', 'Comdet', 'Comdet', 'Comdet', 'Comdet', 'Chandler', 'Comdet', 'Agresti', 'Comdet', 'Corn', 'Corn', 'Corn', 'Corn', 'Goonan', 'Goonan', 'Corn', 'Grove', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Lovitt', 'Bukowsky', 'Davisson', 'Vision', 'Davisson', 'Davisson', 'Dent', 'Dent', 'Dent', 'Dent', 'Dent', 'Dent', 'Chandler', 'Mark', 'Dent', 'Dent', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Goonan', 'Goonan', 'Goonan', 'Goonan', 'Goonan', 'Goonan', 'Goonan', 'Goonan', 'Goonan', 'Goonan', 'Goonan', 'Grove', 'Grove', 'Chandler', 'Shea', 'Grove', 'Grove', 'Grove', 'McKee', 'Grove', 'Harp', 'Harp', 'Harp', 'Harp', 'Harp', 'Harp', 'Harp', 'Hayes', 'Brody', 'Brody', 'Hayes', 'Hayes', 'Hayes', 'Johnson', 'Hayes', 'Hayes', 'Janson', 'Janson', 'Janson', 'Kolln', 'Janson', 'Janson', 'Janson', 'Lovitt', 'Janson', 'Johnson', 'Johnson', 'Johnson', 'Johnson', 'Johnson', 'Johnson', 'Mark', 'Kolln', 'Koenig', 'Koenig', 'Koenig', 'Koenig', 'Koenig', 'Koenig', 'Koenig', 'Koenig', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Lawyeraau', 'Lawyeraau', 'Lawyeraau', 'Lawyeraau', 'Lawyeraau', 'Messick', 'Lawyeraau', 'Davisson', 'Peterson', 'Chell', 'Chandler', 'Chell', 'Lee', 'Chell', 'Corn', 'Wilson', 'Chell', 'Chell', 'Riley', 'Lee', 'Lovitt', 'Lee', 'Chell', 'Lovitt', 'Chell', 'Lovitt', 'Lovitt', 'Lovitt', 'Lovitt', 'Goonan', 'Mahlers2nd', 'Mahlers2nd', 'Mahlers2nd', 'CFH', 'Mahlers2nd', 'Mahlers2nd', 'Mahlers2nd', 'Mahlers2nd', 'Mahlers2nd', 'Riley', 'Mahlers2nd', 'Nigam', 'Mark', 'Mark', 'Mark', 'Mark', 'Mark', 'Mark', 'Mark', 'Mark', 'Messick', 'McKee', 'McKee', 'McKee', 'Comdet', 'Goonan', 'McKee', 'McKee', 'McKee', 'McKee', 'McKee', 'Merritt', 'Merritt', 'Merritt', 'Merritt', 'Merritt', 'Merritt', 'Merritt', 'Merritt', 'Merritt', 'Peterson', 'Merritt', 'Merritt', 'Merritt', 'Messick', 'Messick', 'Messick', 'Messick', 'Lawyeraau', 'Messick', 'Vernon', 'Mitchell', 'Mitchell', 'Mitchell', 'Mitchell', 'Mitchell', 'Mitchell', 'Morrison', 'Morrison', 'Morrison', 'Morrison', 'Morrison', 'Morrison', 'Morrison', 'Morrison', 'Morrison', 'Neal', 'Neal', 'Agresti', 'Neal', 'Goonan', 'Neal', 'Neal', 'Neal', 'Neal', 'Nigam', 'Nigam', 'Vernon', 'Nigam', 'Nigam', 'Koenig', 'Nigam', 'Peterson', 'Peterson', 'Peterson', 'Power', 'Power', 'Power', 'Power', 'Power', 'Power', 'Power', 'Power', 'Power', 'Riley', 'Riley', 'Riley', 'Riley', 'Riley', 'Riley', 'Riley', 'Riley', 'Wilson', 'Cholette', 'Robert', 'Robert', 'Robert', 'Bukowsky', 'Robert', 'Robert', 'Robert', 'Shea', 'Shea', 'Shea', 'Cutey', 'Nigam', 'Shea', 'Shea', 'Lovitt', 'Shea', 'Shea', 'Sherwin', 'Sherwin', 'Sherwin', 'Sherwin', 'Sherwin', 'Sherwin', 'Nigam', 'Sherwin', 'Sherwin', 'Sherwin', 'Sherwin', 'Sherwin', 'Vision', 'Taylor', 'Taylor', 'Taylor', 'Taylor', 'Taylor', 'Taylor', 'Taylor', 'Taylor', 'Vernon', 'Bukowsky', 'Vernon', 'Vernon', 'Vernon', 'Vision', 'Vision', 'Goonan', 'Vision', 'Vision', 'Vision', 'Vision', 'Walters', 'Walters', 'Walters', 'Walters', 'Walters', 'Walters', 'Walters', 'Wilson', 'Wilson', 'Wilson', 'Wilson', 'Lovitt', 'Wilson', 'Wilson', 'Wilson', 'Wilson', 'Wilson', 'Wilson', 'Wilson']
{'accuracy_score': 0.8311111111111111, 'balanced_accuracy_score': 0.8385626595626594, 'macro_precision_score': 0.8364635984930102, 'macro_recall_score': 0.8385626595626594, 'macro_f1_score': 0.8257776777954998, 'micro_precision_score': 0.8311111111111111, 'micro_recall_score': 0.8311111111111111, 'micro_f1_score': 0.8311111111111111}
('0', Pipeline(steps=[('0', MinMaxScaler()),
                ('1',
                 LinearSVC(C=0.006020023400231365, class_weight='balanced',
                           random_state=32764, tol=3.627134043561246e-05))]))
('1', Pipeline(steps=[('0', KNNImputer(n_neighbors=4)), ('1', MinMaxScaler()),
                ('2',
                 SMOTE(k_neighbors=2, random_state=32764,
                       sampling_strategy='not majority')),
                ('3',
                 PassiveAggressiveClassifier(C=0.7409158451362838,
                                             fit_intercept=False,
                                             loss='squared_hinge',
                                             random_state=32764))]))
('2', Pipeline(steps=[('0', VarianceThreshold()), ('1', MaxAbsScaler()),
                ('2', SelectPercentile(percentile=47.59439785568269)),
                ('3',
                 LinearSVC(C=0.006020023400231365, class_weight='balanced',
                           dual=False, random_state=32764,
                           tol=3.627134043561246e-05))]))
('3', Pipeline(steps=[('0', MinMaxScaler()),
                ('1', StandardScaler(with_mean=False, with_std=False)),
                ('2',
                 PassiveAggressiveClassifier(C=0.05947324410631208,
                                             loss='squared_hinge',
                                             random_state=32764))]))
('4', Pipeline(steps=[('0', KNNImputer()), ('1', MinMaxScaler()),
                ('2',
                 SMOTE(k_neighbors=2, random_state=32764,
                       sampling_strategy='not majority')),
                ('3',
                 PassiveAggressiveClassifier(C=0.6365010077675619,
                                             loss='squared_hinge',
                                             random_state=32764))]))
('5', Pipeline(steps=[('0', MaxAbsScaler()), ('1', StandardScaler(with_std=False)),
                ('2',
                 LinearSVC(C=0.01644081346087276, class_weight='balanced',
                           random_state=32764, tol=0.00021802318084093367))]))
('6', Pipeline(steps=[('0', MinMaxScaler()), ('1', VarianceThreshold()),
                ('2', SimpleImputer(strategy='median')), ('3', MaxAbsScaler()),
                ('4',
                 PassiveAggressiveClassifier(C=8.946879948939841,
                                             random_state=32764))]))
('7', Pipeline(steps=[('0', MinMaxScaler()), ('1', VarianceThreshold()),
                ('2',
                 LinearSVC(C=0.01644081346087276, class_weight='balanced',
                           random_state=32764, tol=0.00021802318084093367))]))
('8', Pipeline(steps=[('0', MaxAbsScaler()), ('1', StandardScaler(with_mean=False)),
                ('2',
                 LinearSVC(C=0.04053001795592331, class_weight='balanced',
                           random_state=32764, tol=0.00021802318084093367))]))
('9', Pipeline(steps=[('0', MaxAbsScaler()),
                ('1',
                 PassiveAggressiveClassifier(C=0.05947324410631208,
                                             random_state=32764))]))
