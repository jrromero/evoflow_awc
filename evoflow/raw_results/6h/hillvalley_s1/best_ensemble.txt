
{'accuracy_score': 1.0, 'balanced_accuracy_score': 1.0, 'macro_precision_score': 1.0, 'macro_recall_score': 1.0, 'macro_f1_score': 1.0, 'micro_precision_score': 1.0, 'micro_recall_score': 1.0, 'micro_f1_score': 1.0}
('0', Pipeline(steps=[('0', VarianceThreshold()), ('1', Normalizer(norm='max')),
                ('2', MinMaxScaler()),
                ('3',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features='sqrt', min_samples_leaf=4,
                                      min_samples_split=12, n_estimators=84,
                                      random_state=1))]))
('1', Pipeline(steps=[('0',
                 LogisticRegression(C=0.0014962897523447792, random_state=1))]))
('2', Pipeline(steps=[('0', VarianceThreshold()), ('1', Normalizer(norm='l1')),
                ('2', MinMaxScaler()),
                ('3',
                 PassiveAggressiveClassifier(C=0.05058699882948137,
                                             fit_intercept=False,
                                             loss='squared_hinge',
                                             random_state=1))]))
('3', Pipeline(steps=[('0', VarianceThreshold()), ('1', Normalizer()),
                ('2', MinMaxScaler()),
                ('3',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features='sqrt', min_samples_leaf=4,
                                      min_samples_split=12, n_estimators=87,
                                      random_state=1))]))
('4', Pipeline(steps=[('0', VarianceThreshold()), ('1', Normalizer(norm='l1')),
                ('2', MinMaxScaler()),
                ('3', KNeighborsClassifier(n_neighbors=2, p=1))]))
('5', Pipeline(steps=[('0', VarianceThreshold()), ('1', Normalizer(norm='l1')),
                ('2', MinMaxScaler()),
                ('3', KNeighborsClassifier(n_neighbors=4, p=1))]))
('6', Pipeline(steps=[('0', VarianceThreshold()), ('1', Normalizer()),
                ('2', MinMaxScaler()),
                ('3', KNeighborsClassifier(n_neighbors=4, p=1))]))
('7', Pipeline(steps=[('0', Normalizer(norm='max')), ('1', MaxAbsScaler()),
                ('2', KNeighborsClassifier(n_neighbors=4))]))
('8', Pipeline(steps=[('0', VarianceThreshold()), ('1', Normalizer(norm='max')),
                ('2', MinMaxScaler()),
                ('3', KNeighborsClassifier(n_neighbors=1, weights='distance'))]))
('9', Pipeline(steps=[('0',
                 SMOTETomek(random_state=1, sampling_strategy='not majority')),
                ('1', FeatureAgglomeration(n_clusters=12)),
                ('2', Normalizer(norm='max')),
                ('3', KNeighborsClassifier(n_neighbors=22))]))
