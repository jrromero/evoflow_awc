
{'accuracy_score': 0.8042553191489362, 'balanced_accuracy_score': 0.6342300730291492, 'macro_precision_score': 0.5645388793853725, 'macro_recall_score': 0.6342300730291492, 'macro_f1_score': 0.5726597090449083, 'micro_precision_score': 0.8042553191489362, 'micro_recall_score': 0.8042553191489362, 'micro_f1_score': 0.8042553191489362}
('0', Pipeline(steps=[('0', KNNImputer(n_neighbors=9, weights='distance')),
                ('1', MaxAbsScaler()),
                ('2',
                 SGDClassifier(alpha=8.045101838668977e-05, average=True,
                               class_weight='balanced',
                               epsilon=2.0370152812089378e-05,
                               eta0=6.114829965858406e-05,
                               l1_ratio=0.028857299340402816,
                               loss='modified_huber',
                               power_t=0.6353840853122806, random_state=4,
                               tol=0.0013762225388575513))]))
('1', Pipeline(steps=[('0', SimpleImputer()),
                ('1',
                 SMOTE(k_neighbors=3, random_state=4,
                       sampling_strategy='not majority')),
                ('2',
                 DecisionTreeClassifier(class_weight='balanced',
                                        max_depth=1.898821187092606,
                                        max_features=0.6698920635137529,
                                        min_samples_leaf=17,
                                        min_samples_split=17,
                                        random_state=4))]))
('2', Pipeline(steps=[('0', SimpleImputer(strategy='most_frequent')),
                ('1', SMOTE(random_state=4, sampling_strategy='not majority')),
                ('2',
                 DecisionTreeClassifier(class_weight='balanced',
                                        max_depth=1.884454760438246,
                                        max_features=0.1534864855237017,
                                        min_samples_leaf=13,
                                        min_samples_split=19,
                                        random_state=4))]))
('3', Pipeline(steps=[('0', SimpleImputer()),
                ('1',
                 SMOTE(k_neighbors=2, random_state=4,
                       sampling_strategy='not majority')),
                ('2',
                 DecisionTreeClassifier(class_weight='balanced',
                                        max_depth=1.884454760438246,
                                        max_features=0.7803263030996527,
                                        min_samples_leaf=3, min_samples_split=4,
                                        random_state=4))]))
('4', Pipeline(steps=[('0', SimpleImputer()),
                ('1',
                 SMOTE(k_neighbors=2, random_state=4,
                       sampling_strategy='not majority')),
                ('2',
                 DecisionTreeClassifier(class_weight='balanced',
                                        max_depth=1.884454760438246,
                                        max_features=0.7803263030996527,
                                        min_samples_leaf=13,
                                        min_samples_split=4, random_state=4))]))
('5', Pipeline(steps=[('0', SimpleImputer()),
                ('1',
                 DecisionTreeClassifier(class_weight='balanced',
                                        max_depth=1.1728079450238087,
                                        max_features=0.2646645767421312,
                                        min_samples_leaf=10,
                                        min_samples_split=17,
                                        random_state=4))]))
('6', Pipeline(steps=[('0', KNNImputer()), ('1', MaxAbsScaler()),
                ('2', MinMaxScaler()),
                ('3',
                 SGDClassifier(alpha=0.018282467067088873, average=True,
                               class_weight='balanced',
                               epsilon=2.0370152812089378e-05,
                               eta0=0.015757860562240055,
                               l1_ratio=0.002913106043147974,
                               power_t=0.6117693121459202, random_state=4,
                               tol=0.0013762225388575513))]))
('7', Pipeline(steps=[('0', SimpleImputer()),
                ('1',
                 SMOTE(k_neighbors=2, random_state=4,
                       sampling_strategy='not majority')),
                ('2',
                 DecisionTreeClassifier(class_weight='balanced',
                                        max_depth=1.884454760438246,
                                        max_features=0.7010063162224713,
                                        min_samples_leaf=3, min_samples_split=4,
                                        random_state=4))]))
('8', Pipeline(steps=[('0', SimpleImputer(strategy='most_frequent')),
                ('1', SelectPercentile(percentile=90.93273335234531)),
                ('2',
                 DecisionTreeClassifier(class_weight='balanced',
                                        max_depth=1.7594896501384818,
                                        max_features=0.7292769509246534,
                                        min_samples_leaf=7,
                                        min_samples_split=19,
                                        random_state=4))]))
('9', Pipeline(steps=[('0', SimpleImputer(strategy='median')),
                ('1',
                 SMOTE(k_neighbors=3, random_state=4,
                       sampling_strategy='not majority')),
                ('2',
                 DecisionTreeClassifier(max_depth=1.4126830292336328,
                                        max_features=0.2863347772567644,
                                        min_samples_leaf=4,
                                        min_samples_split=19,
                                        random_state=4))]))
