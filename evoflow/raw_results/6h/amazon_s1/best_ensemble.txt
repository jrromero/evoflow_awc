['Agresti', 'Agresti', 'Agresti', 'Agresti', 'Agresti', 'Agresti', 'Ashbacher', 'Ashbacher', 'Ashbacher', 'Ashbacher', 'Ashbacher', 'Cholette', 'Ashbacher', 'Power', 'Ashbacher', 'Ashbacher', 'Ashbacher', 'Riley', 'Ashbacher', 'Ashbacher', 'Auken', 'Auken', 'Auken', 'Auken', 'Auken', 'Auken', 'Chachra', 'Auken', 'Auken', 'Auken', 'Blankenship', 'Blankenship', 'Blankenship', 'Blankenship', 'Blankenship', 'Blankenship', 'Brody', 'Brody', 'Bukowsky', 'Brody', 'Brody', 'Brody', 'Brody', 'Morrison', 'Brown', 'Mitchell', 'Brown', 'Brown', 'Brown', 'Brown', 'Brown', 'Brown', 'Brown', 'Bukowsky', 'Bukowsky', 'Bukowsky', 'Bukowsky', 'Bukowsky', 'Vernon', 'Bukowsky', 'Bukowsky', 'Bukowsky', 'Bukowsky', 'Bukowsky', 'Bukowsky', 'Calvinnme', 'Calvinnme', 'Calvinnme', 'Calvinnme', 'Koenig', 'Calvinnme', 'Calvinnme', 'CFH', 'CFH', 'CFH', 'CFH', 'Dent', 'CFH', 'CFH', 'CFH', 'CFH', 'CFH', 'CFH', 'Chachra', 'Chachra', 'Chachra', 'Chachra', 'Chachra', 'Chachra', 'Chachra', 'Chachra', 'Chachra', 'Chandler', 'Chandler', 'Chandler', 'Chandler', 'Chandler', 'Chandler', 'Chandler', 'Chell', 'Chell', 'Chell', 'Chell', 'Chell', 'Walters', 'Chell', 'Chell', 'Chell', 'Chell', 'CFH', 'Cholette', 'Cholette', 'Cholette', 'Cholette', 'Cholette', 'Cholette', 'Cholette', 'Comdet', 'Comdet', 'Comdet', 'Comdet', 'Comdet', 'Comdet', 'Chandler', 'Comdet', 'Agresti', 'Comdet', 'Corn', 'Corn', 'Corn', 'Corn', 'Goonan', 'Goonan', 'Corn', 'Grove', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Lovitt', 'Bukowsky', 'Davisson', 'Vision', 'Davisson', 'Davisson', 'Dent', 'Dent', 'Dent', 'Dent', 'Dent', 'Dent', 'Chandler', 'Mark', 'Dent', 'Dent', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Goonan', 'Goonan', 'Goonan', 'Goonan', 'Goonan', 'Goonan', 'Goonan', 'Goonan', 'Goonan', 'Koenig', 'Goonan', 'Grove', 'Grove', 'Chandler', 'Shea', 'Grove', 'Grove', 'Grove', 'McKee', 'Grove', 'Harp', 'Harp', 'Harp', 'Harp', 'Harp', 'Harp', 'Harp', 'Hayes', 'Brody', 'Hayes', 'Hayes', 'Hayes', 'Hayes', 'Johnson', 'Hayes', 'Hayes', 'Janson', 'Janson', 'Janson', 'Janson', 'Janson', 'Janson', 'Janson', 'Lovitt', 'Janson', 'Johnson', 'Johnson', 'Johnson', 'Johnson', 'Johnson', 'Johnson', 'Mark', 'Kolln', 'Koenig', 'Koenig', 'Koenig', 'Koenig', 'Koenig', 'Koenig', 'Koenig', 'Koenig', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Lawyeraau', 'Lawyeraau', 'Lawyeraau', 'Lawyeraau', 'Lawyeraau', 'Messick', 'Lawyeraau', 'Davisson', 'Peterson', 'Lee', 'Chandler', 'Chell', 'Nigam', 'Chell', 'Bukowsky', 'Wilson', 'Chell', 'Chell', 'Riley', 'Lee', 'Lovitt', 'Lee', 'Chell', 'Lovitt', 'Chell', 'Lovitt', 'Lovitt', 'Lovitt', 'Lovitt', 'Goonan', 'Mahlers2nd', 'Mahlers2nd', 'Mahlers2nd', 'Mahlers2nd', 'Mahlers2nd', 'Mahlers2nd', 'Mahlers2nd', 'Mahlers2nd', 'Mahlers2nd', 'Riley', 'Mahlers2nd', 'Nigam', 'Mark', 'Mark', 'Mark', 'Mark', 'Mark', 'Mark', 'Mark', 'Mark', 'Messick', 'McKee', 'McKee', 'McKee', 'Comdet', 'Goonan', 'McKee', 'McKee', 'McKee', 'McKee', 'McKee', 'Merritt', 'Merritt', 'Merritt', 'Merritt', 'Merritt', 'Merritt', 'Merritt', 'Merritt', 'Merritt', 'Peterson', 'Merritt', 'Merritt', 'Merritt', 'Messick', 'Messick', 'Messick', 'Messick', 'Lawyeraau', 'Messick', 'Vernon', 'Mitchell', 'Mitchell', 'Mitchell', 'Mitchell', 'Mitchell', 'Mitchell', 'Morrison', 'Morrison', 'Morrison', 'Morrison', 'Morrison', 'Morrison', 'Morrison', 'Morrison', 'Morrison', 'Neal', 'Neal', 'Agresti', 'Neal', 'Goonan', 'Neal', 'Neal', 'Neal', 'Neal', 'Nigam', 'Nigam', 'Vernon', 'Nigam', 'Nigam', 'Koenig', 'Nigam', 'Peterson', 'Peterson', 'Peterson', 'Power', 'Power', 'Power', 'Power', 'Power', 'Power', 'Power', 'Power', 'Power', 'Riley', 'Riley', 'Riley', 'Riley', 'Riley', 'Riley', 'Riley', 'Riley', 'Wilson', 'Robert', 'Robert', 'Robert', 'Robert', 'Bukowsky', 'Robert', 'Robert', 'Robert', 'Shea', 'Shea', 'Shea', 'Cutey', 'Nigam', 'Shea', 'Shea', 'Lovitt', 'Shea', 'Shea', 'Chandler', 'Sherwin', 'Sherwin', 'Sherwin', 'Sherwin', 'Sherwin', 'Sherwin', 'Sherwin', 'Sherwin', 'Sherwin', 'Sherwin', 'Sherwin', 'Vision', 'Taylor', 'Taylor', 'Taylor', 'Taylor', 'Taylor', 'Taylor', 'Taylor', 'Taylor', 'Vernon', 'Vernon', 'Vernon', 'Vernon', 'Vernon', 'Vision', 'Vision', 'Goonan', 'Vision', 'Vision', 'Vision', 'Vision', 'Walters', 'Walters', 'Walters', 'Walters', 'Walters', 'Walters', 'Walters', 'Wilson', 'Wilson', 'Wilson', 'Wilson', 'Lovitt', 'Wilson', 'Wilson', 'Wilson', 'Wilson', 'Wilson', 'Wilson', 'Wilson']
{'accuracy_score': 0.8466666666666667, 'balanced_accuracy_score': 0.8542273837273836, 'macro_precision_score': 0.8527684537684537, 'macro_recall_score': 0.8542273837273836, 'macro_f1_score': 0.8408254506579853, 'micro_precision_score': 0.8466666666666667, 'micro_recall_score': 0.8466666666666667, 'micro_f1_score': 0.8466666666666667}
('0', Pipeline(steps=[('0', MaxAbsScaler()),
                ('1',
                 SMOTETomek(random_state=1, sampling_strategy='not majority')),
                ('2',
                 LinearSVC(C=5.470393746262134, dual=False, random_state=1,
                           tol=1.1596352426938854e-05))]))
('1', Pipeline(steps=[('0', MaxAbsScaler()),
                ('1', SMOTE(random_state=1, sampling_strategy='not majority')),
                ('2',
                 PassiveAggressiveClassifier(C=0.12840286720505298,
                                             loss='squared_hinge',
                                             random_state=1))]))
('2', Pipeline(steps=[('0', VarianceThreshold()), ('1', Normalizer(norm='max')),
                ('2', MinMaxScaler()),
                ('3',
                 PassiveAggressiveClassifier(C=0.05058699882948137,
                                             loss='squared_hinge',
                                             random_state=1))]))
('3', Pipeline(steps=[('0', VarianceThreshold()), ('1', Normalizer(norm='max')),
                ('2', MinMaxScaler()),
                ('3',
                 LinearSVC(C=5.470393746262134, dual=False, random_state=1,
                           tol=0.012150647460201645))]))
('4', Pipeline(steps=[('0', SelectFwe(alpha=0.015411114602545267)),
                ('1', MinMaxScaler()),
                ('2',
                 PassiveAggressiveClassifier(C=3.2231749777599865,
                                             fit_intercept=False,
                                             loss='squared_hinge',
                                             random_state=1))]))
('5', Pipeline(steps=[('0', SelectPercentile(percentile=69.13075316853724)),
                ('1', MaxAbsScaler()),
                ('2',
                 PassiveAggressiveClassifier(C=3.7672671379593554,
                                             fit_intercept=False,
                                             loss='squared_hinge',
                                             random_state=1))]))
('6', Pipeline(steps=[('0', SelectPercentile(percentile=8.772919562423679)),
                ('1', MaxAbsScaler()),
                ('2',
                 PassiveAggressiveClassifier(C=0.05058699882948137,
                                             fit_intercept=False,
                                             loss='squared_hinge',
                                             random_state=1))]))
('7', Pipeline(steps=[('0', MaxAbsScaler()),
                ('1',
                 LinearSVC(C=5.470393746262134, random_state=1,
                           tol=1.1596352426938854e-05))]))
('8', Pipeline(steps=[('0', VarianceThreshold()), ('1', Normalizer(norm='l1')),
                ('2', MinMaxScaler()),
                ('3',
                 MLPClassifier(activation='logistic',
                               alpha=0.00037981575377879246,
                               learning_rate_init=0.005673957926060715,
                               random_state=1))]))
('9', Pipeline(steps=[('0', VarianceThreshold()), ('1', Normalizer(norm='max')),
                ('2', MinMaxScaler()),
                ('3',
                 PassiveAggressiveClassifier(C=6.704267262718514,
                                             fit_intercept=False,
                                             loss='squared_hinge',
                                             random_state=1))]))
