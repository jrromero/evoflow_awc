['0', '0', '0', '0', '0', '0', '0', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '2', '2', '2', '2', '2', '2', '2', '3', '1', '3', '3', '1', '4', '4', '4', '4', '4', '5', '5', '5', '5', '5', '5', '6', '6', '6', '6', '6', '6', '7', '7', '7', '7', '7', '8', '8', '8', '8', '9', '9', '9', '0', '0', '0', '0', '0', '0', '1', '1', '1', '1', '1', '1', '2', '2', '2', '2', '3', '3', '7', '3', '3', '3', '3', '3', '6', '1', '4', '4', '4', '4', '4', '4', '5', '5', '5', '5', '6', '6', '6', '6', '7', '7', '7', '7', '7', '7', '7', '7', '8', '8', '8', '8', '9', '9', '9', '9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '1', '1', '1', '1', '1', '1', '2', '9', '3', '3', '3', '3', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '5', '5', '5', '5', '5', '5', '6', '6', '6', '6', '6', '6', '6', '7', '7', '7', '7', '7', '8', '8', '8', '8', '8', '1', '8', '8', '9', '9', '9', '9', '0', '0', '0', '0', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '2', '2', '2', '2', '2', '2', '2', '2', '2', '5', '3', '3', '3', '3', '3', '3', '4', '4', '2', '4', '4', '1', '4', '4', '4', '4', '5', '5', '6', '6', '6', '6', '6', '6', '6', '6', '7', '7', '7', '7', '7', '7', '7', '7', '8', '8', '8', '8', '8', '9', '9', '0', '9', '9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '1', '1', '1', '1', '4', '1', '1', '1', '1', '1', '1', '7', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '3', '3', '3', '3', '3', '3', '3', '3', '4', '4', '4', '4', '4', '4', '4', '4', '4', '5', '5', '5', '5', '5', '5', '5', '3', '5', '6', '6', '6', '6', '6', '6', '6', '6', '6', '6', '6', '6', '6', '6', '6', '6', '6', '7', '7', '7', '7', '7', '7', '7', '7', '7', '7', '7', '7', '7', '8', '8', '8', '8', '8', '8', '8', '8', '8', '8', '8', '8', '8', '5', '9', '9', '3', '9', '9', '9', '9', '9', '8', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '1', '1', '1', '1', '2', '1', '1', '1', '1', '1', '1', '1', '2', '2', '4', '2', '4', '2', '2', '2', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '4', '4', '4', '4', '4', '4', '4', '4', '4', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '6', '6', '6', '6', '6', '6', '0', '6', '6', '6', '6', '6', '6', '7', '7', '7', '7', '1', '7', '7', '7', '7', '7', '7', '7', '7', '8', '8', '8', '8', '8', '8', '8', '8', '8', '8', '2', '8', '8', '9', '9', '9', '9', '9', '9', '9', '9', '9', '3', '9']
{'accuracy_score': 0.9433962264150944, 'balanced_accuracy_score': 0.9404263282003196, 'macro_precision_score': 0.9429676893732598, 'macro_recall_score': 0.9404263282003196, 'macro_f1_score': 0.9413815389276733, 'micro_precision_score': 0.9433962264150944, 'micro_recall_score': 0.9433962264150944, 'micro_f1_score': 0.9433962264150944}
('0', Pipeline(steps=[('0', KNNImputer(n_neighbors=7)), ('1', MaxAbsScaler()),
                ('2', SimpleImputer(strategy='median')),
                ('3',
                 RandomForestClassifier(bootstrap=False, max_features='log2',
                                        min_samples_split=4, n_estimators=97,
                                        random_state=67949))]))
('1', Pipeline(steps=[('0', MaxAbsScaler()), ('1', MinMaxScaler()),
                ('2',
                 RandomOverSampler(random_state=67949,
                                   sampling_strategy='not majority')),
                ('3',
                 RandomForestClassifier(bootstrap=False, max_features='log2',
                                        min_samples_split=5, n_estimators=51,
                                        random_state=67949))]))
('2', Pipeline(steps=[('0', VarianceThreshold()), ('1', MinMaxScaler()),
                ('2',
                 RandomOverSampler(random_state=67949,
                                   sampling_strategy='minority')),
                ('3',
                 RandomForestClassifier(bootstrap=False, max_features='log2',
                                        min_samples_split=3, n_estimators=85,
                                        random_state=67949))]))
('3', Pipeline(steps=[('0',
                 SMOTETomek(random_state=67949,
                            sampling_strategy='not minority')),
                ('1', VarianceThreshold()),
                ('2',
                 RandomForestClassifier(bootstrap=False, max_features='log2',
                                        n_estimators=97, random_state=67949))]))
('4', Pipeline(steps=[('0', MaxAbsScaler()), ('1', MinMaxScaler()),
                ('2', SimpleImputer(strategy='most_frequent')),
                ('3',
                 RandomForestClassifier(bootstrap=False, max_features='log2',
                                        min_samples_split=3, n_estimators=85,
                                        random_state=67949))]))
('5', Pipeline(steps=[('0', StandardScaler(with_mean=False)),
                ('1', SimpleImputer(strategy='most_frequent')),
                ('2',
                 RandomForestClassifier(bootstrap=False,
                                        class_weight='balanced',
                                        criterion='entropy',
                                        max_features='log2', n_estimators=97,
                                        random_state=67949))]))
('6', Pipeline(steps=[('0', RobustScaler(with_centering=False)),
                ('1', MinMaxScaler()),
                ('2',
                 RandomOverSampler(random_state=67949,
                                   sampling_strategy='not majority')),
                ('3',
                 RandomForestClassifier(bootstrap=False, max_features='sqrt',
                                        min_samples_split=6, n_estimators=71,
                                        random_state=67949))]))
('7', Pipeline(steps=[('0',
                 SMOTETomek(random_state=67949, sampling_strategy='minority')),
                ('1', VarianceThreshold()),
                ('2',
                 RandomForestClassifier(bootstrap=False, max_features='sqrt',
                                        min_samples_split=3, n_estimators=54,
                                        random_state=67949))]))
('8', Pipeline(steps=[('0', MinMaxScaler()),
                ('1',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features='log2', n_estimators=97,
                                        random_state=67949))]))
('9', Pipeline(steps=[('0', MaxAbsScaler()), ('1', MinMaxScaler()),
                ('2',
                 RandomOverSampler(random_state=67949,
                                   sampling_strategy='minority')),
                ('3',
                 MLPClassifier(alpha=0.0017293616108714385,
                               learning_rate_init=0.016385075602893717,
                               random_state=67949))]))
