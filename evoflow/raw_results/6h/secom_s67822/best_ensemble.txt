
{'accuracy_score': 0.7510638297872341, 'balanced_accuracy_score': 0.5930029336495849, 'macro_precision_score': 0.5376262626262627, 'macro_recall_score': 0.5930029336495849, 'macro_f1_score': 0.5282703245232518, 'micro_precision_score': 0.7510638297872341, 'micro_recall_score': 0.7510638297872341, 'micro_f1_score': 0.7510638297872341}
('0', Pipeline(steps=[('0', KNNImputer(n_neighbors=10)),
                ('1', Normalizer(norm='max')),
                ('2',
                 DecisionTreeClassifier(class_weight='balanced',
                                        criterion='entropy',
                                        max_depth=1.218883302019414,
                                        max_features=0.907659601725381,
                                        min_samples_leaf=15,
                                        min_samples_split=17,
                                        random_state=67822))]))
('1', Pipeline(steps=[('0', KNNImputer(n_neighbors=7, weights='distance')),
                ('1', Normalizer(norm='max')),
                ('2',
                 DecisionTreeClassifier(class_weight='balanced',
                                        criterion='entropy',
                                        max_depth=1.218883302019414,
                                        max_features=0.907659601725381,
                                        min_samples_leaf=17,
                                        min_samples_split=17,
                                        random_state=67822))]))
('2', Pipeline(steps=[('0', VarianceThreshold()),
                ('1', KNNImputer(n_neighbors=6, weights='distance')),
                ('2', GaussianNB(var_smoothing=4.662816579567705e-06))]))
('3', Pipeline(steps=[('0', MaxAbsScaler()),
                ('1', KNNImputer(n_neighbors=7, weights='distance')),
                ('2', GaussianNB(var_smoothing=0.008339723770067465))]))
('4', Pipeline(steps=[('0',
                 RandomOverSampler(random_state=67822,
                                   sampling_strategy='minority')),
                ('1', SimpleImputer()),
                ('2', SelectPercentile(percentile=10.859628868672328)),
                ('3', GaussianNB(var_smoothing=7.363124877056682e-07))]))
('5', Pipeline(steps=[('0', MinMaxScaler()), ('1', VarianceThreshold()),
                ('2', SimpleImputer(strategy='median')),
                ('3', BernoulliNB(alpha=0.0755726637752632, fit_prior=False))]))
('6', Pipeline(steps=[('0', KNNImputer(n_neighbors=9, weights='distance')),
                ('1', BernoulliNB(alpha=0.0755726637752632, fit_prior=False))]))
('7', Pipeline(steps=[('0', MaxAbsScaler()),
                ('1', KNNImputer(n_neighbors=7, weights='distance')),
                ('2', GaussianNB(var_smoothing=0.004764339797750392))]))
('8', Pipeline(steps=[('0', StandardScaler(with_std=False)),
                ('1', KNNImputer(n_neighbors=2, weights='distance')),
                ('2', BernoulliNB(alpha=0.0755726637752632))]))
('9', Pipeline(steps=[('0', MaxAbsScaler()),
                ('1', KNNImputer(n_neighbors=9, weights='distance')),
                ('2', GaussianNB(var_smoothing=0.006807788022610368))]))
