
{'accuracy_score': 0.8063829787234043, 'balanced_accuracy_score': 0.6230260283378066, 'macro_precision_score': 0.5607883049592894, 'macro_recall_score': 0.6230260283378066, 'macro_f1_score': 0.5684113865932048, 'micro_precision_score': 0.8063829787234043, 'micro_recall_score': 0.8063829787234043, 'micro_f1_score': 0.8063829787234043}
('0', Pipeline(steps=[('0',
                 RandomUnderSampler(random_state=0,
                                    sampling_strategy='not majority')),
                ('1', SimpleImputer(strategy='median')),
                ('2',
                 DecisionTreeClassifier(class_weight='balanced',
                                        criterion='entropy',
                                        max_depth=1.152800492436156,
                                        max_features=0.7953548901179212,
                                        min_samples_split=15,
                                        random_state=0))]))
('1', Pipeline(steps=[('0',
                 RandomUnderSampler(random_state=0,
                                    sampling_strategy='not majority')),
                ('1', SimpleImputer(strategy='median')),
                ('2',
                 DecisionTreeClassifier(class_weight='balanced',
                                        criterion='entropy',
                                        max_depth=1.152800492436156,
                                        max_features=0.7953548901179212,
                                        min_samples_leaf=2,
                                        min_samples_split=15,
                                        random_state=0))]))
('2', Pipeline(steps=[('0',
                 RandomUnderSampler(random_state=0, replacement=True,
                                    sampling_strategy='not majority')),
                ('1', SimpleImputer()),
                ('2',
                 DecisionTreeClassifier(class_weight='balanced',
                                        criterion='entropy',
                                        max_depth=1.152800492436156,
                                        max_features=0.7953548901179212,
                                        min_samples_split=15,
                                        random_state=0))]))
('3', Pipeline(steps=[('0',
                 RandomUnderSampler(random_state=0,
                                    sampling_strategy='not majority')),
                ('1', SimpleImputer(strategy='median')),
                ('2',
                 DecisionTreeClassifier(class_weight='balanced',
                                        criterion='entropy',
                                        max_depth=1.192247545325205,
                                        max_features=0.8556946084784092,
                                        min_samples_split=15,
                                        random_state=0))]))
('4', Pipeline(steps=[('0', MinMaxScaler()), ('1', KNNImputer(n_neighbors=4)),
                ('2', VarianceThreshold()),
                ('3', BernoulliNB(alpha=0.0658676789174262, fit_prior=False))]))
('5', Pipeline(steps=[('0', KNNImputer(n_neighbors=9, weights='distance')),
                ('1', MaxAbsScaler()),
                ('2',
                 SGDClassifier(alpha=1.8141633535384996e-06, average=True,
                               class_weight='balanced',
                               epsilon=0.0037637767538482034,
                               eta0=0.06296266912176181,
                               l1_ratio=1.965465954219091e-08,
                               loss='perceptron', power_t=0.4057470455046212,
                               random_state=0, tol=0.00929606790481818))]))
('6', Pipeline(steps=[('0', MinMaxScaler()), ('1', MaxAbsScaler()),
                ('2', KNNImputer(n_neighbors=7, weights='distance')),
                ('3',
                 DecisionTreeClassifier(class_weight='balanced',
                                        max_depth=1.4426741600868191,
                                        max_features=0.7953548901179212,
                                        min_samples_split=15,
                                        random_state=0))]))
('7', Pipeline(steps=[('0', MinMaxScaler()), ('1', KNNImputer(n_neighbors=3)),
                ('2', VarianceThreshold()),
                ('3',
                 SGDClassifier(alpha=0.0007784076984547651, average=True,
                               class_weight='balanced',
                               epsilon=1.0485220585001074e-05,
                               eta0=0.003112185441081122,
                               l1_ratio=1.1801872737604759e-05,
                               loss='squared_hinge', power_t=0.1644142462379703,
                               random_state=0, tol=2.6117257605845042e-05))]))
('8', Pipeline(steps=[('0', MinMaxScaler()), ('1', MaxAbsScaler()),
                ('2', KNNImputer(n_neighbors=3)), ('3', VarianceThreshold()),
                ('4',
                 SGDClassifier(alpha=0.00015329374675656786, average=True,
                               class_weight='balanced',
                               epsilon=0.0011081830846104573,
                               eta0=2.636730541141059e-06,
                               l1_ratio=4.5341360000218547e-07,
                               power_t=0.1644142462379703, random_state=0,
                               tol=0.018687327532025923))]))
('9', Pipeline(steps=[('0', MaxAbsScaler()),
                ('1', KNNImputer(n_neighbors=3, weights='distance')),
                ('2', VarianceThreshold()),
                ('3',
                 SGDClassifier(alpha=0.00015329374675656786, average=True,
                               class_weight='balanced',
                               epsilon=1.1030849149330132e-05,
                               eta0=7.33280030371738e-07,
                               l1_ratio=8.885722234662296e-05,
                               power_t=0.4322047239158022, random_state=0,
                               tol=1.3244277072844047e-05))]))
