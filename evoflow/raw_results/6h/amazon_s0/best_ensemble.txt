['Agresti', 'Agresti', 'Agresti', 'Agresti', 'Agresti', 'Agresti', 'Ashbacher', 'Ashbacher', 'Ashbacher', 'Ashbacher', 'Ashbacher', 'Cholette', 'Ashbacher', 'Power', 'Ashbacher', 'Ashbacher', 'Ashbacher', 'Riley', 'Ashbacher', 'Janson', 'Auken', 'Auken', 'Auken', 'Auken', 'Auken', 'Auken', 'Chachra', 'Auken', 'Auken', 'Auken', 'Blankenship', 'Blankenship', 'Blankenship', 'Blankenship', 'Blankenship', 'Blankenship', 'Brody', 'Brody', 'Bukowsky', 'Brody', 'Brody', 'Brody', 'Brody', 'Morrison', 'Brown', 'Mitchell', 'Brown', 'Brown', 'Brown', 'Brown', 'Brown', 'Brown', 'Brown', 'Bukowsky', 'Bukowsky', 'Bukowsky', 'Bukowsky', 'Bukowsky', 'Vernon', 'Bukowsky', 'Bukowsky', 'Bukowsky', 'Bukowsky', 'Bukowsky', 'Bukowsky', 'Calvinnme', 'Calvinnme', 'Calvinnme', 'Calvinnme', 'Koenig', 'Calvinnme', 'Calvinnme', 'CFH', 'CFH', 'CFH', 'CFH', 'Dent', 'CFH', 'CFH', 'CFH', 'CFH', 'CFH', 'CFH', 'Chachra', 'Chachra', 'Chachra', 'Chachra', 'Chachra', 'Chachra', 'Chachra', 'Chachra', 'Chachra', 'Chandler', 'Chandler', 'Chandler', 'Chandler', 'Chandler', 'Chandler', 'Chandler', 'Chell', 'Chell', 'Chell', 'Chell', 'Chell', 'Walters', 'Chell', 'Chell', 'Chell', 'Chell', 'CFH', 'Cholette', 'Cholette', 'Cholette', 'Cholette', 'Cholette', 'Cholette', 'Cholette', 'Comdet', 'Comdet', 'Comdet', 'Comdet', 'Comdet', 'Comdet', 'Chandler', 'Comdet', 'Agresti', 'Comdet', 'Corn', 'Corn', 'Corn', 'Corn', 'Goonan', 'Goonan', 'Corn', 'Grove', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Lovitt', 'Bukowsky', 'Davisson', 'Vision', 'Davisson', 'Davisson', 'Dent', 'Dent', 'Dent', 'Dent', 'Dent', 'Dent', 'Chandler', 'Mark', 'Dent', 'Dent', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Goonan', 'Goonan', 'Goonan', 'Goonan', 'Goonan', 'Goonan', 'Goonan', 'Goonan', 'Goonan', 'Koenig', 'Goonan', 'Grove', 'Grove', 'Chandler', 'Shea', 'Grove', 'Grove', 'Grove', 'McKee', 'Grove', 'Harp', 'Harp', 'Harp', 'Harp', 'Harp', 'Harp', 'Harp', 'Hayes', 'Brody', 'Hayes', 'Hayes', 'Hayes', 'Hayes', 'Johnson', 'Hayes', 'Hayes', 'Janson', 'Janson', 'Janson', 'Janson', 'Janson', 'Janson', 'Janson', 'Lovitt', 'Janson', 'Johnson', 'Johnson', 'Johnson', 'Johnson', 'Johnson', 'Johnson', 'Mark', 'Koenig', 'Koenig', 'Koenig', 'Koenig', 'Koenig', 'Koenig', 'Koenig', 'Koenig', 'Koenig', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Lawyeraau', 'Lawyeraau', 'Lawyeraau', 'Lawyeraau', 'Lawyeraau', 'Messick', 'Lawyeraau', 'Davisson', 'Peterson', 'Chell', 'Chandler', 'Chell', 'Lee', 'Chell', 'Bukowsky', 'Wilson', 'Chell', 'Lee', 'Lee', 'Lee', 'Lovitt', 'Lee', 'Chell', 'Lovitt', 'Chell', 'Lovitt', 'Lovitt', 'Lovitt', 'Lovitt', 'Goonan', 'Mahlers2nd', 'Mahlers2nd', 'Mahlers2nd', 'CFH', 'Mahlers2nd', 'Mahlers2nd', 'Mahlers2nd', 'Mahlers2nd', 'Mahlers2nd', 'Riley', 'Mahlers2nd', 'Nigam', 'Mark', 'Mark', 'Mark', 'Mark', 'Mark', 'Mark', 'Mark', 'Mark', 'Messick', 'McKee', 'McKee', 'McKee', 'Comdet', 'Goonan', 'McKee', 'McKee', 'McKee', 'McKee', 'McKee', 'Merritt', 'Merritt', 'Merritt', 'Merritt', 'Merritt', 'Merritt', 'Merritt', 'Merritt', 'Merritt', 'Peterson', 'Merritt', 'Merritt', 'Merritt', 'Messick', 'Messick', 'Messick', 'Messick', 'Lawyeraau', 'Messick', 'Vernon', 'Mitchell', 'Mitchell', 'Mitchell', 'Mitchell', 'Mitchell', 'Mitchell', 'Morrison', 'Morrison', 'Morrison', 'Morrison', 'Morrison', 'Morrison', 'Morrison', 'Morrison', 'Morrison', 'Neal', 'Neal', 'Agresti', 'Neal', 'Goonan', 'Neal', 'Neal', 'Neal', 'Neal', 'Nigam', 'Nigam', 'Vernon', 'Nigam', 'Nigam', 'Koenig', 'Nigam', 'Peterson', 'Peterson', 'Peterson', 'Power', 'Power', 'Power', 'Power', 'Power', 'Power', 'Power', 'Power', 'Power', 'Riley', 'Riley', 'Riley', 'Riley', 'Riley', 'Riley', 'Riley', 'Riley', 'Wilson', 'Robert', 'Robert', 'Robert', 'Robert', 'Bukowsky', 'Robert', 'Robert', 'Robert', 'Shea', 'Shea', 'Mark', 'Cutey', 'Nigam', 'Shea', 'Shea', 'Lovitt', 'Shea', 'Shea', 'Sherwin', 'Sherwin', 'Sherwin', 'Sherwin', 'Sherwin', 'Sherwin', 'Sherwin', 'Sherwin', 'Sherwin', 'Sherwin', 'Sherwin', 'Sherwin', 'Vision', 'Taylor', 'Taylor', 'Taylor', 'Calvinnme', 'Taylor', 'Taylor', 'Taylor', 'Taylor', 'Vernon', 'Vernon', 'Vernon', 'Vernon', 'Vernon', 'Vision', 'Vision', 'Goonan', 'Vision', 'Vision', 'Vision', 'Vision', 'Walters', 'Walters', 'Walters', 'Walters', 'Walters', 'Walters', 'Walters', 'Wilson', 'Wilson', 'Wilson', 'Wilson', 'Lovitt', 'Wilson', 'Wilson', 'Wilson', 'Wilson', 'Wilson', 'Wilson', 'Wilson']
{'accuracy_score': 0.8466666666666667, 'balanced_accuracy_score': 0.854030414030414, 'macro_precision_score': 0.8534509934509934, 'macro_recall_score': 0.854030414030414, 'macro_f1_score': 0.8417735315805177, 'micro_precision_score': 0.8466666666666667, 'micro_recall_score': 0.8466666666666667, 'micro_f1_score': 0.8466666666666667}
('0', Pipeline(steps=[('0', MinMaxScaler()),
                ('1',
                 LinearSVC(C=0.03423781771143456, class_weight='balanced',
                           dual=False, random_state=0,
                           tol=6.606958695599835e-05))]))
('1', Pipeline(steps=[('0', KNNImputer(weights='distance')), ('1', MaxAbsScaler()),
                ('2', SelectFwe(alpha=0.04257630140918143)),
                ('3',
                 LinearSVC(C=0.06232120056358629, class_weight='balanced',
                           random_state=0, tol=0.0028224388643861083))]))
('2', Pipeline(steps=[('0', RobustScaler(with_centering=False, with_scaling=False)),
                ('1', MinMaxScaler()),
                ('2',
                 LinearSVC(C=1.389735569479977, dual=False, random_state=0,
                           tol=0.00010363344570766862))]))
('3', Pipeline(steps=[('0', VarianceThreshold()), ('1', MinMaxScaler()),
                ('2',
                 LinearSVC(C=1.389735569479977, dual=False, random_state=0,
                           tol=0.00010363344570766862))]))
('4', Pipeline(steps=[('0', MaxAbsScaler()),
                ('1',
                 PassiveAggressiveClassifier(C=0.03941422644840796,
                                             loss='squared_hinge',
                                             random_state=0))]))
('5', Pipeline(steps=[('0', KNNImputer(weights='distance')), ('1', MaxAbsScaler()),
                ('2', SelectFwe(alpha=0.04257630140918143)),
                ('3',
                 LinearSVC(C=0.06232120056358629, class_weight='balanced',
                           random_state=0, tol=0.0028224388643861083))]))
('6', Pipeline(steps=[('0', MinMaxScaler()),
                ('1',
                 LinearSVC(C=0.06232120056358629, class_weight='balanced',
                           loss='hinge', random_state=0,
                           tol=0.0028224388643861083))]))
('7', Pipeline(steps=[('0', KNNImputer()), ('1', MaxAbsScaler()),
                ('2', SelectFwe(alpha=0.04257630140918143)),
                ('3',
                 LinearSVC(C=0.06232120056358629, class_weight='balanced',
                           random_state=0, tol=0.0028224388643861083))]))
('8', Pipeline(steps=[('0', KNNImputer(weights='distance')), ('1', MaxAbsScaler()),
                ('2', SelectFwe(alpha=0.04257630140918143)),
                ('3',
                 PassiveAggressiveClassifier(C=0.16445038087541564,
                                             random_state=0))]))
('9', Pipeline(steps=[('0', MaxAbsScaler()), ('1', MinMaxScaler()),
                ('2',
                 LinearSVC(C=0.06232120056358629, class_weight='balanced',
                           random_state=0, tol=0.0028224388643861083))]))
