['POX', 'CYT', 'CYT', 'CYT', 'CYT', 'EXC', 'CYT', 'CYT', 'MIT', 'ME1', 'ME1', 'ME2', 'CYT', 'ME1', 'CYT', 'CYT', 'CYT', 'MIT', 'MIT', 'NUC', 'ME3', 'CYT', 'CYT', 'ME1', 'MIT', 'MIT', 'MIT', 'POX', 'ME3', 'MIT', 'ME1', 'ME3', 'CYT', 'CYT', 'CYT', 'POX', 'NUC', 'MIT', 'CYT', 'MIT', 'ME3', 'CYT', 'NUC', 'CYT', 'NUC', 'CYT', 'MIT', 'NUC', 'CYT', 'NUC', 'CYT', 'NUC', 'CYT', 'MIT', 'NUC', 'MIT', 'POX', 'NUC', 'CYT', 'ME1', 'ME3', 'MIT', 'MIT', 'ME3', 'MIT', 'MIT', 'MIT', 'EXC', 'CYT', 'CYT', 'EXC', 'VAC', 'CYT', 'ME2', 'CYT', 'MIT', 'EXC', 'EXC', 'CYT', 'CYT', 'CYT', 'CYT', 'ME3', 'POX', 'CYT', 'NUC', 'CYT', 'NUC', 'MIT', 'CYT', 'ME3', 'NUC', 'ME3', 'CYT', 'ME3', 'NUC', 'CYT', 'ME2', 'CYT', 'CYT', 'ME2', 'ME3', 'NUC', 'EXC', 'NUC', 'NUC', 'CYT', 'ME3', 'ME3', 'POX', 'ME3', 'ME1', 'ME1', 'CYT', 'ME3', 'ME3', 'ME1', 'CYT', 'NUC', 'NUC', 'MIT', 'ME3', 'MIT', 'CYT', 'ME3', 'CYT', 'NUC', 'CYT', 'NUC', 'CYT', 'CYT', 'NUC', 'ME2', 'ME2', 'NUC', 'NUC', 'MIT', 'NUC', 'CYT', 'CYT', 'NUC', 'MIT', 'NUC', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'ME3', 'NUC', 'CYT', 'NUC', 'MIT', 'MIT', 'MIT', 'NUC', 'CYT', 'ME3', 'ME3', 'CYT', 'MIT', 'MIT', 'CYT', 'MIT', 'CYT', 'NUC', 'ME1', 'ME3', 'CYT', 'MIT', 'ME1', 'NUC', 'MIT', 'MIT', 'ME3', 'ME2', 'ME2', 'CYT', 'NUC', 'NUC', 'ME3', 'ME3', 'ME2', 'CYT', 'NUC', 'NUC', 'ME3', 'ME2', 'CYT', 'MIT', 'MIT', 'MIT', 'MIT', 'CYT', 'CYT', 'MIT', 'ME3', 'NUC', 'NUC', 'MIT', 'CYT', 'NUC', 'NUC', 'NUC', 'MIT', 'MIT', 'ME3', 'MIT', 'CYT', 'CYT', 'NUC', 'MIT', 'MIT', 'ME3', 'MIT', 'NUC', 'POX', 'MIT', 'CYT', 'MIT', 'ME3', 'NUC', 'ME2', 'VAC', 'ME3', 'MIT', 'NUC', 'ME3', 'CYT', 'ME2', 'NUC', 'CYT', 'EXC', 'NUC', 'ME2', 'ME3', 'ME1', 'CYT', 'CYT', 'CYT', 'MIT', 'CYT', 'CYT', 'CYT', 'NUC', 'ME3', 'CYT', 'POX', 'CYT', 'MIT', 'NUC', 'POX', 'MIT', 'CYT', 'EXC', 'CYT', 'CYT', 'ME3', 'CYT', 'ME1', 'ME2', 'ME3', 'NUC', 'NUC', 'CYT', 'CYT', 'ME3', 'CYT', 'ME2', 'MIT', 'CYT', 'NUC', 'CYT', 'MIT', 'NUC', 'CYT', 'NUC', 'NUC', 'CYT', 'MIT', 'MIT', 'NUC', 'NUC', 'CYT', 'ME3', 'CYT', 'ME2', 'CYT', 'NUC', 'CYT', 'MIT', 'NUC', 'NUC', 'MIT', 'CYT', 'NUC', 'MIT', 'CYT', 'NUC', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'NUC', 'ME3', 'CYT', 'CYT', 'NUC', 'NUC', 'CYT', 'CYT', 'CYT', 'MIT', 'CYT', 'CYT', 'CYT', 'CYT', 'MIT', 'CYT', 'MIT', 'NUC', 'MIT', 'CYT', 'CYT', 'CYT', 'MIT', 'MIT', 'CYT', 'MIT', 'MIT', 'MIT', 'EXC', 'POX', 'CYT', 'CYT', 'CYT', 'CYT', 'NUC', 'ME3', 'ME3', 'CYT', 'ME1', 'NUC', 'MIT', 'MIT', 'NUC', 'CYT', 'CYT', 'ME3', 'CYT', 'NUC', 'CYT', 'ME3', 'ME3', 'NUC', 'MIT', 'ME3', 'CYT', 'CYT', 'ME3', 'MIT', 'NUC', 'NUC', 'CYT', 'CYT', 'CYT', 'CYT', 'NUC', 'NUC', 'CYT', 'MIT', 'NUC', 'NUC', 'ME3', 'ME3', 'EXC', 'ME3', 'ME1', 'NUC', 'MIT', 'NUC', 'CYT', 'ME1', 'NUC', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'NUC', 'NUC', 'NUC', 'CYT', 'MIT', 'NUC', 'CYT', 'NUC', 'NUC', 'CYT', 'ME1', 'ME1', 'CYT', 'NUC', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'ME3', 'CYT', 'CYT', 'CYT', 'ME1', 'CYT', 'ME1', 'NUC', 'ME1', 'CYT', 'ME3', 'POX', 'ME3', 'ME3', 'ME3', 'ME3', 'ME3', 'ME3', 'ME3', 'MIT', 'NUC', 'ME3', 'MIT', 'NUC', 'CYT', 'CYT', 'NUC', 'CYT', 'ME2']
{'accuracy_score': 0.6067415730337079, 'balanced_accuracy_score': 0.6068701522844782, 'macro_precision_score': 0.5873861400406765, 'macro_recall_score': 0.6068701522844782, 'macro_f1_score': 0.5797870498491862, 'micro_precision_score': 0.6067415730337079, 'micro_recall_score': 0.6067415730337079, 'micro_f1_score': 0.6067415730337079}
('0', Pipeline(steps=[('0',
                 SGDClassifier(alpha=0.0011820343556867153, average=True,
                               class_weight='balanced',
                               epsilon=8.479965508895698e-05,
                               eta0=3.8044308376804693e-06,
                               l1_ratio=0.03496342250066646, loss='log',
                               power_t=0.14126103989608238, random_state=8232,
                               tol=5.4505233244055025e-05))]))
('1', Pipeline(steps=[('0', VarianceThreshold()),
                ('1',
                 FastICA(n_components=72, random_state=8232, whiten=False)),
                ('2',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        max_features='sqrt', min_samples_leaf=3,
                                        min_samples_split=17, n_estimators=62,
                                        random_state=8232))]))
('2', Pipeline(steps=[('0',
                 SMOTE(random_state=8232, sampling_strategy='not minority')),
                ('1', MaxAbsScaler()),
                ('2',
                 FastICA(algorithm='deflation', fun='exp', n_components=16,
                         random_state=8232, whiten=False)),
                ('3',
                 SGDClassifier(alpha=0.0005261862079082271,
                               class_weight='balanced',
                               epsilon=0.0003637752462019802,
                               eta0=1.2012746567283423e-06,
                               l1_ratio=0.0023259850043537435, loss='log',
                               power_t=0.12110250105881781, random_state=8232,
                               tol=0.000255838248631989))]))
('3', Pipeline(steps=[('0', SelectPercentile(percentile=83.84764896349732)),
                ('1', RobustScaler(with_centering=False, with_scaling=False)),
                ('2',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        max_features='sqrt', min_samples_leaf=2,
                                        min_samples_split=17, n_estimators=84,
                                        random_state=8232))]))
('4', Pipeline(steps=[('0', MinMaxScaler()), ('1', MaxAbsScaler()),
                ('2',
                 RandomForestClassifier(bootstrap=False,
                                        class_weight='balanced_subsample',
                                        criterion='entropy',
                                        max_features='log2', min_samples_leaf=3,
                                        min_samples_split=18, n_estimators=45,
                                        random_state=8232))]))
('5', Pipeline(steps=[('0', VarianceThreshold()),
                ('1',
                 RandomForestClassifier(bootstrap=False,
                                        class_weight='balanced',
                                        criterion='entropy',
                                        max_features='sqrt',
                                        min_samples_split=19, n_estimators=51,
                                        random_state=8232))]))
('6', Pipeline(steps=[('0',
                 FastICA(fun='exp', n_components=47, random_state=8232,
                         whiten=False)),
                ('1',
                 RandomForestClassifier(class_weight='balanced',
                                        max_features='sqrt', min_samples_leaf=2,
                                        min_samples_split=15, n_estimators=38,
                                        random_state=8232))]))
('7', Pipeline(steps=[('0', VarianceThreshold()),
                ('1',
                 RandomForestClassifier(bootstrap=False,
                                        class_weight='balanced',
                                        criterion='entropy',
                                        max_features='sqrt', min_samples_leaf=2,
                                        min_samples_split=20, n_estimators=45,
                                        random_state=8232))]))
('8', Pipeline(steps=[('0', VarianceThreshold()),
                ('1',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        max_features='log2', min_samples_leaf=2,
                                        min_samples_split=19, n_estimators=55,
                                        random_state=8232))]))
('9', Pipeline(steps=[('0', SimpleImputer(strategy='median')), ('1', MinMaxScaler()),
                ('2',
                 FastICA(algorithm='deflation', fun='exp', n_components=16,
                         random_state=8232, whiten=False)),
                ('3',
                 RandomForestClassifier(bootstrap=False,
                                        class_weight='balanced_subsample',
                                        max_features='log2', min_samples_leaf=9,
                                        min_samples_split=18,
                                        random_state=8232))]))
