['POX', 'NUC', 'CYT', 'CYT', 'MIT', 'EXC', 'CYT', 'CYT', 'MIT', 'ME1', 'ME1', 'ME2', 'MIT', 'ME2', 'CYT', 'CYT', 'CYT', 'MIT', 'MIT', 'NUC', 'ME3', 'CYT', 'CYT', 'ME1', 'MIT', 'MIT', 'MIT', 'POX', 'ME3', 'MIT', 'ME1', 'ME3', 'CYT', 'CYT', 'VAC', 'POX', 'NUC', 'MIT', 'NUC', 'MIT', 'ME3', 'NUC', 'NUC', 'CYT', 'NUC', 'CYT', 'MIT', 'NUC', 'CYT', 'NUC', 'CYT', 'NUC', 'CYT', 'MIT', 'NUC', 'MIT', 'POX', 'NUC', 'CYT', 'ME1', 'ME1', 'MIT', 'MIT', 'ME3', 'MIT', 'MIT', 'MIT', 'EXC', 'CYT', 'CYT', 'EXC', 'EXC', 'CYT', 'ME2', 'CYT', 'NUC', 'EXC', 'EXC', 'CYT', 'CYT', 'CYT', 'CYT', 'ME3', 'POX', 'NUC', 'NUC', 'CYT', 'NUC', 'MIT', 'NUC', 'ME3', 'NUC', 'ME3', 'CYT', 'ME3', 'NUC', 'CYT', 'ME2', 'CYT', 'CYT', 'ME2', 'ME3', 'NUC', 'EXC', 'ERL', 'CYT', 'CYT', 'ME3', 'ME3', 'POX', 'ME3', 'ME2', 'ME1', 'CYT', 'ME3', 'ME3', 'ME1', 'NUC', 'NUC', 'NUC', 'MIT', 'ME3', 'MIT', 'NUC', 'ME3', 'NUC', 'NUC', 'CYT', 'ME3', 'CYT', 'CYT', 'NUC', 'VAC', 'ME2', 'NUC', 'NUC', 'MIT', 'NUC', 'CYT', 'CYT', 'NUC', 'MIT', 'NUC', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'ME3', 'NUC', 'CYT', 'NUC', 'MIT', 'MIT', 'MIT', 'NUC', 'CYT', 'ME3', 'ME3', 'CYT', 'MIT', 'MIT', 'CYT', 'MIT', 'CYT', 'NUC', 'ME1', 'ME3', 'NUC', 'MIT', 'ME1', 'NUC', 'ERL', 'MIT', 'ME3', 'ME2', 'ME2', 'NUC', 'CYT', 'ME3', 'ME3', 'ME3', 'ME2', 'CYT', 'NUC', 'NUC', 'ME3', 'ME2', 'CYT', 'MIT', 'MIT', 'MIT', 'ME3', 'CYT', 'CYT', 'MIT', 'ME3', 'NUC', 'NUC', 'MIT', 'CYT', 'NUC', 'NUC', 'NUC', 'MIT', 'MIT', 'ME3', 'MIT', 'CYT', 'CYT', 'NUC', 'MIT', 'MIT', 'ME3', 'MIT', 'NUC', 'CYT', 'MIT', 'CYT', 'MIT', 'ME3', 'CYT', 'ME3', 'VAC', 'ME3', 'MIT', 'NUC', 'ME3', 'CYT', 'ME2', 'NUC', 'CYT', 'EXC', 'NUC', 'ME2', 'ME3', 'ME1', 'CYT', 'CYT', 'CYT', 'MIT', 'CYT', 'CYT', 'CYT', 'NUC', 'ME3', 'CYT', 'POX', 'CYT', 'MIT', 'NUC', 'POX', 'MIT', 'CYT', 'EXC', 'CYT', 'NUC', 'ME3', 'MIT', 'ME1', 'ME2', 'ME3', 'NUC', 'NUC', 'CYT', 'CYT', 'ME3', 'CYT', 'ME2', 'MIT', 'NUC', 'NUC', 'CYT', 'MIT', 'NUC', 'CYT', 'NUC', 'NUC', 'CYT', 'MIT', 'MIT', 'NUC', 'NUC', 'CYT', 'ME3', 'CYT', 'ME2', 'CYT', 'NUC', 'CYT', 'MIT', 'NUC', 'NUC', 'MIT', 'CYT', 'NUC', 'ME3', 'CYT', 'NUC', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'NUC', 'ME3', 'CYT', 'CYT', 'NUC', 'NUC', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'MIT', 'CYT', 'MIT', 'NUC', 'MIT', 'CYT', 'CYT', 'CYT', 'MIT', 'MIT', 'CYT', 'MIT', 'MIT', 'MIT', 'EXC', 'ME3', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'ME3', 'ME3', 'CYT', 'ME1', 'NUC', 'MIT', 'MIT', 'CYT', 'CYT', 'CYT', 'ME3', 'CYT', 'NUC', 'CYT', 'ME3', 'ME3', 'NUC', 'MIT', 'ME3', 'CYT', 'CYT', 'ME3', 'MIT', 'NUC', 'NUC', 'CYT', 'CYT', 'CYT', 'CYT', 'NUC', 'NUC', 'CYT', 'MIT', 'NUC', 'NUC', 'ME3', 'ME3', 'EXC', 'ME3', 'ME1', 'NUC', 'MIT', 'NUC', 'CYT', 'EXC', 'CYT', 'CYT', 'CYT', 'NUC', 'CYT', 'CYT', 'CYT', 'CYT', 'NUC', 'NUC', 'NUC', 'CYT', 'MIT', 'NUC', 'NUC', 'NUC', 'NUC', 'CYT', 'ME1', 'ME1', 'CYT', 'NUC', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'ME3', 'CYT', 'NUC', 'CYT', 'ME1', 'CYT', 'ME2', 'NUC', 'ME1', 'CYT', 'ME3', 'POX', 'ME3', 'ME3', 'ME3', 'ME3', 'ME3', 'ME3', 'ME3', 'MIT', 'NUC', 'ME3', 'MIT', 'NUC', 'CYT', 'NUC', 'NUC', 'CYT', 'ME2']
{'accuracy_score': 0.6089887640449438, 'balanced_accuracy_score': 0.5937929449796369, 'macro_precision_score': 0.4878830833209502, 'macro_recall_score': 0.5344136504816731, 'macro_f1_score': 0.506478346551876, 'micro_precision_score': 0.6089887640449438, 'micro_recall_score': 0.6089887640449438, 'micro_f1_score': 0.6089887640449438}
('0', Pipeline(steps=[('0', StandardScaler(with_mean=False, with_std=False)),
                ('1',
                 FastICA(algorithm='deflation', fun='exp', n_components=62,
                         random_state=3)),
                ('2',
                 ExtraTreesClassifier(class_weight='balanced_subsample',
                                      max_features='sqrt', min_samples_leaf=4,
                                      min_samples_split=4, n_estimators=51,
                                      random_state=3))]))
('1', Pipeline(steps=[('0', VarianceThreshold()), ('1', MinMaxScaler()),
                ('2', RobustScaler(with_centering=False, with_scaling=False)),
                ('3',
                 ExtraTreesClassifier(bootstrap=True,
                                      class_weight='balanced_subsample',
                                      criterion='entropy', max_features='log2',
                                      min_samples_split=19, n_estimators=44,
                                      random_state=3))]))
('2', Pipeline(steps=[('0', MaxAbsScaler()),
                ('1',
                 ExtraTreesClassifier(bootstrap=True,
                                      class_weight='balanced_subsample',
                                      criterion='entropy', max_features='log2',
                                      min_samples_split=19, n_estimators=44,
                                      random_state=3))]))
('3', Pipeline(steps=[('0', MaxAbsScaler()), ('1', MinMaxScaler()),
                ('2',
                 ExtraTreesClassifier(class_weight='balanced',
                                      criterion='entropy', max_features='log2',
                                      min_samples_leaf=2, min_samples_split=12,
                                      n_estimators=33, random_state=3))]))
('4', Pipeline(steps=[('0', StandardScaler()),
                ('1', SelectPercentile(percentile=64.12703514573687)),
                ('2', MaxAbsScaler()),
                ('3',
                 ExtraTreesClassifier(bootstrap=True, class_weight='balanced',
                                      criterion='entropy', max_features='log2',
                                      min_samples_leaf=4, min_samples_split=3,
                                      n_estimators=80, random_state=3))]))
('5', Pipeline(steps=[('0', VarianceThreshold()), ('1', MinMaxScaler()),
                ('2', SimpleImputer(strategy='most_frequent')),
                ('3',
                 ExtraTreesClassifier(bootstrap=True,
                                      class_weight='balanced_subsample',
                                      criterion='entropy', max_features='log2',
                                      min_samples_split=19, n_estimators=44,
                                      random_state=3))]))
('6', Pipeline(steps=[('0', VarianceThreshold()),
                ('1', StandardScaler(with_mean=False)),
                ('2',
                 RandomForestClassifier(bootstrap=False,
                                        class_weight='balanced',
                                        criterion='entropy',
                                        max_features='sqrt', min_samples_leaf=3,
                                        min_samples_split=15, n_estimators=95,
                                        random_state=3))]))
('7', Pipeline(steps=[('0', MaxAbsScaler()), ('1', MinMaxScaler()),
                ('2', SimpleImputer()),
                ('3',
                 RandomForestClassifier(class_weight='balanced',
                                        max_features='log2',
                                        min_samples_split=11, n_estimators=25,
                                        random_state=3))]))
('8', Pipeline(steps=[('0', MinMaxScaler()), ('1', MaxAbsScaler()),
                ('2',
                 RBFSampler(gamma=0.4805661146027963, n_components=35,
                            random_state=3)),
                ('3',
                 RandomForestClassifier(bootstrap=False,
                                        class_weight='balanced_subsample',
                                        criterion='entropy',
                                        max_features='log2', min_samples_leaf=9,
                                        min_samples_split=16, n_estimators=93,
                                        random_state=3))]))
('9', Pipeline(steps=[('0',
                 SMOTE(k_neighbors=3, random_state=3,
                       sampling_strategy='minority')),
                ('1', VarianceThreshold()), ('2', MinMaxScaler()),
                ('3',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        max_features='sqrt',
                                        min_samples_split=15, n_estimators=45,
                                        random_state=3))]))
