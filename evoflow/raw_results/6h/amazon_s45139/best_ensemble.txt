['Agresti', 'Agresti', 'Agresti', 'Agresti', 'Agresti', 'Agresti', 'Ashbacher', 'Ashbacher', 'Ashbacher', 'Ashbacher', 'Ashbacher', 'Cholette', 'Ashbacher', 'Power', 'Ashbacher', 'Ashbacher', 'Ashbacher', 'Riley', 'Ashbacher', 'Vision', 'Lee', 'Auken', 'Auken', 'Auken', 'Auken', 'Auken', 'Cholette', 'Auken', 'Auken', 'Auken', 'Blankenship', 'Blankenship', 'Blankenship', 'Blankenship', 'Blankenship', 'Blankenship', 'Brody', 'Brody', 'Bukowsky', 'Brody', 'Brody', 'Brody', 'Brody', 'Morrison', 'Brown', 'Mitchell', 'Brown', 'Brown', 'Brown', 'Brown', 'Brown', 'Brown', 'Brown', 'Bukowsky', 'Bukowsky', 'Bukowsky', 'Bukowsky', 'Bukowsky', 'Vernon', 'Bukowsky', 'Bukowsky', 'Bukowsky', 'Bukowsky', 'Bukowsky', 'Bukowsky', 'Calvinnme', 'Calvinnme', 'Calvinnme', 'Calvinnme', 'Koenig', 'Calvinnme', 'Calvinnme', 'CFH', 'CFH', 'CFH', 'CFH', 'Dent', 'CFH', 'CFH', 'CFH', 'CFH', 'CFH', 'CFH', 'Chachra', 'Chachra', 'Chachra', 'Chachra', 'Chachra', 'Chachra', 'Chachra', 'Chachra', 'Chachra', 'Chandler', 'Chandler', 'Chandler', 'Chandler', 'Chandler', 'Chandler', 'Chandler', 'Chell', 'Chell', 'Kolln', 'Chell', 'Chell', 'Walters', 'Chell', 'Chell', 'Chell', 'Comdet', 'CFH', 'Cholette', 'Cholette', 'Cholette', 'Cholette', 'Cholette', 'Cholette', 'Cholette', 'Comdet', 'Comdet', 'Comdet', 'Comdet', 'Comdet', 'Comdet', 'Comdet', 'Comdet', 'Agresti', 'Comdet', 'Corn', 'Corn', 'Corn', 'Corn', 'Goonan', 'Goonan', 'Corn', 'Grove', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Lovitt', 'Bukowsky', 'Davisson', 'Hayes', 'Davisson', 'Davisson', 'Dent', 'Dent', 'Dent', 'Dent', 'Dent', 'Dent', 'Chandler', 'Mark', 'Dent', 'Dent', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Goonan', 'Goonan', 'Goonan', 'Goonan', 'Goonan', 'Goonan', 'Goonan', 'Goonan', 'Goonan', 'Koenig', 'Goonan', 'Grove', 'Grove', 'Chandler', 'Shea', 'Grove', 'Grove', 'Grove', 'McKee', 'Grove', 'Harp', 'Harp', 'Harp', 'Harp', 'Harp', 'Harp', 'Harp', 'Hayes', 'Brody', 'Brody', 'Hayes', 'Hayes', 'Hayes', 'Johnson', 'Hayes', 'Hayes', 'Janson', 'Janson', 'Janson', 'Kolln', 'Janson', 'Janson', 'Janson', 'Lovitt', 'Janson', 'Johnson', 'Johnson', 'Johnson', 'Johnson', 'Johnson', 'Johnson', 'Mark', 'Koenig', 'Koenig', 'Koenig', 'Koenig', 'Koenig', 'Koenig', 'Koenig', 'Koenig', 'Koenig', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Lawyeraau', 'Lawyeraau', 'Lawyeraau', 'Lawyeraau', 'Lawyeraau', 'Messick', 'Lawyeraau', 'Davisson', 'Lawyeraau', 'Chell', 'Chandler', 'Chell', 'Nigam', 'Chell', 'Corn', 'Wilson', 'Chell', 'Chell', 'Lee', 'Lee', 'Lovitt', 'Lee', 'Agresti', 'Lovitt', 'Chell', 'Lovitt', 'Lovitt', 'Lovitt', 'Lovitt', 'Mahlers2nd', 'Mahlers2nd', 'Mahlers2nd', 'Mahlers2nd', 'Mahlers2nd', 'Mahlers2nd', 'Mahlers2nd', 'Mahlers2nd', 'Mahlers2nd', 'Mahlers2nd', 'Mahlers2nd', 'Mahlers2nd', 'Mahlers2nd', 'Mark', 'Mark', 'Mark', 'Mark', 'Mark', 'Mark', 'Mark', 'Mark', 'Messick', 'McKee', 'McKee', 'McKee', 'Comdet', 'Goonan', 'McKee', 'McKee', 'McKee', 'McKee', 'McKee', 'Merritt', 'Merritt', 'Merritt', 'Merritt', 'Merritt', 'Merritt', 'Merritt', 'Merritt', 'Merritt', 'Peterson', 'Merritt', 'Merritt', 'Merritt', 'Messick', 'Messick', 'Messick', 'Messick', 'Lawyeraau', 'Messick', 'Vernon', 'Mitchell', 'Mitchell', 'Mitchell', 'Mitchell', 'Mitchell', 'Mitchell', 'Morrison', 'Morrison', 'Morrison', 'Morrison', 'Morrison', 'Morrison', 'Morrison', 'Morrison', 'Morrison', 'Neal', 'Neal', 'Agresti', 'Neal', 'McKee', 'Neal', 'Neal', 'Neal', 'Neal', 'Nigam', 'Nigam', 'Vernon', 'Nigam', 'Nigam', 'Koenig', 'Nigam', 'Peterson', 'Peterson', 'Peterson', 'Power', 'Power', 'Power', 'Power', 'Power', 'Power', 'Power', 'Power', 'Power', 'Riley', 'Riley', 'Riley', 'Riley', 'Riley', 'Riley', 'Riley', 'Riley', 'Wilson', 'Robert', 'Robert', 'Robert', 'Robert', 'Bukowsky', 'Robert', 'Robert', 'Robert', 'Shea', 'Shea', 'Shea', 'Cutey', 'Shea', 'Shea', 'Shea', 'Lovitt', 'Shea', 'Shea', 'Sherwin', 'Sherwin', 'Sherwin', 'Sherwin', 'Sherwin', 'Sherwin', 'Sherwin', 'Sherwin', 'Sherwin', 'Sherwin', 'Sherwin', 'Sherwin', 'Vision', 'Taylor', 'Taylor', 'Taylor', 'Taylor', 'Taylor', 'Taylor', 'Taylor', 'Taylor', 'Vernon', 'Vernon', 'Vernon', 'Vernon', 'Vernon', 'Vision', 'Vision', 'Goonan', 'Vision', 'Vision', 'Vision', 'Vision', 'Walters', 'Walters', 'Walters', 'Walters', 'Walters', 'Walters', 'Walters', 'Wilson', 'Wilson', 'Wilson', 'Wilson', 'Lovitt', 'Wilson', 'Wilson', 'Wilson', 'Wilson', 'Wilson', 'Wilson', 'Wilson']
{'accuracy_score': 0.8533333333333334, 'balanced_accuracy_score': 0.8588256743256742, 'macro_precision_score': 0.8525350760350761, 'macro_recall_score': 0.8588256743256742, 'macro_f1_score': 0.8469164341618507, 'micro_precision_score': 0.8533333333333334, 'micro_recall_score': 0.8533333333333334, 'micro_f1_score': 0.8533333333333335}
('0', Pipeline(steps=[('0', MinMaxScaler()), ('1', Normalizer()),
                ('2',
                 LinearSVC(C=12.312010906610704, class_weight='balanced',
                           random_state=45139, tol=0.00045861557968446693))]))
('1', Pipeline(steps=[('0', MaxAbsScaler()),
                ('1', SelectFwe(alpha=0.0011105208648875512)),
                ('2', MinMaxScaler()),
                ('3',
                 LinearSVC(C=12.312010906610704, class_weight='balanced',
                           random_state=45139, tol=0.00045861557968446693))]))
('2', Pipeline(steps=[('0', MinMaxScaler()), ('1', VarianceThreshold()),
                ('2', Normalizer()),
                ('3',
                 LinearSVC(C=12.312010906610704, class_weight='balanced',
                           random_state=45139, tol=0.00045861557968446693))]))
('3', Pipeline(steps=[('0', VarianceThreshold()), ('1', MaxAbsScaler()),
                ('2',
                 PassiveAggressiveClassifier(C=0.0006058952122145862,
                                             fit_intercept=False,
                                             random_state=45139))]))
('4', Pipeline(steps=[('0', MinMaxScaler()),
                ('1',
                 PassiveAggressiveClassifier(C=0.00015026240117807917,
                                             loss='squared_hinge',
                                             random_state=45139))]))
('5', Pipeline(steps=[('0', MaxAbsScaler()),
                ('1', SelectFwe(alpha=0.0026709415165681945)),
                ('2', MinMaxScaler()),
                ('3',
                 LinearSVC(C=12.312010906610704, class_weight='balanced',
                           random_state=45139, tol=0.00045861557968446693))]))
('6', Pipeline(steps=[('0', MinMaxScaler()), ('1', VarianceThreshold()),
                ('2', SMOTE(random_state=45139, sampling_strategy='minority')),
                ('3',
                 PassiveAggressiveClassifier(C=0.002221067336872548,
                                             fit_intercept=False,
                                             loss='squared_hinge',
                                             random_state=45139))]))
('7', Pipeline(steps=[('0', Normalizer(norm='l1')),
                ('1',
                 RandomOverSampler(random_state=45139,
                                   sampling_strategy='minority')),
                ('2', MinMaxScaler()),
                ('3',
                 LinearSVC(C=12.312010906610704, class_weight='balanced',
                           random_state=45139, tol=0.00045861557968446693))]))
('8', Pipeline(steps=[('0', MaxAbsScaler()), ('1', StandardScaler(with_mean=False)),
                ('2',
                 LogisticRegression(C=2.8371057126691865, random_state=45139))]))
('9', Pipeline(steps=[('0', MinMaxScaler()), ('1', MaxAbsScaler()),
                ('2', MultinomialNB(alpha=0.07081629936995947))]))
