['-1', '-1', '1', '-1', '1', '-1', '1', '-1', '-1', '1', '-1', '-1', '-1', '-1', '1', '-1', '-1', '-1', '-1', '1', '-1', '1', '-1', '-1', '-1', '-1', '1', '1', '-1', '1', '1', '1', '1', '-1', '-1', '1', '1', '1', '1', '-1', '-1', '-1', '-1', '-1', '-1', '1', '1', '-1', '1', '1', '-1', '1', '-1', '1', '-1', '1', '1', '1', '1', '-1', '-1', '-1', '1', '1', '1', '1', '-1', '1', '1', '-1', '1', '1', '1', '-1', '-1', '1', '1', '1', '1', '1', '1', '-1', '-1', '1', '-1', '1', '-1', '-1', '1', '-1', '1', '-1', '1', '-1', '-1', '-1', '1', '1', '1', '1', '1', '1', '-1', '-1', '1', '1', '1', '1', '1', '1', '1', '1', '-1', '-1', '1', '-1', '-1', '-1', '-1', '-1', '1', '1', '1', '1', '1', '1', '1', '-1', '1', '1', '-1', '1', '-1', '-1', '-1', '-1', '1', '1', '1', '-1', '1', '1', '-1', '-1', '-1', '-1', '-1', '1', '-1', '-1', '1', '-1', '1', '1', '1', '-1', '1', '-1', '-1', '1', '1', '-1', '-1', '-1', '-1', '-1', '1', '-1', '-1', '1', '-1', '1', '-1', '-1', '-1', '-1', '1', '-1', '-1', '1', '1', '-1', '-1', '1', '1', '-1', '1', '1', '-1', '1', '-1', '1', '1', '1', '-1', '1', '1', '-1', '-1', '-1', '-1', '1', '-1', '-1', '-1', '-1', '-1', '-1', '1', '1', '1', '-1', '1', '1', '-1', '-1', '1', '-1', '-1', '-1', '1', '1', '1', '1', '1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '1', '1', '-1', '-1', '1', '-1', '1', '-1', '1', '1', '-1', '-1', '1', '1', '1', '-1', '1', '-1', '-1', '1', '1', '-1', '1', '1', '1', '1', '1', '1', '1', '-1', '1', '1', '1', '-1', '-1', '1', '1', '1', '1', '-1', '1', '1', '-1', '-1', '1', '1', '1', '-1', '-1', '1', '1', '1', '1', '-1', '1', '-1', '-1', '1', '-1', '1', '1', '-1', '1', '-1', '-1', '1', '-1', '-1', '1', '1', '1', '1', '1', '1', '-1', '1', '1', '1', '-1', '1', '-1', '1', '-1', '1', '-1', '-1', '-1', '-1', '1', '1', '1', '-1', '1', '1', '-1', '1', '-1', '1', '-1', '1', '-1', '1', '-1', '1', '-1', '-1', '1', '-1', '-1', '-1', '-1', '1', '-1', '-1', '-1', '1', '-1', '-1', '-1', '1', '1', '1', '-1', '-1', '-1', '-1', '1', '1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '1', '-1', '-1', '-1', '1', '1', '1', '1', '1', '1', '1', '1', '-1', '1', '-1', '1', '1', '-1', '-1', '-1', '1', '-1', '-1', '1', '-1', '-1', '1', '-1', '-1', '1', '1', '-1', '-1', '-1', '-1', '1', '-1', '1', '1', '-1', '-1', '1', '1', '1', '1', '1', '1', '-1', '1', '1', '-1', '1', '-1', '1', '-1', '1', '-1', '1', '1', '1', '1', '1', '-1', '-1', '1', '-1', '-1', '1', '1', '-1', '-1', '-1', '1', '1', '1', '-1', '1', '-1', '-1', '1', '-1', '-1', '1', '1', '1', '-1', '-1', '-1', '1', '1', '-1', '1', '-1', '-1', '1', '-1', '-1', '-1', '-1', '1', '-1', '-1', '1', '-1', '1', '-1', '-1', '-1', '1', '-1', '1', '1', '1', '-1', '-1', '1', '-1', '1', '-1', '1', '-1', '-1', '-1', '1', '1', '-1', '-1', '1', '1', '1', '1', '-1', '-1', '-1', '1', '-1', '-1', '-1', '1', '1', '-1', '-1', '1', '1', '-1', '1', '1', '1', '-1', '1', '1', '-1', '1', '1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '1', '-1', '-1', '1', '-1', '-1', '-1', '-1', '1', '-1', '-1', '-1', '1', '1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '1', '1', '-1', '1', '1', '-1', '1', '1', '-1', '1', '-1', '1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '1', '-1', '-1', '-1', '-1', '1', '1', '-1', '1', '-1', '-1', '-1', '-1', '1', '1', '-1', '1', '-1', '-1', '-1', '1', '-1', '1', '1', '-1', '1', '-1', '-1', '-1', '1', '-1', '-1', '-1', '-1', '1', '-1', '1', '-1', '1', '1', '-1', '-1', '1', '-1', '1', '1', '1', '-1', '1', '1', '-1', '1', '1', '1', '-1', '1', '1', '1', '1', '-1', '-1', '-1', '1', '-1', '1', '-1', '1', '-1', '1', '-1', '-1', '-1', '1', '-1', '1', '1', '-1', '-1', '1', '-1', '1', '-1', '1', '-1', '-1', '1', '1', '1', '-1', '1', '1', '-1', '1', '-1', '1', '1', '1', '1', '-1', '1', '-1', '-1', '-1', '1', '1', '1', '1', '-1', '1', '-1', '1', '-1', '1', '1', '-1', '1', '-1', '-1', '1', '-1', '1', '1', '1', '-1', '-1', '1', '-1', '-1', '1', '1', '-1', '1', '-1', '1', '-1', '1', '1', '-1', '1', '-1', '-1', '-1', '1', '-1', '-1', '-1', '1', '1', '1', '1', '1', '1', '-1', '-1', '-1', '1', '1', '-1', '-1', '-1', '-1', '-1', '1', '1', '-1', '-1', '1', '-1', '1', '1', '1', '-1', '1', '1', '1', '1', '1', '1', '1', '1', '-1', '-1', '1', '-1', '1', '-1', '1', '1', '-1', '-1', '-1', '-1', '-1', '-1', '1', '-1', '1', '1', '1', '1', '1']
{'accuracy_score': 0.8871794871794871, 'balanced_accuracy_score': 0.8872554176309699, 'macro_precision_score': 0.8875, 'macro_recall_score': 0.8872554176309699, 'macro_f1_score': 0.8871676178953736, 'micro_precision_score': 0.8871794871794871, 'micro_recall_score': 0.8871794871794871, 'micro_f1_score': 0.8871794871794871}
('0', Pipeline(steps=[('0',
                 FeatureAgglomeration(affinity='manhattan', linkage='complete',
                                      n_clusters=13)),
                ('1', MaxAbsScaler()), ('2', VarianceThreshold()),
                ('3', KNeighborsClassifier(n_neighbors=4, weights='distance'))]))
('1', Pipeline(steps=[('0',
                 FeatureAgglomeration(affinity='cosine', linkage='average',
                                      n_clusters=11)),
                ('1', MaxAbsScaler()), ('2', VarianceThreshold()),
                ('3', KNeighborsClassifier(n_neighbors=4, weights='distance'))]))
('2', Pipeline(steps=[('0',
                 FeatureAgglomeration(affinity='cosine', linkage='complete',
                                      n_clusters=13)),
                ('1', SimpleImputer()),
                ('2',
                 KNeighborsClassifier(n_neighbors=4, p=1, weights='distance'))]))
('3', Pipeline(steps=[('0', FeatureAgglomeration(n_clusters=18)),
                ('1', SimpleImputer()), ('2', MaxAbsScaler()),
                ('3',
                 KNeighborsClassifier(n_neighbors=8, p=1, weights='distance'))]))
('4', Pipeline(steps=[('0',
                 FeatureAgglomeration(affinity='cosine', linkage='average',
                                      n_clusters=11)),
                ('1', MaxAbsScaler()), ('2', VarianceThreshold()),
                ('3',
                 KNeighborsClassifier(n_neighbors=4, p=1, weights='distance'))]))
('5', Pipeline(steps=[('0',
                 FeatureAgglomeration(affinity='cosine', linkage='complete',
                                      n_clusters=13)),
                ('1', MaxAbsScaler()), ('2', VarianceThreshold()),
                ('3',
                 KNeighborsClassifier(n_neighbors=4, p=1, weights='distance'))]))
('6', Pipeline(steps=[('0',
                 FeatureAgglomeration(affinity='cosine', linkage='average',
                                      n_clusters=12)),
                ('1', MaxAbsScaler()), ('2', VarianceThreshold()),
                ('3',
                 KNeighborsClassifier(n_neighbors=4, p=1, weights='distance'))]))
('7', Pipeline(steps=[('0',
                 FeatureAgglomeration(affinity='cosine', linkage='complete',
                                      n_clusters=13)),
                ('1', SimpleImputer(strategy='median')),
                ('2',
                 KNeighborsClassifier(n_neighbors=4, p=1, weights='distance'))]))
('8', Pipeline(steps=[('0',
                 FeatureAgglomeration(affinity='cosine', linkage='average',
                                      n_clusters=11)),
                ('1', MaxAbsScaler()), ('2', VarianceThreshold()),
                ('3',
                 KNeighborsClassifier(n_neighbors=10, weights='distance'))]))
('9', Pipeline(steps=[('0',
                 FeatureAgglomeration(affinity='cosine', linkage='complete',
                                      n_clusters=13)),
                ('1', MaxAbsScaler()), ('2', VarianceThreshold()),
                ('3', KNeighborsClassifier(n_neighbors=4, weights='distance'))]))
