['1', '-1', '1', '1', '1', '1', '-1', '1', '1', '1', '1', '-1', '1', '1', '1', '1', '1', '1', '1', '1', '-1', '1', '-1', '-1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '-1', '1', '1', '-1', '1', '1', '1', '1', '1', '1', '1', '1', '-1', '1', '-1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '-1', '1', '1', '-1', '1', '1', '1', '-1', '1', '1', '-1', '1', '-1', '-1', '1', '-1', '1', '-1', '1', '-1', '-1', '-1', '-1', '-1', '1', '1', '1', '-1', '1', '1', '-1', '-1', '-1', '-1', '-1', '1', '1', '1', '1', '1', '-1', '-1', '-1', '-1', '-1', '1', '1', '1', '-1', '-1', '-1', '-1', '1', '1', '-1', '1', '-1', '1', '-1', '1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '1', '1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '1', '1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '1', '-1', '-1', '1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '1', '-1', '-1', '-1', '1', '-1', '-1', '-1', '1', '-1', '-1', '-1', '-1', '-1', '1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '1', '1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '1', '-1', '-1', '-1', '-1', '-1', '-1', '1', '-1', '-1', '-1', '-1', '-1', '-1', '1', '-1', '-1', '-1', '1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1']
{'accuracy_score': 0.7872340425531915, 'balanced_accuracy_score': 0.6497097559453218, 'macro_precision_score': 0.5653026219063955, 'macro_recall_score': 0.6497097559453218, 'macro_f1_score': 0.5701638864501024, 'micro_precision_score': 0.7872340425531915, 'micro_recall_score': 0.7872340425531915, 'micro_f1_score': 0.7872340425531915}
('0', Pipeline(steps=[('0', SimpleImputer()),
                ('1',
                 RandomUnderSampler(random_state=2,
                                    sampling_strategy='not minority')),
                ('2',
                 RandomForestClassifier(class_weight='balanced',
                                        criterion='entropy',
                                        max_features='sqrt',
                                        min_samples_leaf=10,
                                        min_samples_split=3, n_estimators=80,
                                        random_state=2))]))
('1', Pipeline(steps=[('0', SimpleImputer()),
                ('1',
                 DecisionTreeClassifier(class_weight='balanced',
                                        max_depth=1.290600954287235,
                                        max_features=0.34866600228542766,
                                        min_samples_leaf=4,
                                        min_samples_split=10,
                                        random_state=2))]))
('2', Pipeline(steps=[('0', MaxAbsScaler()), ('1', StandardScaler()),
                ('2', SimpleImputer()),
                ('3',
                 DecisionTreeClassifier(class_weight='balanced',
                                        criterion='entropy',
                                        max_depth=1.290600954287235,
                                        max_features=0.34866600228542766,
                                        min_samples_leaf=18,
                                        min_samples_split=10,
                                        random_state=2))]))
('3', Pipeline(steps=[('0', MaxAbsScaler()), ('1', StandardScaler()),
                ('2', SimpleImputer()),
                ('3',
                 DecisionTreeClassifier(class_weight='balanced',
                                        criterion='entropy',
                                        max_depth=1.290600954287235,
                                        max_features=0.34866600228542766,
                                        min_samples_leaf=3,
                                        min_samples_split=10,
                                        random_state=2))]))
('4', Pipeline(steps=[('0', MinMaxScaler()), ('1', VarianceThreshold()),
                ('2', SimpleImputer(strategy='median')),
                ('3',
                 SGDClassifier(alpha=0.0002670043614261969, average=True,
                               class_weight='balanced',
                               epsilon=0.07860154466924438,
                               eta0=1.7027702307281237e-05,
                               l1_ratio=7.073331042979317e-06,
                               loss='perceptron', power_t=0.8180698424427765,
                               random_state=2, tol=0.00011544649525155149))]))
('5', Pipeline(steps=[('0', MaxAbsScaler()),
                ('1', StandardScaler(with_mean=False, with_std=False)),
                ('2', SimpleImputer(strategy='most_frequent')),
                ('3',
                 SGDClassifier(alpha=0.0002906091494388371, average=True,
                               class_weight='balanced',
                               epsilon=0.018881979305562232,
                               eta0=1.7027702307281237e-05,
                               l1_ratio=1.37705655725671e-06,
                               power_t=0.26633990736147833, random_state=2,
                               tol=0.033613704339593584))]))
('6', Pipeline(steps=[('0', KNNImputer(n_neighbors=3)),
                ('1', SMOTE(random_state=2, sampling_strategy='minority')),
                ('2',
                 AdaBoostClassifier(algorithm='SAMME',
                                    learning_rate=0.12487102538827236,
                                    n_estimators=87, random_state=2))]))
('7', Pipeline(steps=[('0', VarianceThreshold()), ('1', MaxAbsScaler()),
                ('2', SimpleImputer()),
                ('3',
                 SGDClassifier(alpha=0.0002906091494388371, average=True,
                               class_weight='balanced',
                               epsilon=0.0005072166800749339,
                               eta0=1.5994877733790453e-07,
                               l1_ratio=0.0033730887754960925, loss='log',
                               power_t=0.15177331415078973, random_state=2,
                               tol=0.0011340218934289604))]))
('8', Pipeline(steps=[('0', MaxAbsScaler()), ('1', StandardScaler()),
                ('2', SimpleImputer(strategy='most_frequent')),
                ('3',
                 SGDClassifier(alpha=7.502257434096059e-07, average=True,
                               class_weight='balanced',
                               epsilon=0.07860154466924438,
                               eta0=1.7027702307281237e-05,
                               l1_ratio=1.9890622400740728e-08,
                               loss='squared_hinge', power_t=0.6309991679378882,
                               random_state=2, tol=0.0001491621567423311))]))
('9', Pipeline(steps=[('0', SimpleImputer(strategy='most_frequent')),
                ('1',
                 RandomUnderSampler(random_state=2,
                                    sampling_strategy='not minority')),
                ('2',
                 RandomForestClassifier(class_weight='balanced',
                                        criterion='entropy',
                                        max_features='sqrt',
                                        min_samples_leaf=10,
                                        min_samples_split=16, n_estimators=78,
                                        random_state=2))]))
