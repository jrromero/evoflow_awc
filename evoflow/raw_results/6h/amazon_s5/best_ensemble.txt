['Agresti', 'Agresti', 'Agresti', 'Agresti', 'Agresti', 'Agresti', 'Ashbacher', 'Ashbacher', 'Ashbacher', 'Ashbacher', 'Ashbacher', 'Cholette', 'Ashbacher', 'Power', 'Ashbacher', 'Ashbacher', 'Ashbacher', 'Riley', 'Ashbacher', 'Vision', 'Lee', 'Auken', 'Auken', 'Auken', 'Auken', 'Auken', 'Chachra', 'Auken', 'Auken', 'Auken', 'Blankenship', 'Blankenship', 'Blankenship', 'Blankenship', 'Blankenship', 'Blankenship', 'Brody', 'Brody', 'Bukowsky', 'Brody', 'Brody', 'Brody', 'Brody', 'Morrison', 'Brown', 'Mitchell', 'Brown', 'Brown', 'Brown', 'Brown', 'Brown', 'Brown', 'Brown', 'Bukowsky', 'Bukowsky', 'Bukowsky', 'Bukowsky', 'Bukowsky', 'Vernon', 'Bukowsky', 'Bukowsky', 'Bukowsky', 'Bukowsky', 'Vernon', 'Bukowsky', 'Calvinnme', 'Calvinnme', 'Calvinnme', 'Calvinnme', 'Koenig', 'Calvinnme', 'Calvinnme', 'CFH', 'CFH', 'CFH', 'CFH', 'Dent', 'CFH', 'CFH', 'CFH', 'CFH', 'CFH', 'CFH', 'Chachra', 'Chachra', 'Chachra', 'Chachra', 'Chachra', 'Chachra', 'Chachra', 'Chachra', 'Chachra', 'Chandler', 'Chandler', 'Chandler', 'Chandler', 'Chandler', 'Chandler', 'Chandler', 'Chell', 'Chell', 'Chell', 'Auken', 'Chell', 'Walters', 'Chell', 'Chell', 'Chell', 'Chell', 'CFH', 'Cholette', 'Cholette', 'Cholette', 'Cholette', 'Cholette', 'Cholette', 'Cholette', 'Comdet', 'Comdet', 'Comdet', 'Comdet', 'Comdet', 'Comdet', 'Chandler', 'Comdet', 'Agresti', 'Comdet', 'Corn', 'Corn', 'Corn', 'Corn', 'Goonan', 'Goonan', 'Corn', 'Grove', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Lovitt', 'Bukowsky', 'Davisson', 'Vision', 'Davisson', 'Davisson', 'Dent', 'Dent', 'Dent', 'Dent', 'Dent', 'Dent', 'Chandler', 'Mark', 'Dent', 'Dent', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Goonan', 'Goonan', 'Goonan', 'Goonan', 'Goonan', 'Goonan', 'Goonan', 'Goonan', 'Goonan', 'Koenig', 'Goonan', 'Grove', 'Grove', 'Chandler', 'Shea', 'Grove', 'Grove', 'Grove', 'McKee', 'Grove', 'Harp', 'Harp', 'Harp', 'Harp', 'Harp', 'Harp', 'Harp', 'Hayes', 'Brody', 'Brody', 'Hayes', 'Hayes', 'Hayes', 'Johnson', 'Hayes', 'Hayes', 'Janson', 'Janson', 'Janson', 'Kolln', 'Janson', 'Janson', 'Janson', 'Lovitt', 'Janson', 'Johnson', 'Johnson', 'Johnson', 'Johnson', 'Johnson', 'Johnson', 'Mark', 'Kolln', 'Koenig', 'Koenig', 'Koenig', 'Koenig', 'Koenig', 'Koenig', 'Koenig', 'Koenig', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Lawyeraau', 'Lawyeraau', 'Lawyeraau', 'Lawyeraau', 'Lawyeraau', 'Messick', 'Lawyeraau', 'Davisson', 'Peterson', 'Chell', 'Chandler', 'Chell', 'Lee', 'Chell', 'Bukowsky', 'Wilson', 'Chell', 'Chell', 'Lee', 'Lee', 'Lovitt', 'Lee', 'Chell', 'Lovitt', 'Chell', 'Lovitt', 'Lovitt', 'Lovitt', 'Lovitt', 'Goonan', 'Mahlers2nd', 'Mahlers2nd', 'Comdet', 'CFH', 'Davisson', 'Mahlers2nd', 'Mahlers2nd', 'Mahlers2nd', 'Mahlers2nd', 'Riley', 'Mahlers2nd', 'Nigam', 'Mark', 'Mark', 'Mark', 'Mark', 'Mark', 'Mark', 'Mark', 'Mark', 'Messick', 'McKee', 'McKee', 'McKee', 'Comdet', 'Goonan', 'McKee', 'McKee', 'McKee', 'McKee', 'McKee', 'Merritt', 'Merritt', 'Merritt', 'Merritt', 'Merritt', 'Merritt', 'Merritt', 'Merritt', 'Merritt', 'Peterson', 'Merritt', 'Merritt', 'Merritt', 'Messick', 'Messick', 'Messick', 'Messick', 'Lawyeraau', 'Messick', 'Vernon', 'Mitchell', 'Mitchell', 'Mitchell', 'Mitchell', 'Mitchell', 'Mitchell', 'Morrison', 'Morrison', 'Morrison', 'Morrison', 'Morrison', 'Morrison', 'Morrison', 'Morrison', 'Morrison', 'Neal', 'Neal', 'Agresti', 'Neal', 'Goonan', 'Neal', 'Neal', 'Neal', 'Neal', 'Nigam', 'Nigam', 'Vernon', 'Nigam', 'Nigam', 'Koenig', 'Nigam', 'Peterson', 'Peterson', 'Peterson', 'Power', 'Power', 'Power', 'Power', 'Power', 'Power', 'Power', 'Power', 'Power', 'Riley', 'Riley', 'Riley', 'Riley', 'Riley', 'Riley', 'Riley', 'Riley', 'Wilson', 'Robert', 'Robert', 'Robert', 'Robert', 'Bukowsky', 'Robert', 'Robert', 'Robert', 'Shea', 'Shea', 'Shea', 'Cutey', 'Nigam', 'Shea', 'Shea', 'Lovitt', 'Shea', 'Shea', 'Sherwin', 'Sherwin', 'Sherwin', 'Sherwin', 'Sherwin', 'Sherwin', 'Sherwin', 'Sherwin', 'Sherwin', 'Sherwin', 'Sherwin', 'Sherwin', 'Vision', 'Taylor', 'Taylor', 'Taylor', 'Taylor', 'Taylor', 'Taylor', 'Taylor', 'Taylor', 'Vernon', 'Vernon', 'Vernon', 'Vernon', 'Vernon', 'Vision', 'Vision', 'Goonan', 'Vision', 'Vision', 'Vision', 'Vision', 'Walters', 'Walters', 'Walters', 'Walters', 'Walters', 'Walters', 'Walters', 'Wilson', 'Wilson', 'Wilson', 'Wilson', 'Lovitt', 'Wilson', 'Wilson', 'Wilson', 'Wilson', 'Wilson', 'Wilson', 'Wilson']
{'accuracy_score': 0.8333333333333334, 'balanced_accuracy_score': 0.8435241980241979, 'macro_precision_score': 0.8411201021201022, 'macro_recall_score': 0.8435241980241979, 'macro_f1_score': 0.8298219089456133, 'micro_precision_score': 0.8333333333333334, 'micro_recall_score': 0.8333333333333334, 'micro_f1_score': 0.8333333333333334}
('0', Pipeline(steps=[('0', MaxAbsScaler()),
                ('1', SelectFwe(alpha=0.0014467295586152388)),
                ('2',
                 PassiveAggressiveClassifier(C=0.0004035100732901279,
                                             fit_intercept=False,
                                             loss='squared_hinge',
                                             random_state=5))]))
('1', Pipeline(steps=[('0', StandardScaler(with_mean=False)),
                ('1',
                 PassiveAggressiveClassifier(C=8.234105900303557,
                                             fit_intercept=False,
                                             random_state=5))]))
('2', Pipeline(steps=[('0', MinMaxScaler()),
                ('1',
                 LinearSVC(C=0.31623579930736995, class_weight='balanced',
                           loss='hinge', random_state=5,
                           tol=8.121072408059201e-05))]))
('3', Pipeline(steps=[('0', StandardScaler()),
                ('1',
                 PassiveAggressiveClassifier(C=8.234105900303557,
                                             fit_intercept=False,
                                             random_state=5))]))
('4', Pipeline(steps=[('0', MaxAbsScaler()), ('1', VarianceThreshold()),
                ('2',
                 PassiveAggressiveClassifier(C=0.2970047240523772,
                                             fit_intercept=False,
                                             loss='squared_hinge',
                                             random_state=5))]))
('5', Pipeline(steps=[('0', MaxAbsScaler()),
                ('1',
                 PassiveAggressiveClassifier(C=0.0091266470937259,
                                             loss='squared_hinge',
                                             random_state=5))]))
('6', Pipeline(steps=[('0', VarianceThreshold()), ('1', MinMaxScaler()),
                ('2',
                 PassiveAggressiveClassifier(C=0.032367838701245995,
                                             fit_intercept=False,
                                             random_state=5))]))
('7', Pipeline(steps=[('0', VarianceThreshold()), ('1', MinMaxScaler()),
                ('2',
                 LinearSVC(C=10.56455301589009, class_weight='balanced',
                           random_state=5, tol=1.718978020561684e-05))]))
('8', Pipeline(steps=[('0',
                 SMOTE(k_neighbors=4, random_state=5,
                       sampling_strategy='not majority')),
                ('1', MaxAbsScaler()),
                ('2',
                 MLPClassifier(activation='tanh', alpha=0.07431595223972133,
                               learning_rate_init=0.4546487208841888,
                               random_state=5, solver='sgd'))]))
('9', Pipeline(steps=[('0', MaxAbsScaler()),
                ('1',
                 SMOTE(k_neighbors=3, random_state=5,
                       sampling_strategy='not majority')),
                ('2',
                 MLPClassifier(activation='logistic',
                               alpha=0.0021786038611583958,
                               learning_rate_init=0.0041299973723725025,
                               random_state=5))]))
