['POX', 'NUC', 'CYT', 'CYT', 'CYT', 'EXC', 'CYT', 'CYT', 'EXC', 'ME1', 'ME1', 'EXC', 'MIT', 'ME1', 'CYT', 'NUC', 'CYT', 'MIT', 'MIT', 'NUC', 'ME3', 'CYT', 'CYT', 'ME1', 'MIT', 'MIT', 'MIT', 'POX', 'ME3', 'MIT', 'ME1', 'ME3', 'CYT', 'CYT', 'CYT', 'POX', 'NUC', 'MIT', 'CYT', 'MIT', 'ME3', 'NUC', 'NUC', 'CYT', 'NUC', 'CYT', 'MIT', 'NUC', 'CYT', 'NUC', 'CYT', 'NUC', 'NUC', 'MIT', 'CYT', 'MIT', 'POX', 'NUC', 'CYT', 'ME1', 'ME1', 'MIT', 'MIT', 'ME3', 'MIT', 'MIT', 'MIT', 'EXC', 'CYT', 'NUC', 'EXC', 'VAC', 'CYT', 'ME2', 'CYT', 'NUC', 'EXC', 'EXC', 'CYT', 'CYT', 'CYT', 'NUC', 'ME3', 'POX', 'NUC', 'NUC', 'CYT', 'NUC', 'MIT', 'NUC', 'ME3', 'NUC', 'ME3', 'CYT', 'ME3', 'NUC', 'CYT', 'ME2', 'CYT', 'CYT', 'ME3', 'ME3', 'NUC', 'ME1', 'ERL', 'NUC', 'CYT', 'ME3', 'ME3', 'POX', 'ME3', 'ME1', 'ME1', 'CYT', 'ME3', 'ME3', 'ME1', 'NUC', 'NUC', 'NUC', 'MIT', 'ME3', 'MIT', 'NUC', 'ME3', 'NUC', 'NUC', 'CYT', 'ME3', 'CYT', 'CYT', 'NUC', 'ME2', 'ME2', 'NUC', 'NUC', 'MIT', 'MIT', 'CYT', 'CYT', 'NUC', 'MIT', 'NUC', 'CYT', 'CYT', 'CYT', 'MIT', 'MIT', 'ME3', 'NUC', 'CYT', 'NUC', 'MIT', 'MIT', 'MIT', 'NUC', 'CYT', 'ME3', 'ME3', 'CYT', 'MIT', 'MIT', 'CYT', 'MIT', 'CYT', 'NUC', 'ME1', 'ME3', 'NUC', 'MIT', 'ME1', 'NUC', 'ERL', 'MIT', 'ME3', 'ME2', 'ME2', 'CYT', 'NUC', 'NUC', 'ME3', 'ME3', 'ME2', 'CYT', 'NUC', 'NUC', 'ME3', 'ME2', 'CYT', 'MIT', 'MIT', 'MIT', 'MIT', 'ME3', 'CYT', 'MIT', 'ME3', 'NUC', 'NUC', 'MIT', 'CYT', 'NUC', 'NUC', 'NUC', 'MIT', 'MIT', 'MIT', 'MIT', 'CYT', 'CYT', 'MIT', 'MIT', 'MIT', 'ME3', 'MIT', 'NUC', 'CYT', 'MIT', 'CYT', 'MIT', 'ME3', 'NUC', 'ME3', 'EXC', 'ME3', 'MIT', 'NUC', 'ME3', 'CYT', 'ME2', 'NUC', 'CYT', 'EXC', 'NUC', 'ME2', 'ME3', 'ME1', 'CYT', 'NUC', 'CYT', 'MIT', 'CYT', 'CYT', 'CYT', 'NUC', 'ME3', 'CYT', 'POX', 'VAC', 'MIT', 'NUC', 'POX', 'MIT', 'CYT', 'EXC', 'CYT', 'CYT', 'ME3', 'MIT', 'ME1', 'ME2', 'ME3', 'NUC', 'NUC', 'CYT', 'CYT', 'ME3', 'CYT', 'ME2', 'MIT', 'CYT', 'NUC', 'CYT', 'MIT', 'NUC', 'CYT', 'NUC', 'NUC', 'CYT', 'MIT', 'MIT', 'MIT', 'NUC', 'CYT', 'ME3', 'CYT', 'ME2', 'CYT', 'NUC', 'CYT', 'MIT', 'NUC', 'NUC', 'MIT', 'NUC', 'NUC', 'MIT', 'CYT', 'NUC', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'NUC', 'ME3', 'CYT', 'POX', 'NUC', 'NUC', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'MIT', 'CYT', 'MIT', 'NUC', 'MIT', 'CYT', 'CYT', 'CYT', 'MIT', 'MIT', 'CYT', 'MIT', 'MIT', 'MIT', 'EXC', 'CYT', 'NUC', 'CYT', 'CYT', 'CYT', 'CYT', 'ME3', 'ME3', 'CYT', 'ME1', 'NUC', 'MIT', 'MIT', 'NUC', 'CYT', 'CYT', 'ME3', 'CYT', 'NUC', 'VAC', 'ME3', 'ME3', 'NUC', 'MIT', 'ME3', 'CYT', 'CYT', 'ME3', 'MIT', 'NUC', 'NUC', 'CYT', 'CYT', 'CYT', 'CYT', 'NUC', 'NUC', 'CYT', 'MIT', 'NUC', 'NUC', 'ME3', 'ME3', 'EXC', 'ME3', 'ME1', 'CYT', 'MIT', 'NUC', 'NUC', 'EXC', 'NUC', 'CYT', 'CYT', 'NUC', 'CYT', 'CYT', 'CYT', 'CYT', 'NUC', 'NUC', 'NUC', 'CYT', 'MIT', 'NUC', 'NUC', 'NUC', 'NUC', 'CYT', 'ME1', 'ME1', 'CYT', 'NUC', 'CYT', 'CYT', 'NUC', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'ME3', 'CYT', 'CYT', 'CYT', 'ME1', 'CYT', 'ME1', 'NUC', 'ME1', 'CYT', 'ME3', 'POX', 'ME1', 'ME3', 'ME3', 'ME3', 'ME3', 'ME3', 'ME3', 'MIT', 'NUC', 'ME3', 'MIT', 'NUC', 'CYT', 'ME3', 'NUC', 'CYT', 'ME2']
{'accuracy_score': 0.6022471910112359, 'balanced_accuracy_score': 0.6176707373291928, 'macro_precision_score': 0.532178699719694, 'macro_recall_score': 0.5559036635962735, 'macro_f1_score': 0.5297533620577098, 'micro_precision_score': 0.6022471910112359, 'micro_recall_score': 0.6022471910112359, 'micro_f1_score': 0.6022471910112359}
('0', Pipeline(steps=[('0', SimpleImputer(strategy='median')), ('1', MaxAbsScaler()),
                ('2', SelectPercentile(percentile=66.14567701904751)),
                ('3',
                 ExtraTreesClassifier(bootstrap=True, class_weight='balanced',
                                      max_features='sqrt', min_samples_split=17,
                                      n_estimators=38, random_state=7))]))
('1', Pipeline(steps=[('0',
                 FastICA(algorithm='deflation', fun='exp', n_components=51,
                         random_state=7)),
                ('1', MinMaxScaler()),
                ('2', SimpleImputer(strategy='most_frequent')),
                ('3',
                 ExtraTreesClassifier(bootstrap=True,
                                      class_weight='balanced_subsample',
                                      max_features='sqrt', min_samples_split=14,
                                      n_estimators=92, random_state=7))]))
('2', Pipeline(steps=[('0',
                 FastICA(algorithm='deflation', fun='exp', n_components=51,
                         random_state=7)),
                ('1', MinMaxScaler()),
                ('2', SimpleImputer(strategy='most_frequent')),
                ('3',
                 ExtraTreesClassifier(bootstrap=True,
                                      class_weight='balanced_subsample',
                                      criterion='entropy', max_features='log2',
                                      min_samples_split=14, n_estimators=92,
                                      random_state=7))]))
('3', Pipeline(steps=[('0',
                 RandomOverSampler(random_state=7,
                                   sampling_strategy='not majority')),
                ('1', MinMaxScaler()), ('2', StandardScaler(with_mean=False)),
                ('3',
                 RandomForestClassifier(class_weight='balanced',
                                        max_features='sqrt',
                                        min_samples_leaf=18,
                                        min_samples_split=16, n_estimators=74,
                                        random_state=7))]))
('4', Pipeline(steps=[('0', RobustScaler(with_scaling=False)), ('1', MinMaxScaler()),
                ('2', VarianceThreshold()),
                ('3',
                 ExtraTreesClassifier(class_weight='balanced',
                                      max_features='sqrt', min_samples_split=11,
                                      n_estimators=38, random_state=7))]))
('5', Pipeline(steps=[('0', VarianceThreshold()), ('1', MinMaxScaler()),
                ('2',
                 ExtraTreesClassifier(class_weight='balanced_subsample',
                                      max_features='log2', min_samples_leaf=3,
                                      min_samples_split=20, random_state=7))]))
('6', Pipeline(steps=[('0', MinMaxScaler()), ('1', VarianceThreshold()),
                ('2',
                 ExtraTreesClassifier(bootstrap=True,
                                      class_weight='balanced_subsample',
                                      criterion='entropy', max_features='log2',
                                      min_samples_split=17, n_estimators=83,
                                      random_state=7))]))
('7', Pipeline(steps=[('0', KNNImputer(n_neighbors=8, weights='distance')),
                ('1', MinMaxScaler()),
                ('2', SimpleImputer(strategy='most_frequent')),
                ('3',
                 ExtraTreesClassifier(class_weight='balanced',
                                      criterion='entropy', max_features='sqrt',
                                      min_samples_split=17, n_estimators=14,
                                      random_state=7))]))
('8', Pipeline(steps=[('0', VarianceThreshold()), ('1', MinMaxScaler()),
                ('2',
                 ExtraTreesClassifier(class_weight='balanced',
                                      max_features='log2', min_samples_leaf=3,
                                      min_samples_split=20, random_state=7))]))
('9', Pipeline(steps=[('0', VarianceThreshold()),
                ('1', SelectPercentile(percentile=79.63609321389183)),
                ('2', MinMaxScaler()), ('3', MaxAbsScaler()),
                ('4',
                 ExtraTreesClassifier(bootstrap=True,
                                      class_weight='balanced_subsample',
                                      max_features='log2', min_samples_leaf=2,
                                      min_samples_split=17, n_estimators=79,
                                      random_state=7))]))
