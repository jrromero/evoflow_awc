
{'accuracy_score': 0.8063829787234043, 'balanced_accuracy_score': 0.6230260283378066, 'macro_precision_score': 0.5607883049592894, 'macro_recall_score': 0.6230260283378066, 'macro_f1_score': 0.5684113865932048, 'micro_precision_score': 0.8063829787234043, 'micro_recall_score': 0.8063829787234043, 'micro_f1_score': 0.8063829787234043}
('0', Pipeline(steps=[('0', KNNImputer(n_neighbors=10)),
                ('1', SelectPercentile(percentile=95.10175409144018)),
                ('2', MinMaxScaler()),
                ('3',
                 DecisionTreeClassifier(class_weight='balanced',
                                        max_depth=1.2415455802469149,
                                        max_features=0.9311139802150161,
                                        min_samples_leaf=17,
                                        min_samples_split=8, random_state=2))]))
('1', Pipeline(steps=[('0', KNNImputer(n_neighbors=9, weights='distance')),
                ('1', SelectPercentile(percentile=95.10175409144018)),
                ('2', MinMaxScaler()),
                ('3',
                 DecisionTreeClassifier(class_weight='balanced',
                                        max_depth=1.2415455802469149,
                                        max_features=0.9311139802150161,
                                        min_samples_leaf=17,
                                        min_samples_split=8, random_state=2))]))
('2', Pipeline(steps=[('0', KNNImputer(n_neighbors=10)), ('1', MaxAbsScaler()),
                ('2', MinMaxScaler()),
                ('3',
                 DecisionTreeClassifier(class_weight='balanced',
                                        max_depth=1.2415455802469149,
                                        max_features=0.9311139802150161,
                                        min_samples_leaf=17,
                                        min_samples_split=8, random_state=2))]))
('3', Pipeline(steps=[('0', KNNImputer(n_neighbors=10)),
                ('1', SimpleImputer(strategy='median')), ('2', MinMaxScaler()),
                ('3',
                 DecisionTreeClassifier(class_weight='balanced',
                                        max_depth=1.2415455802469149,
                                        max_features=0.9311139802150161,
                                        min_samples_leaf=17,
                                        min_samples_split=8, random_state=2))]))
('4', Pipeline(steps=[('0', KNNImputer(n_neighbors=10)), ('1', MaxAbsScaler()),
                ('2', MinMaxScaler()),
                ('3', GaussianNB(var_smoothing=0.0004885961096694766))]))
('5', Pipeline(steps=[('0', KNNImputer(n_neighbors=9, weights='distance')),
                ('1',
                 RandomOverSampler(random_state=2,
                                   sampling_strategy='minority')),
                ('2', MinMaxScaler()),
                ('3',
                 DecisionTreeClassifier(class_weight='balanced',
                                        max_depth=1.2415455802469149,
                                        max_features=0.9311139802150161,
                                        min_samples_leaf=17,
                                        min_samples_split=8, random_state=2))]))
('6', Pipeline(steps=[('0', KNNImputer(n_neighbors=10)),
                ('1',
                 RandomOverSampler(random_state=2,
                                   sampling_strategy='minority')),
                ('2',
                 AdaBoostClassifier(algorithm='SAMME',
                                    learning_rate=0.24023357529468112,
                                    n_estimators=61, random_state=2))]))
('7', Pipeline(steps=[('0', MinMaxScaler()), ('1', SimpleImputer()),
                ('2',
                 SMOTETomek(random_state=2, sampling_strategy='not majority')),
                ('3',
                 KNeighborsClassifier(n_neighbors=1, p=1, weights='distance'))]))
('8', Pipeline(steps=[('0', KNNImputer(n_neighbors=2, weights='distance')),
                ('1', SimpleImputer(strategy='median')),
                ('2', GaussianNB(var_smoothing=2.7984636670108502e-08))]))
('9', Pipeline(steps=[('0', KNNImputer()), ('1', VarianceThreshold()),
                ('2',
                 BernoulliNB(alpha=0.017868448393304683, fit_prior=False))]))
