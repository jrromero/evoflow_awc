['1', '-1', '1', '1', '1', '1', '-1', '1', '1', '1', '1', '-1', '1', '1', '-1', '1', '1', '1', '1', '1', '-1', '1', '-1', '-1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '-1', '1', '1', '-1', '-1', '1', '1', '-1', '1', '-1', '1', '-1', '-1', '-1', '-1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '-1', '-1', '1', '-1', '-1', '1', '1', '-1', '1', '1', '-1', '1', '-1', '-1', '1', '-1', '1', '-1', '1', '-1', '1', '-1', '-1', '-1', '1', '1', '-1', '-1', '1', '1', '-1', '-1', '-1', '-1', '-1', '1', '1', '-1', '1', '1', '-1', '-1', '-1', '-1', '-1', '1', '1', '1', '-1', '-1', '-1', '-1', '1', '-1', '-1', '1', '-1', '1', '-1', '1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '1', '1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '1', '-1', '-1', '-1', '1', '-1', '-1', '-1', '1', '-1', '1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '1', '1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '1', '-1', '-1', '-1', '-1', '-1', '-1', '1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1']
{'accuracy_score': 0.8063829787234043, 'balanced_accuracy_score': 0.6230260283378066, 'macro_precision_score': 0.5607883049592894, 'macro_recall_score': 0.6230260283378066, 'macro_f1_score': 0.5684113865932048, 'micro_precision_score': 0.8063829787234043, 'micro_recall_score': 0.8063829787234043, 'micro_f1_score': 0.8063829787234043}
('0', Pipeline(steps=[('0', SimpleImputer(strategy='median')),
                ('1',
                 RandomOverSampler(random_state=1,
                                   sampling_strategy='not majority')),
                ('2', MaxAbsScaler()),
                ('3',
                 AdaBoostClassifier(algorithm='SAMME',
                                    learning_rate=0.07007596985019938,
                                    n_estimators=89, random_state=1))]))
('1', Pipeline(steps=[('0', SimpleImputer(strategy='most_frequent')),
                ('1',
                 DecisionTreeClassifier(class_weight='balanced',
                                        max_depth=1.6513829780541578,
                                        max_features=0.40977133870234617,
                                        min_samples_leaf=12,
                                        min_samples_split=7, random_state=1))]))
('2', Pipeline(steps=[('0', SimpleImputer(strategy='median')),
                ('1',
                 RandomOverSampler(random_state=1,
                                   sampling_strategy='not majority')),
                ('2', VarianceThreshold()),
                ('3',
                 AdaBoostClassifier(algorithm='SAMME',
                                    learning_rate=0.07007596985019938,
                                    n_estimators=89, random_state=1))]))
('3', Pipeline(steps=[('0', SimpleImputer(strategy='median')),
                ('1', VarianceThreshold()), ('2', MaxAbsScaler()),
                ('3',
                 DecisionTreeClassifier(class_weight='balanced',
                                        max_depth=1.6513829780541578,
                                        max_features=0.40977133870234617,
                                        min_samples_leaf=12,
                                        min_samples_split=7, random_state=1))]))
('4', Pipeline(steps=[('0', VarianceThreshold()),
                ('1',
                 RandomOverSampler(random_state=1,
                                   sampling_strategy='not majority')),
                ('2', SimpleImputer(strategy='most_frequent')),
                ('3',
                 DecisionTreeClassifier(class_weight='balanced',
                                        max_depth=1.6513829780541578,
                                        max_features=0.40977133870234617,
                                        min_samples_leaf=12,
                                        min_samples_split=7, random_state=1))]))
('5', Pipeline(steps=[('0', SimpleImputer(strategy='median')),
                ('1',
                 RandomOverSampler(random_state=1,
                                   sampling_strategy='minority')),
                ('2', MaxAbsScaler()),
                ('3',
                 AdaBoostClassifier(algorithm='SAMME',
                                    learning_rate=0.07007596985019938,
                                    n_estimators=89, random_state=1))]))
('6', Pipeline(steps=[('0', SimpleImputer()),
                ('1',
                 RandomOverSampler(random_state=1,
                                   sampling_strategy='not majority')),
                ('2', VarianceThreshold()),
                ('3',
                 DecisionTreeClassifier(class_weight='balanced',
                                        max_depth=1.6513829780541578,
                                        max_features=0.40977133870234617,
                                        min_samples_leaf=12,
                                        min_samples_split=7, random_state=1))]))
('7', Pipeline(steps=[('0', SimpleImputer()),
                ('1',
                 RandomOverSampler(random_state=1,
                                   sampling_strategy='not majority')),
                ('2', VarianceThreshold()),
                ('3',
                 DecisionTreeClassifier(class_weight='balanced',
                                        max_depth=1.2171018142169556,
                                        max_features=0.2524700620080914,
                                        min_samples_leaf=2,
                                        min_samples_split=13,
                                        random_state=1))]))
('8', Pipeline(steps=[('0', SimpleImputer(strategy='median')),
                ('1',
                 RandomOverSampler(random_state=1,
                                   sampling_strategy='not majority')),
                ('2', VarianceThreshold()),
                ('3',
                 DecisionTreeClassifier(class_weight='balanced',
                                        max_depth=1.6513829780541578,
                                        max_features=0.40977133870234617,
                                        min_samples_leaf=12,
                                        min_samples_split=7, random_state=1))]))
('9', Pipeline(steps=[('0', SimpleImputer()),
                ('1',
                 RandomOverSampler(random_state=1,
                                   sampling_strategy='not majority')),
                ('2', MaxAbsScaler()),
                ('3',
                 QuadraticDiscriminantAnalysis(reg_param=0.08961991246578294))]))
