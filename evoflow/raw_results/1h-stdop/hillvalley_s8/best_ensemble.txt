
{'accuracy_score': 1.0, 'balanced_accuracy_score': 1.0, 'macro_precision_score': 1.0, 'macro_recall_score': 1.0, 'macro_f1_score': 1.0, 'micro_precision_score': 1.0, 'micro_recall_score': 1.0, 'micro_f1_score': 1.0}
('0', Pipeline(steps=[('0',
                 RandomUnderSampler(random_state=8,
                                    sampling_strategy='not minority')),
                ('1', Normalizer(norm='l1')),
                ('2', KNeighborsClassifier(n_neighbors=1, weights='distance'))]))
('1', Pipeline(steps=[('0', MinMaxScaler()), ('1', Normalizer(norm='l1')),
                ('2', KNeighborsClassifier(n_neighbors=1, weights='distance'))]))
('2', Pipeline(steps=[('0', MinMaxScaler()), ('1', Normalizer(norm='l1')),
                ('2', KNNImputer(n_neighbors=3)),
                ('3', KNeighborsClassifier(n_neighbors=10, p=1))]))
('3', Pipeline(steps=[('0',
                 FeatureAgglomeration(affinity='manhattan', linkage='average',
                                      n_clusters=14)),
                ('1', Normalizer(norm='l1')),
                ('2', KNeighborsClassifier(n_neighbors=1, weights='distance'))]))
('4', Pipeline(steps=[('0',
                 SMOTE(k_neighbors=3, random_state=8,
                       sampling_strategy='minority')),
                ('1', Normalizer(norm='l1')),
                ('2', KNeighborsClassifier(n_neighbors=1, weights='distance'))]))
('5', Pipeline(steps=[('0', MinMaxScaler()), ('1', Normalizer(norm='l1')),
                ('2', KNeighborsClassifier(n_neighbors=14))]))
('6', Pipeline(steps=[('0', VarianceThreshold()), ('1', Normalizer(norm='l1')),
                ('2', KNeighborsClassifier(n_neighbors=1, weights='distance'))]))
('7', Pipeline(steps=[('0', MaxAbsScaler()), ('1', VarianceThreshold()),
                ('2', Normalizer(norm='l1')),
                ('3', KNeighborsClassifier(n_neighbors=1, weights='distance'))]))
('8', Pipeline(steps=[('0', StandardScaler(with_mean=False)),
                ('1', Normalizer(norm='l1')),
                ('2', KNeighborsClassifier(n_neighbors=1))]))
('9', Pipeline(steps=[('0',
                 RandomUnderSampler(random_state=8,
                                    sampling_strategy='not minority')),
                ('1', Normalizer(norm='l1')),
                ('2', KNeighborsClassifier(n_neighbors=1))]))
