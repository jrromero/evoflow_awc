['POX', 'NUC', 'CYT', 'CYT', 'CYT', 'EXC', 'CYT', 'CYT', 'MIT', 'ME1', 'EXC', 'ME2', 'MIT', 'ME1', 'CYT', 'CYT', 'CYT', 'MIT', 'MIT', 'NUC', 'ME3', 'CYT', 'CYT', 'ME1', 'MIT', 'MIT', 'MIT', 'POX', 'ME3', 'MIT', 'ME1', 'ME3', 'CYT', 'CYT', 'CYT', 'POX', 'NUC', 'MIT', 'CYT', 'EXC', 'ME3', 'CYT', 'NUC', 'CYT', 'NUC', 'CYT', 'MIT', 'NUC', 'CYT', 'NUC', 'CYT', 'NUC', 'NUC', 'MIT', 'NUC', 'MIT', 'POX', 'NUC', 'CYT', 'ME1', 'ME1', 'MIT', 'MIT', 'ME3', 'MIT', 'MIT', 'MIT', 'EXC', 'CYT', 'CYT', 'EXC', 'VAC', 'CYT', 'ME2', 'CYT', 'MIT', 'EXC', 'EXC', 'CYT', 'CYT', 'CYT', 'CYT', 'ME3', 'POX', 'NUC', 'NUC', 'CYT', 'NUC', 'MIT', 'NUC', 'ME3', 'NUC', 'ME3', 'CYT', 'ME3', 'NUC', 'CYT', 'ME2', 'ME3', 'CYT', 'ME3', 'ME3', 'NUC', 'EXC', 'ERL', 'NUC', 'CYT', 'ME3', 'ME3', 'POX', 'ME3', 'ME1', 'ME1', 'CYT', 'ME3', 'ME3', 'ME1', 'NUC', 'NUC', 'NUC', 'MIT', 'ME3', 'MIT', 'NUC', 'ME3', 'NUC', 'NUC', 'CYT', 'ME3', 'CYT', 'CYT', 'NUC', 'ME2', 'ME2', 'NUC', 'NUC', 'MIT', 'MIT', 'CYT', 'CYT', 'NUC', 'MIT', 'NUC', 'CYT', 'CYT', 'CYT', 'MIT', 'MIT', 'ME3', 'NUC', 'CYT', 'NUC', 'MIT', 'MIT', 'MIT', 'NUC', 'CYT', 'ME3', 'ME3', 'CYT', 'MIT', 'MIT', 'CYT', 'MIT', 'CYT', 'NUC', 'ME1', 'ME3', 'NUC', 'MIT', 'ME1', 'NUC', 'ERL', 'MIT', 'ME3', 'ME2', 'ME2', 'NUC', 'NUC', 'NUC', 'ME3', 'ME3', 'ME2', 'NUC', 'NUC', 'NUC', 'ME3', 'ME2', 'CYT', 'MIT', 'MIT', 'MIT', 'MIT', 'ME3', 'CYT', 'MIT', 'ME3', 'NUC', 'NUC', 'MIT', 'CYT', 'NUC', 'NUC', 'MIT', 'MIT', 'MIT', 'ME3', 'MIT', 'CYT', 'CYT', 'MIT', 'MIT', 'MIT', 'ME3', 'MIT', 'NUC', 'MIT', 'MIT', 'CYT', 'MIT', 'ME3', 'NUC', 'ME3', 'VAC', 'ME3', 'MIT', 'NUC', 'ME3', 'CYT', 'ME2', 'NUC', 'CYT', 'EXC', 'NUC', 'ME2', 'ME3', 'ME1', 'CYT', 'NUC', 'CYT', 'MIT', 'CYT', 'CYT', 'CYT', 'NUC', 'ME3', 'NUC', 'POX', 'NUC', 'MIT', 'MIT', 'POX', 'MIT', 'CYT', 'EXC', 'CYT', 'CYT', 'NUC', 'MIT', 'ME1', 'ME2', 'ME3', 'NUC', 'NUC', 'CYT', 'CYT', 'ME3', 'CYT', 'ME2', 'MIT', 'CYT', 'NUC', 'VAC', 'MIT', 'NUC', 'CYT', 'NUC', 'NUC', 'CYT', 'MIT', 'MIT', 'MIT', 'NUC', 'CYT', 'ME3', 'CYT', 'ME2', 'CYT', 'NUC', 'CYT', 'MIT', 'NUC', 'NUC', 'MIT', 'NUC', 'NUC', 'MIT', 'CYT', 'NUC', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'NUC', 'CYT', 'CYT', 'CYT', 'NUC', 'NUC', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'MIT', 'CYT', 'MIT', 'NUC', 'MIT', 'CYT', 'CYT', 'CYT', 'MIT', 'MIT', 'CYT', 'MIT', 'MIT', 'MIT', 'EXC', 'CYT', 'NUC', 'CYT', 'CYT', 'CYT', 'NUC', 'ME3', 'ME3', 'CYT', 'EXC', 'NUC', 'MIT', 'MIT', 'CYT', 'CYT', 'CYT', 'ME3', 'CYT', 'NUC', 'NUC', 'ME3', 'ME3', 'NUC', 'MIT', 'ME3', 'CYT', 'CYT', 'ME3', 'MIT', 'NUC', 'NUC', 'CYT', 'CYT', 'CYT', 'CYT', 'NUC', 'NUC', 'CYT', 'MIT', 'NUC', 'NUC', 'ME3', 'ME3', 'EXC', 'ME3', 'ME1', 'CYT', 'MIT', 'NUC', 'NUC', 'ME1', 'CYT', 'CYT', 'CYT', 'MIT', 'MIT', 'CYT', 'CYT', 'CYT', 'NUC', 'NUC', 'NUC', 'CYT', 'MIT', 'NUC', 'NUC', 'NUC', 'NUC', 'CYT', 'ME1', 'ME1', 'CYT', 'NUC', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'ME3', 'CYT', 'CYT', 'CYT', 'ME1', 'CYT', 'ME1', 'NUC', 'ME1', 'CYT', 'ME3', 'POX', 'ME1', 'ME3', 'ME3', 'ME3', 'ME3', 'ME3', 'ME3', 'MIT', 'NUC', 'ME3', 'MIT', 'NUC', 'CYT', 'ME3', 'NUC', 'CYT', 'ME2']
{'accuracy_score': 0.5887640449438202, 'balanced_accuracy_score': 0.5818005434919121, 'macro_precision_score': 0.4924619171910689, 'macro_recall_score': 0.523620489142721, 'macro_f1_score': 0.49909441011742794, 'micro_precision_score': 0.5887640449438202, 'micro_recall_score': 0.5887640449438202, 'micro_f1_score': 0.5887640449438202}
('0', Pipeline(steps=[('0', SimpleImputer(strategy='most_frequent')),
                ('1', SelectPercentile(percentile=69.47697591924796)),
                ('2',
                 ExtraTreesClassifier(class_weight='balanced',
                                      criterion='entropy', max_features='log2',
                                      min_samples_leaf=5, min_samples_split=15,
                                      n_estimators=86, random_state=2))]))
('1', Pipeline(steps=[('0',
                 RBFSampler(gamma=0.00978263912013043, n_components=17,
                            random_state=2)),
                ('1', RobustScaler()),
                ('2', SimpleImputer(strategy='most_frequent')),
                ('3',
                 ExtraTreesClassifier(class_weight='balanced_subsample',
                                      criterion='entropy', max_features='log2',
                                      min_samples_leaf=4, min_samples_split=7,
                                      n_estimators=80, random_state=2))]))
('2', Pipeline(steps=[('0',
                 FastICA(algorithm='deflation', fun='cube', n_components=45,
                         random_state=2)),
                ('1',
                 ExtraTreesClassifier(class_weight='balanced',
                                      criterion='entropy', max_features='log2',
                                      min_samples_leaf=5, min_samples_split=15,
                                      n_estimators=86, random_state=2))]))
('3', Pipeline(steps=[('0',
                 RBFSampler(gamma=0.00978263912013043, n_components=17,
                            random_state=2)),
                ('1',
                 FeatureAgglomeration(affinity='manhattan', linkage='complete',
                                      n_clusters=7)),
                ('2', SimpleImputer(strategy='most_frequent')),
                ('3',
                 ExtraTreesClassifier(class_weight='balanced',
                                      criterion='entropy', max_features='log2',
                                      min_samples_leaf=5, min_samples_split=15,
                                      n_estimators=86, random_state=2))]))
('4', Pipeline(steps=[('0', MaxAbsScaler()),
                ('1',
                 FastICA(algorithm='deflation', fun='cube', n_components=45,
                         random_state=2)),
                ('2',
                 ExtraTreesClassifier(class_weight='balanced',
                                      criterion='entropy', max_features='log2',
                                      min_samples_leaf=5, min_samples_split=15,
                                      n_estimators=86, random_state=2))]))
('5', Pipeline(steps=[('0', MinMaxScaler()), ('1', VarianceThreshold()),
                ('2', MaxAbsScaler()),
                ('3',
                 ExtraTreesClassifier(class_weight='balanced',
                                      criterion='entropy', max_features='log2',
                                      min_samples_leaf=5, min_samples_split=15,
                                      n_estimators=86, random_state=2))]))
('6', Pipeline(steps=[('0', VarianceThreshold()),
                ('1', RobustScaler(with_centering=False, with_scaling=False)),
                ('2', KNNImputer(n_neighbors=6, weights='distance')),
                ('3',
                 ExtraTreesClassifier(class_weight='balanced',
                                      max_features='log2', min_samples_leaf=4,
                                      min_samples_split=15, n_estimators=28,
                                      random_state=2))]))
('7', Pipeline(steps=[('0',
                 RBFSampler(gamma=0.0401621761626091, n_components=36,
                            random_state=2)),
                ('1',
                 ExtraTreesClassifier(class_weight='balanced',
                                      criterion='entropy', max_features='log2',
                                      min_samples_leaf=5, min_samples_split=15,
                                      n_estimators=86, random_state=2))]))
('8', Pipeline(steps=[('0', MinMaxScaler()),
                ('1',
                 RBFSampler(gamma=0.019522268035163774, n_components=88,
                            random_state=2)),
                ('2', MaxAbsScaler()),
                ('3',
                 ExtraTreesClassifier(class_weight='balanced',
                                      max_features='log2', min_samples_leaf=8,
                                      min_samples_split=11, n_estimators=57,
                                      random_state=2))]))
('9', Pipeline(steps=[('0',
                 RBFSampler(gamma=0.00978263912013043, n_components=17,
                            random_state=2)),
                ('1', SimpleImputer(strategy='most_frequent')),
                ('2',
                 ExtraTreesClassifier(class_weight='balanced_subsample',
                                      criterion='entropy', max_features='log2',
                                      min_samples_leaf=4, min_samples_split=7,
                                      n_estimators=80, random_state=2))]))
