['good', 'bad', 'good', 'bad', 'bad', 'bad', 'bad', 'bad', 'good', 'bad', 'good', 'good', 'bad', 'good', 'good', 'bad', 'good', 'good', 'good', 'good', 'good', 'good', 'good', 'bad', 'good', 'good', 'good', 'good', 'good', 'good', 'good', 'good', 'good', 'good', 'good', 'bad', 'bad', 'bad', 'good', 'good', 'good', 'bad', 'good', 'good', 'good', 'bad', 'good', 'good', 'good', 'good', 'bad', 'bad', 'good', 'bad', 'bad', 'good', 'good', 'bad', 'bad', 'good', 'bad', 'bad', 'bad', 'bad', 'good', 'good', 'bad', 'good', 'bad', 'bad', 'good', 'good', 'bad', 'good', 'good', 'bad', 'good', 'good', 'good', 'bad', 'bad', 'good', 'good', 'good', 'bad', 'bad', 'bad', 'good', 'bad', 'bad', 'bad', 'bad', 'good', 'good', 'bad', 'bad', 'bad', 'bad', 'good', 'bad', 'good', 'good', 'good', 'bad', 'bad', 'bad', 'good', 'good', 'bad', 'bad', 'bad', 'good', 'bad', 'good', 'bad', 'bad', 'bad', 'good', 'bad', 'bad', 'bad', 'good', 'bad', 'good', 'good', 'good', 'good', 'good', 'good', 'bad', 'good', 'good', 'good', 'good', 'good', 'bad', 'bad', 'bad', 'good', 'bad', 'good', 'good', 'bad', 'good', 'good', 'good', 'bad', 'good', 'bad', 'bad', 'good', 'bad', 'good', 'bad', 'good', 'good', 'bad', 'good', 'good', 'bad', 'bad', 'bad', 'bad', 'bad', 'bad', 'good', 'bad', 'good', 'good', 'bad', 'good', 'good', 'bad', 'bad', 'bad', 'bad', 'bad', 'good', 'good', 'good', 'bad', 'good', 'bad', 'bad', 'good', 'bad', 'good', 'bad', 'good', 'bad', 'bad', 'good', 'good', 'good', 'good', 'bad', 'bad', 'good', 'good', 'good', 'bad', 'good', 'bad', 'bad', 'good', 'good', 'good', 'good', 'good', 'bad', 'good', 'good', 'good', 'bad', 'good', 'bad', 'bad', 'good', 'bad', 'good', 'bad', 'good', 'good', 'bad', 'good', 'good', 'good', 'bad', 'good', 'bad', 'good', 'good', 'good', 'good', 'good', 'bad', 'good', 'bad', 'bad', 'bad', 'good', 'bad', 'good', 'good', 'good', 'good', 'good', 'good', 'bad', 'good', 'good', 'good', 'good', 'bad', 'good', 'good', 'bad', 'good', 'good', 'good', 'good', 'bad', 'bad', 'good', 'good', 'bad', 'good', 'bad', 'bad', 'good', 'good', 'good', 'bad', 'good', 'good', 'bad', 'bad', 'bad', 'bad', 'good', 'bad', 'bad', 'good', 'good', 'good', 'bad', 'bad', 'good', 'bad', 'good', 'bad', 'good', 'bad', 'good', 'good', 'bad', 'good', 'bad', 'good', 'bad']
{'accuracy_score': 0.7133333333333334, 'balanced_accuracy_score': 0.7188320872903617, 'macro_precision_score': 0.6953463203463204, 'macro_recall_score': 0.7188320872903617, 'macro_f1_score': 0.6968272620446534, 'micro_precision_score': 0.7133333333333334, 'micro_recall_score': 0.7133333333333334, 'micro_f1_score': 0.7133333333333335}
('0', Pipeline(steps=[('0', MinMaxScaler()), ('1', VarianceThreshold()),
                ('2', StandardScaler()),
                ('3',
                 LinearSVC(C=0.00024039837465442268, class_weight='balanced',
                           dual=False, random_state=4,
                           tol=0.000313527676522548))]))
('1', Pipeline(steps=[('0', MaxAbsScaler()), ('1', Normalizer(norm='l1')),
                ('2', StandardScaler()),
                ('3',
                 LinearSVC(C=0.00024039837465442268, class_weight='balanced',
                           dual=False, random_state=4,
                           tol=0.000313527676522548))]))
('2', Pipeline(steps=[('0', RobustScaler(with_centering=False, with_scaling=False)),
                ('1', VarianceThreshold()), ('2', StandardScaler()),
                ('3',
                 LinearSVC(C=0.00024039837465442268, class_weight='balanced',
                           dual=False, random_state=4,
                           tol=0.000313527676522548))]))
('3', Pipeline(steps=[('0', MaxAbsScaler()),
                ('1',
                 FastICA(fun='cube', n_components=42, random_state=4,
                         whiten=False)),
                ('2',
                 RandomForestClassifier(bootstrap=False,
                                        class_weight='balanced_subsample',
                                        max_features='sqrt',
                                        min_samples_leaf=19,
                                        min_samples_split=13, n_estimators=14,
                                        random_state=4))]))
('4', Pipeline(steps=[('0', VarianceThreshold()),
                ('1', SelectPercentile(percentile=90.44280803180928)),
                ('2', MinMaxScaler()),
                ('3', GaussianNB(var_smoothing=0.000656823595990227))]))
('5', Pipeline(steps=[('0', MinMaxScaler()), ('1', Normalizer(norm='l1')),
                ('2', StandardScaler()),
                ('3',
                 LinearSVC(C=0.00024039837465442268, class_weight='balanced',
                           dual=False, random_state=4,
                           tol=0.000313527676522548))]))
('6', Pipeline(steps=[('0', MinMaxScaler()), ('1', Normalizer()),
                ('2', StandardScaler()),
                ('3',
                 LinearSVC(C=0.00024039837465442268, class_weight='balanced',
                           dual=False, random_state=4,
                           tol=0.000313527676522548))]))
('7', Pipeline(steps=[('0', MaxAbsScaler()),
                ('1',
                 MultinomialNB(alpha=0.21117298072739896, fit_prior=False))]))
('8', Pipeline(steps=[('0', MaxAbsScaler()), ('1', MinMaxScaler()),
                ('2', StandardScaler()),
                ('3',
                 LinearSVC(C=0.00024039837465442268, class_weight='balanced',
                           dual=False, random_state=4,
                           tol=0.000313527676522548))]))
('9', Pipeline(steps=[('0', Normalizer(norm='l1')),
                ('1',
                 RandomForestClassifier(bootstrap=False,
                                        class_weight='balanced_subsample',
                                        criterion='entropy',
                                        max_features='sqrt',
                                        min_samples_leaf=12,
                                        min_samples_split=15, n_estimators=29,
                                        random_state=4))]))
