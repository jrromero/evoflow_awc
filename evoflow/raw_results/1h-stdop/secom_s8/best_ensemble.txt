
{'accuracy_score': 0.7404255319148936, 'balanced_accuracy_score': 0.5748704824917297, 'macro_precision_score': 0.5297340175008056, 'macro_recall_score': 0.5748704824917297, 'macro_f1_score': 0.5161181434599156, 'micro_precision_score': 0.7404255319148936, 'micro_recall_score': 0.7404255319148936, 'micro_f1_score': 0.7404255319148936}
('0', Pipeline(steps=[('0', MinMaxScaler()), ('1', KNNImputer(n_neighbors=8)),
                ('2', GaussianNB(var_smoothing=0.0003152752605285935))]))
('1', Pipeline(steps=[('0', SimpleImputer(strategy='median')),
                ('1',
                 SMOTE(k_neighbors=3, random_state=8,
                       sampling_strategy='not majority')),
                ('2',
                 AdaBoostClassifier(algorithm='SAMME',
                                    learning_rate=0.10547723550624614,
                                    n_estimators=28, random_state=8))]))
('2', Pipeline(steps=[('0', MinMaxScaler()),
                ('1', KNNImputer(n_neighbors=3, weights='distance')),
                ('2',
                 MultinomialNB(alpha=0.012611018783856173, fit_prior=False))]))
('3', Pipeline(steps=[('0', KNNImputer(n_neighbors=3, weights='distance')),
                ('1', SelectPercentile(percentile=57.690645040075296)),
                ('2', MaxAbsScaler()),
                ('3',
                 SGDClassifier(alpha=2.32883467462606e-05, average=True,
                               class_weight='balanced',
                               epsilon=2.5840884051681276e-05,
                               eta0=1.2040795853369109e-05,
                               l1_ratio=2.646328314475725e-08,
                               power_t=0.3448083894390789, random_state=8,
                               tol=0.0006650337081456333))]))
('4', Pipeline(steps=[('0', KNNImputer(n_neighbors=3, weights='distance')),
                ('1',
                 SMOTE(k_neighbors=3, random_state=8,
                       sampling_strategy='not majority')),
                ('2', MinMaxScaler()),
                ('3',
                 AdaBoostClassifier(algorithm='SAMME',
                                    learning_rate=0.601976320578488,
                                    n_estimators=44, random_state=8))]))
('5', Pipeline(steps=[('0', KNNImputer(n_neighbors=3, weights='distance')),
                ('1',
                 SMOTE(k_neighbors=3, random_state=8,
                       sampling_strategy='not majority')),
                ('2', MinMaxScaler()),
                ('3',
                 QuadraticDiscriminantAnalysis(reg_param=0.05986222129568053))]))
('6', Pipeline(steps=[('0', KNNImputer(n_neighbors=7)),
                ('1',
                 SMOTE(k_neighbors=3, random_state=8,
                       sampling_strategy='not majority')),
                ('2',
                 AdaBoostClassifier(algorithm='SAMME',
                                    learning_rate=0.601976320578488,
                                    n_estimators=44, random_state=8))]))
('7', Pipeline(steps=[('0', SimpleImputer(strategy='median')),
                ('1',
                 SMOTE(k_neighbors=3, random_state=8,
                       sampling_strategy='not majority')),
                ('2', BernoulliNB(alpha=40.340483085286124))]))
('8', Pipeline(steps=[('0', SimpleImputer()),
                ('1',
                 SMOTE(k_neighbors=3, random_state=8,
                       sampling_strategy='not majority')),
                ('2', SelectPercentile(percentile=57.690645040075296)),
                ('3', GaussianNB(var_smoothing=6.257914117087589e-09))]))
('9', Pipeline(steps=[('0', MinMaxScaler()),
                ('1', KNNImputer(n_neighbors=3, weights='distance')),
                ('2', GaussianNB(var_smoothing=0.0003152752605285935))]))
