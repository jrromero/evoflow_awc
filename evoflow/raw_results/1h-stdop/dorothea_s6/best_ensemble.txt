
{'accuracy_score': 0.9565217391304348, 'balanced_accuracy_score': 0.8655202821869488, 'macro_precision_score': 0.7998553170966964, 'macro_recall_score': 0.8655202821869488, 'macro_f1_score': 0.8287614572648159, 'micro_precision_score': 0.9565217391304348, 'micro_recall_score': 0.9565217391304348, 'micro_f1_score': 0.9565217391304348}
('0', Pipeline(steps=[('0', SelectFwe(alpha=0.0090660692920724)),
                ('1',
                 SGDClassifier(alpha=0.009494165646194876, average=True,
                               class_weight='balanced',
                               epsilon=0.002814601320748469,
                               eta0=1.2681206606674672e-06,
                               l1_ratio=5.709267488854124e-09, loss='log',
                               power_t=0.46271867199314853, random_state=6,
                               tol=3.940439049003888e-05))]))
('1', Pipeline(steps=[('0', KNNImputer(n_neighbors=3)), ('1', StandardScaler()),
                ('2',
                 PassiveAggressiveClassifier(C=1.9592651772028111,
                                             fit_intercept=False,
                                             random_state=6))]))
('2', Pipeline(steps=[('0',
                 SMOTE(k_neighbors=2, random_state=6,
                       sampling_strategy='not minority')),
                ('1',
                 RandomUnderSampler(random_state=6, replacement=True,
                                    sampling_strategy='not minority')),
                ('2', PCA(n_components=0.9657781070329488, random_state=6)),
                ('3',
                 RandomForestClassifier(bootstrap=False,
                                        class_weight='balanced',
                                        criterion='entropy',
                                        max_features='sqrt',
                                        min_samples_leaf=14,
                                        min_samples_split=10, n_estimators=88,
                                        random_state=6))]))
('3', Pipeline(steps=[('0',
                 SGDClassifier(alpha=3.7322251735351336e-06,
                               class_weight='balanced',
                               epsilon=1.9673525758152695e-05,
                               eta0=1.6733166710542763e-06,
                               l1_ratio=9.56188226804542e-08,
                               loss='modified_huber',
                               power_t=0.029027802758883215, random_state=6,
                               tol=0.004795940916275924))]))
('4', Pipeline(steps=[('0', SimpleImputer()), ('1', Normalizer(norm='l1')),
                ('2', KNNImputer(n_neighbors=8, weights='distance')),
                ('3',
                 KNeighborsClassifier(n_neighbors=13, p=1,
                                      weights='distance'))]))
('5', Pipeline(steps=[('0', Normalizer(norm='max')), ('1', VarianceThreshold()),
                ('2', SelectFwe(alpha=0.0020127175011516265)),
                ('3',
                 AdaBoostClassifier(learning_rate=0.41782864910310535,
                                    n_estimators=85, random_state=6))]))
('6', Pipeline(steps=[('0', SelectPercentile(percentile=43.8581873713618)),
                ('1',
                 RandomUnderSampler(random_state=6, replacement=True,
                                    sampling_strategy='not minority')),
                ('2', VarianceThreshold()),
                ('3',
                 ExtraTreesClassifier(max_features='sqrt', min_samples_leaf=15,
                                      min_samples_split=4, n_estimators=67,
                                      random_state=6))]))
('7', Pipeline(steps=[('0', MinMaxScaler()), ('1', VarianceThreshold()),
                ('2',
                 ExtraTreesClassifier(class_weight='balanced_subsample',
                                      max_features='sqrt', min_samples_leaf=5,
                                      min_samples_split=17, n_estimators=33,
                                      random_state=6))]))
('8', Pipeline(steps=[('0',
                 MLPClassifier(activation='logistic',
                               alpha=0.00044514641861780855,
                               learning_rate_init=0.09608929769421068,
                               random_state=6, solver='lbfgs'))]))
('9', Pipeline(steps=[('0',
                 RandomUnderSampler(random_state=6,
                                    sampling_strategy='not majority')),
                ('1',
                 ExtraTreesClassifier(class_weight='balanced_subsample',
                                      max_features='sqrt', min_samples_leaf=6,
                                      min_samples_split=7, n_estimators=82,
                                      random_state=6))]))
