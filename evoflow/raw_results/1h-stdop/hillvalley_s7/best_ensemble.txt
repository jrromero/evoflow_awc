['1', '0', '0', '0', '0', '1', '1', '0', '1', '0', '0', '0', '1', '1', '1', '0', '1', '1', '0', '1', '1', '0', '1', '1', '1', '0', '0', '1', '0', '0', '1', '1', '0', '1', '0', '0', '1', '0', '0', '1', '1', '0', '1', '1', '1', '0', '0', '0', '0', '1', '0', '1', '1', '0', '0', '0', '1', '1', '0', '0', '0', '1', '1', '0', '0', '1', '0', '1', '1', '1', '1', '1', '0', '0', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '0', '1', '0', '0', '0', '1', '1', '0', '1', '1', '0', '0', '0', '0', '0', '1', '0', '1', '0', '0', '0', '0', '0', '1', '1', '1', '0', '1', '0', '1', '1', '0', '1', '0', '1', '0', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '0', '0', '0', '1', '0', '0', '1', '1', '1', '1', '1', '0', '1', '0', '0', '0', '1', '1', '0', '0', '1', '1', '0', '0', '0', '0', '0', '1', '0', '1', '0', '1', '0', '1', '0', '1', '1', '0', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0', '0', '1', '0', '0', '1', '0', '0', '1', '0', '0', '1', '1', '1', '1', '1', '0', '1', '1', '0', '0', '1', '0', '0', '1', '1', '1', '1', '0', '1', '0', '0', '1', '1', '1', '0', '0', '1', '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '1', '0', '0', '1', '1', '0', '1', '1', '0', '0', '1', '0', '1', '1', '1', '0', '0', '1', '0', '1', '0', '0', '1', '1', '0', '0', '1', '1', '1', '0', '1', '0', '0', '0', '0', '1', '0', '1', '1', '0', '0', '1', '1', '1', '0', '1', '0', '0', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '0', '0', '1', '0', '1', '0', '0', '1', '0', '1', '0', '1', '0', '1', '0', '0', '0', '0', '0', '1', '1', '0', '1', '0', '0', '0', '0', '1', '1', '0', '1', '1', '1', '1', '1', '0', '1', '0', '1', '1', '1', '0', '1', '0', '1', '1', '1', '1', '1', '1', '1', '0', '0', '1', '0', '0', '1', '0', '1', '1', '0', '0', '0', '0', '1', '0', '1', '1', '0', '0', '0', '0', '0', '1', '0', '0', '1', '1', '0', '0', '1', '0', '0', '1', '0', '0', '1', '0', '1', '1', '0', '1', '0', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0', '1', '0', '0', '1', '1', '1', '0', '1', '1']
{'accuracy_score': 1.0, 'balanced_accuracy_score': 1.0, 'macro_precision_score': 1.0, 'macro_recall_score': 1.0, 'macro_f1_score': 1.0, 'micro_precision_score': 1.0, 'micro_recall_score': 1.0, 'micro_f1_score': 1.0}
('0', Pipeline(steps=[('0', Normalizer()), ('1', StandardScaler(with_mean=False)),
                ('2', KNeighborsClassifier(n_neighbors=1, weights='distance'))]))
('1', Pipeline(steps=[('0', MaxAbsScaler()), ('1', Normalizer()),
                ('2', StandardScaler()),
                ('3', KNeighborsClassifier(n_neighbors=1, weights='distance'))]))
('2', Pipeline(steps=[('0', Normalizer()),
                ('1', KNeighborsClassifier(n_neighbors=1, weights='distance'))]))
('3', Pipeline(steps=[('0', Normalizer(norm='max')),
                ('1', KNeighborsClassifier(n_neighbors=1, weights='distance'))]))
('4', Pipeline(steps=[('0',
                 SMOTE(k_neighbors=3, random_state=7,
                       sampling_strategy='not majority')),
                ('1', StandardScaler(with_mean=False, with_std=False)),
                ('2', Normalizer(norm='max')),
                ('3', KNeighborsClassifier(n_neighbors=1, weights='distance'))]))
('5', Pipeline(steps=[('0', Normalizer(norm='max')), ('1', MaxAbsScaler()),
                ('2', KNeighborsClassifier(n_neighbors=1, weights='distance'))]))
('6', Pipeline(steps=[('0', SMOTE(random_state=7, sampling_strategy='minority')),
                ('1', StandardScaler(with_mean=False, with_std=False)),
                ('2', Normalizer(norm='l1')),
                ('3', KNeighborsClassifier(n_neighbors=1, weights='distance'))]))
('7', Pipeline(steps=[('0', Normalizer(norm='max')),
                ('1', SimpleImputer(strategy='most_frequent')),
                ('2', KNeighborsClassifier(n_neighbors=1, weights='distance'))]))
('8', Pipeline(steps=[('0', Normalizer(norm='l1')), ('1', MaxAbsScaler()),
                ('2', KNeighborsClassifier(n_neighbors=1, weights='distance'))]))
('9', Pipeline(steps=[('0', Normalizer(norm='max')),
                ('1', SimpleImputer(strategy='most_frequent')),
                ('2', MaxAbsScaler()),
                ('3', KNeighborsClassifier(n_neighbors=1, weights='distance'))]))
