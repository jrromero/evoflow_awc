['POX', 'CYT', 'CYT', 'CYT', 'MIT', 'EXC', 'CYT', 'CYT', 'MIT', 'ME1', 'EXC', 'ME2', 'MIT', 'ME1', 'CYT', 'CYT', 'CYT', 'MIT', 'MIT', 'NUC', 'ME3', 'CYT', 'CYT', 'ME1', 'MIT', 'MIT', 'MIT', 'POX', 'ME3', 'MIT', 'ME1', 'ME3', 'CYT', 'CYT', 'CYT', 'POX', 'NUC', 'MIT', 'CYT', 'MIT', 'ME3', 'CYT', 'NUC', 'CYT', 'NUC', 'CYT', 'MIT', 'NUC', 'CYT', 'NUC', 'CYT', 'NUC', 'CYT', 'MIT', 'NUC', 'MIT', 'POX', 'NUC', 'CYT', 'ME1', 'ME1', 'MIT', 'MIT', 'ME3', 'MIT', 'MIT', 'MIT', 'EXC', 'CYT', 'NUC', 'EXC', 'VAC', 'CYT', 'ME2', 'CYT', 'MIT', 'EXC', 'EXC', 'CYT', 'CYT', 'CYT', 'NUC', 'ME3', 'POX', 'CYT', 'NUC', 'CYT', 'NUC', 'MIT', 'CYT', 'ME3', 'NUC', 'ME3', 'CYT', 'ME3', 'NUC', 'MIT', 'ME2', 'CYT', 'CYT', 'ME3', 'ME3', 'NUC', 'ME1', 'ERL', 'NUC', 'CYT', 'ME3', 'ME3', 'POX', 'ME3', 'ME1', 'ME1', 'CYT', 'ME3', 'ME3', 'ME1', 'CYT', 'NUC', 'NUC', 'MIT', 'ME3', 'MIT', 'NUC', 'ME3', 'CYT', 'NUC', 'CYT', 'ME3', 'CYT', 'CYT', 'NUC', 'VAC', 'ME2', 'NUC', 'NUC', 'MIT', 'NUC', 'CYT', 'CYT', 'NUC', 'MIT', 'NUC', 'CYT', 'CYT', 'CYT', 'MIT', 'MIT', 'ME3', 'NUC', 'CYT', 'NUC', 'MIT', 'MIT', 'MIT', 'NUC', 'CYT', 'ME3', 'ME3', 'CYT', 'MIT', 'MIT', 'CYT', 'MIT', 'CYT', 'NUC', 'ME1', 'ME3', 'NUC', 'MIT', 'ME1', 'NUC', 'ERL', 'MIT', 'ME3', 'ME2', 'ME2', 'NUC', 'NUC', 'NUC', 'ME3', 'ME3', 'ME2', 'CYT', 'NUC', 'NUC', 'ME3', 'ME2', 'CYT', 'MIT', 'MIT', 'MIT', 'MIT', 'CYT', 'CYT', 'MIT', 'ME3', 'NUC', 'NUC', 'MIT', 'CYT', 'NUC', 'NUC', 'NUC', 'MIT', 'MIT', 'ME3', 'MIT', 'CYT', 'CYT', 'MIT', 'MIT', 'MIT', 'ME3', 'MIT', 'NUC', 'CYT', 'MIT', 'CYT', 'MIT', 'ME3', 'NUC', 'NUC', 'VAC', 'ME3', 'MIT', 'NUC', 'ME3', 'CYT', 'ME2', 'NUC', 'CYT', 'EXC', 'NUC', 'ME2', 'ME3', 'ME1', 'CYT', 'NUC', 'CYT', 'ME2', 'CYT', 'CYT', 'CYT', 'NUC', 'ME3', 'NUC', 'POX', 'VAC', 'MIT', 'NUC', 'POX', 'MIT', 'CYT', 'EXC', 'CYT', 'CYT', 'NUC', 'CYT', 'ME1', 'ME2', 'ME3', 'NUC', 'NUC', 'CYT', 'CYT', 'ME3', 'CYT', 'ME2', 'MIT', 'CYT', 'NUC', 'CYT', 'MIT', 'NUC', 'CYT', 'NUC', 'NUC', 'CYT', 'CYT', 'MIT', 'MIT', 'NUC', 'CYT', 'ME3', 'CYT', 'ME2', 'CYT', 'NUC', 'CYT', 'MIT', 'NUC', 'NUC', 'MIT', 'CYT', 'NUC', 'MIT', 'CYT', 'NUC', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'NUC', 'ME3', 'CYT', 'CYT', 'NUC', 'NUC', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'MIT', 'CYT', 'MIT', 'NUC', 'MIT', 'CYT', 'CYT', 'CYT', 'MIT', 'MIT', 'CYT', 'MIT', 'MIT', 'MIT', 'EXC', 'CYT', 'NUC', 'CYT', 'CYT', 'CYT', 'NUC', 'ME3', 'ME3', 'CYT', 'EXC', 'NUC', 'MIT', 'MIT', 'NUC', 'CYT', 'CYT', 'ME3', 'CYT', 'NUC', 'NUC', 'ME3', 'ME3', 'NUC', 'MIT', 'ME3', 'CYT', 'CYT', 'ME3', 'MIT', 'NUC', 'NUC', 'CYT', 'CYT', 'CYT', 'CYT', 'NUC', 'NUC', 'CYT', 'MIT', 'NUC', 'NUC', 'ME3', 'ME3', 'EXC', 'ME3', 'ME1', 'CYT', 'MIT', 'NUC', 'NUC', 'ME1', 'NUC', 'CYT', 'CYT', 'MIT', 'CYT', 'CYT', 'CYT', 'CYT', 'NUC', 'NUC', 'NUC', 'CYT', 'MIT', 'NUC', 'NUC', 'NUC', 'NUC', 'CYT', 'ME1', 'ME1', 'CYT', 'NUC', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'ME3', 'CYT', 'CYT', 'CYT', 'ME1', 'CYT', 'ME1', 'NUC', 'ME1', 'CYT', 'ME3', 'POX', 'ME3', 'ME3', 'ME3', 'ME3', 'ME3', 'ME3', 'ME3', 'MIT', 'NUC', 'ME3', 'MIT', 'NUC', 'CYT', 'ME3', 'NUC', 'CYT', 'ME2']
{'accuracy_score': 0.5910112359550562, 'balanced_accuracy_score': 0.5901442706632662, 'macro_precision_score': 0.5102489028252609, 'macro_recall_score': 0.5311298435969396, 'macro_f1_score': 0.5137076461938153, 'micro_precision_score': 0.5910112359550562, 'micro_recall_score': 0.5910112359550562, 'micro_f1_score': 0.5910112359550562}
('0', Pipeline(steps=[('0',
                 RandomOverSampler(random_state=5,
                                   sampling_strategy='not majority')),
                ('1',
                 SGDClassifier(alpha=0.0001469933592129071, average=True,
                               epsilon=0.0012127342380426698,
                               eta0=0.00026070408857420494,
                               l1_ratio=7.161162347592117e-06,
                               loss='modified_huber',
                               power_t=0.3518267665902746, random_state=5,
                               tol=0.00023961484867071926))]))
('1', Pipeline(steps=[('0',
                 RandomForestClassifier(bootstrap=False,
                                        class_weight='balanced_subsample',
                                        max_features='log2', min_samples_leaf=4,
                                        min_samples_split=19, n_estimators=50,
                                        random_state=5))]))
('2', Pipeline(steps=[('0',
                 ExtraTreesClassifier(bootstrap=True,
                                      class_weight='balanced_subsample',
                                      criterion='entropy', max_features='log2',
                                      min_samples_leaf=2, min_samples_split=10,
                                      n_estimators=26, random_state=5))]))
('3', Pipeline(steps=[('0', RobustScaler(with_scaling=False)),
                ('1',
                 ExtraTreesClassifier(class_weight='balanced_subsample',
                                      max_features='log2', min_samples_leaf=2,
                                      min_samples_split=18, n_estimators=57,
                                      random_state=5))]))
('4', Pipeline(steps=[('0', Normalizer(norm='l1')),
                ('1', StandardScaler(with_mean=False)),
                ('2',
                 ExtraTreesClassifier(bootstrap=True,
                                      class_weight='balanced_subsample',
                                      criterion='entropy', max_features='log2',
                                      min_samples_leaf=2, min_samples_split=10,
                                      n_estimators=26, random_state=5))]))
('5', Pipeline(steps=[('0', MaxAbsScaler()),
                ('1',
                 ExtraTreesClassifier(bootstrap=True,
                                      class_weight='balanced_subsample',
                                      criterion='entropy', max_features='log2',
                                      min_samples_leaf=2, min_samples_split=10,
                                      n_estimators=26, random_state=5))]))
('6', Pipeline(steps=[('0', VarianceThreshold()), ('1', MaxAbsScaler()),
                ('2',
                 RBFSampler(gamma=0.8368578923474421, n_components=90,
                            random_state=5)),
                ('3',
                 ExtraTreesClassifier(class_weight='balanced',
                                      criterion='entropy', max_features='sqrt',
                                      min_samples_leaf=13, min_samples_split=16,
                                      n_estimators=51, random_state=5))]))
('7', Pipeline(steps=[('0', VarianceThreshold()), ('1', MaxAbsScaler()),
                ('2',
                 RBFSampler(gamma=0.8368578923474421, n_components=90,
                            random_state=5)),
                ('3',
                 LogisticRegression(C=6.434491958071057,
                                    class_weight='balanced', random_state=5))]))
('8', Pipeline(steps=[('0', VarianceThreshold()), ('1', MaxAbsScaler()),
                ('2',
                 RBFSampler(gamma=0.8368578923474421, n_components=90,
                            random_state=5)),
                ('3',
                 LinearSVC(C=10.56455301589009, class_weight='balanced',
                           random_state=5, tol=1.718978020561684e-05))]))
('9', Pipeline(steps=[('0', VarianceThreshold()),
                ('1',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        max_features='log2', min_samples_leaf=2,
                                        min_samples_split=3, n_estimators=22,
                                        random_state=5))]))
