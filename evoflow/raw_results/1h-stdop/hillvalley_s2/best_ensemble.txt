
{'accuracy_score': 1.0, 'balanced_accuracy_score': 1.0, 'macro_precision_score': 1.0, 'macro_recall_score': 1.0, 'macro_f1_score': 1.0, 'micro_precision_score': 1.0, 'micro_recall_score': 1.0, 'micro_f1_score': 1.0}
('0', Pipeline(steps=[('0', Normalizer(norm='l1')),
                ('1',
                 SMOTE(k_neighbors=4, random_state=2,
                       sampling_strategy='minority')),
                ('2', KNeighborsClassifier(n_neighbors=25, p=1))]))
('1', Pipeline(steps=[('0', Normalizer(norm='max')),
                ('1',
                 FastICA(algorithm='deflation', fun='cube', n_components=35,
                         random_state=2, whiten=False)),
                ('2', VarianceThreshold()),
                ('3',
                 KNeighborsClassifier(n_neighbors=2, p=1, weights='distance'))]))
('2', Pipeline(steps=[('0', Normalizer(norm='max')), ('1', MaxAbsScaler()),
                ('2', StandardScaler()),
                ('3',
                 PassiveAggressiveClassifier(C=0.2770312280117449,
                                             fit_intercept=False,
                                             loss='squared_hinge',
                                             random_state=2))]))
('3', Pipeline(steps=[('0', Normalizer(norm='max')),
                ('1',
                 FastICA(algorithm='deflation', fun='cube', n_components=35,
                         random_state=2, whiten=False)),
                ('2',
                 Nystroem(coef0=-0.05356211890225682, degree=4,
                          gamma=1.1113257880551437, kernel='cosine',
                          n_components=49, random_state=2)),
                ('3',
                 KNeighborsClassifier(n_neighbors=2, p=1, weights='distance'))]))
('4', Pipeline(steps=[('0',
                 Nystroem(coef0=-0.05356211890225682, degree=4,
                          gamma=1.1113257880551437, kernel='cosine',
                          n_components=49, random_state=2)),
                ('1', VarianceThreshold()),
                ('2',
                 KNeighborsClassifier(n_neighbors=2, p=1, weights='distance'))]))
('5', Pipeline(steps=[('0',
                 Nystroem(coef0=-0.05356211890225682, degree=4,
                          gamma=1.1113257880551437, kernel='cosine',
                          n_components=49, random_state=2)),
                ('1',
                 ExtraTreesClassifier(class_weight='balanced',
                                      max_features='log2', min_samples_leaf=8,
                                      min_samples_split=11, n_estimators=57,
                                      random_state=2))]))
('6', Pipeline(steps=[('0',
                 Nystroem(coef0=-0.05356211890225682, degree=4,
                          gamma=1.1113257880551437, kernel='cosine',
                          n_components=49, random_state=2)),
                ('1',
                 FastICA(algorithm='deflation', fun='cube', n_components=35,
                         random_state=2, whiten=False)),
                ('2', VarianceThreshold()),
                ('3',
                 KNeighborsClassifier(n_neighbors=2, p=1, weights='distance'))]))
('7', Pipeline(steps=[('0', Normalizer(norm='max')),
                ('1', FeatureAgglomeration(linkage='average', n_clusters=6)),
                ('2', VarianceThreshold()),
                ('3',
                 KNeighborsClassifier(n_neighbors=2, p=1, weights='distance'))]))
('8', Pipeline(steps=[('0',
                 Nystroem(coef0=-0.05356211890225682, degree=4,
                          gamma=1.1113257880551437, kernel='cosine',
                          n_components=49, random_state=2)),
                ('1',
                 FastICA(algorithm='deflation', fun='cube', n_components=35,
                         random_state=2, whiten=False)),
                ('2', Normalizer(norm='max')),
                ('3',
                 KNeighborsClassifier(n_neighbors=2, p=1, weights='distance'))]))
('9', Pipeline(steps=[('0', Normalizer(norm='max')),
                ('1', FeatureAgglomeration(linkage='average', n_clusters=6)),
                ('2',
                 FastICA(algorithm='deflation', fun='cube', n_components=35,
                         random_state=2, whiten=False)),
                ('3',
                 KNeighborsClassifier(n_neighbors=2, p=1, weights='distance'))]))
