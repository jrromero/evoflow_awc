['-1', '-1', '1', '-1', '1', '-1', '1', '-1', '-1', '1', '-1', '1', '-1', '1', '1', '1', '-1', '-1', '-1', '1', '-1', '1', '-1', '-1', '-1', '-1', '1', '1', '-1', '-1', '1', '1', '1', '-1', '-1', '1', '1', '1', '1', '-1', '-1', '1', '-1', '-1', '-1', '-1', '-1', '-1', '1', '1', '-1', '1', '-1', '1', '-1', '1', '-1', '-1', '1', '-1', '-1', '-1', '1', '1', '1', '1', '-1', '1', '-1', '-1', '1', '1', '1', '-1', '-1', '1', '1', '-1', '1', '1', '1', '-1', '-1', '1', '-1', '-1', '-1', '-1', '1', '1', '1', '-1', '-1', '-1', '-1', '-1', '1', '1', '1', '-1', '1', '1', '-1', '-1', '1', '1', '1', '1', '1', '1', '-1', '1', '-1', '-1', '1', '-1', '-1', '-1', '-1', '-1', '1', '1', '1', '1', '1', '1', '1', '-1', '1', '1', '-1', '1', '-1', '-1', '-1', '-1', '1', '1', '1', '-1', '1', '1', '-1', '-1', '-1', '-1', '1', '1', '-1', '-1', '1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '1', '1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '1', '-1', '-1', '-1', '-1', '-1', '-1', '1', '1', '-1', '1', '1', '1', '1', '1', '-1', '-1', '1', '1', '-1', '-1', '-1', '-1', '1', '1', '-1', '1', '1', '1', '1', '1', '-1', '1', '1', '-1', '-1', '-1', '-1', '-1', '1', '1', '1', '-1', '1', '1', '-1', '-1', '1', '1', '-1', '-1', '1', '-1', '1', '1', '1', '-1', '-1', '1', '-1', '-1', '-1', '-1', '-1', '-1', '1', '1', '-1', '-1', '-1', '-1', '1', '1', '1', '1', '1', '-1', '1', '1', '-1', '-1', '1', '-1', '1', '1', '1', '-1', '-1', '1', '1', '1', '-1', '1', '1', '-1', '1', '1', '1', '-1', '-1', '1', '1', '1', '1', '-1', '1', '1', '-1', '-1', '1', '1', '1', '-1', '-1', '1', '-1', '1', '1', '-1', '1', '-1', '-1', '1', '-1', '-1', '1', '-1', '1', '-1', '-1', '1', '-1', '-1', '1', '1', '1', '1', '1', '1', '-1', '1', '1', '1', '-1', '-1', '1', '1', '-1', '1', '-1', '1', '-1', '-1', '1', '1', '1', '-1', '1', '-1', '-1', '1', '-1', '1', '-1', '1', '-1', '1', '-1', '1', '-1', '1', '-1', '-1', '1', '1', '-1', '1', '-1', '1', '-1', '1', '1', '-1', '1', '1', '1', '1', '-1', '-1', '-1', '-1', '1', '1', '-1', '1', '-1', '-1', '1', '-1', '-1', '-1', '-1', '-1', '1', '1', '-1', '-1', '-1', '1', '1', '1', '1', '1', '1', '1', '1', '-1', '1', '-1', '1', '1', '1', '-1', '-1', '1', '-1', '1', '1', '-1', '-1', '-1', '-1', '-1', '1', '1', '-1', '-1', '-1', '-1', '1', '-1', '1', '1', '-1', '-1', '1', '1', '1', '-1', '1', '1', '-1', '1', '1', '-1', '1', '-1', '-1', '-1', '-1', '-1', '1', '1', '1', '1', '1', '-1', '-1', '1', '-1', '-1', '-1', '1', '-1', '-1', '1', '1', '1', '1', '-1', '1', '-1', '-1', '-1', '-1', '-1', '1', '-1', '1', '-1', '-1', '-1', '1', '1', '1', '1', '-1', '-1', '1', '1', '-1', '-1', '1', '-1', '-1', '-1', '1', '-1', '1', '-1', '1', '-1', '1', '-1', '-1', '1', '-1', '-1', '-1', '1', '-1', '1', '-1', '1', '-1', '-1', '-1', '1', '-1', '-1', '-1', '1', '-1', '-1', '1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '1', '1', '-1', '-1', '1', '1', '-1', '1', '1', '1', '-1', '1', '1', '-1', '1', '1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '1', '-1', '-1', '1', '-1', '-1', '-1', '-1', '1', '-1', '-1', '-1', '-1', '1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '1', '-1', '-1', '1', '-1', '-1', '1', '-1', '1', '-1', '-1', '-1', '-1', '-1', '1', '-1', '-1', '-1', '1', '-1', '-1', '1', '-1', '1', '1', '-1', '1', '-1', '-1', '-1', '1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '1', '-1', '1', '1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '1', '1', '-1', '1', '-1', '1', '1', '-1', '-1', '1', '-1', '1', '1', '1', '-1', '1', '1', '-1', '1', '1', '1', '-1', '-1', '1', '-1', '1', '-1', '1', '-1', '1', '-1', '1', '-1', '1', '-1', '1', '-1', '-1', '-1', '1', '-1', '1', '-1', '-1', '-1', '1', '-1', '1', '-1', '1', '-1', '-1', '1', '1', '-1', '-1', '1', '1', '1', '-1', '-1', '-1', '-1', '-1', '1', '-1', '1', '-1', '-1', '-1', '1', '1', '1', '1', '-1', '1', '-1', '-1', '-1', '1', '1', '-1', '1', '-1', '-1', '1', '-1', '1', '1', '1', '-1', '-1', '1', '-1', '-1', '1', '1', '1', '1', '-1', '1', '-1', '1', '-1', '-1', '-1', '1', '1', '-1', '1', '-1', '1', '-1', '1', '1', '1', '1', '1', '1', '-1', '-1', '-1', '1', '1', '-1', '-1', '1', '-1', '-1', '1', '1', '-1', '-1', '1', '1', '-1', '1', '1', '-1', '1', '-1', '1', '1', '1', '1', '1', '1', '-1', '-1', '-1', '-1', '1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '1', '1', '-1', '1', '-1', '1', '1']
{'accuracy_score': 0.8217948717948718, 'balanced_accuracy_score': 0.8220203029665474, 'macro_precision_score': 0.8243339889147148, 'macro_recall_score': 0.8220203029665474, 'macro_f1_score': 0.8215129420402707, 'micro_precision_score': 0.8217948717948718, 'micro_recall_score': 0.8217948717948718, 'micro_f1_score': 0.8217948717948718}
('0', Pipeline(steps=[('0', KNNImputer(n_neighbors=10)),
                ('1', SelectPercentile(percentile=6.9514258031699665)),
                ('2',
                 SMOTETomek(random_state=45139, sampling_strategy='minority')),
                ('3',
                 KNeighborsClassifier(n_neighbors=1, p=1, weights='distance'))]))
('1', Pipeline(steps=[('0', MaxAbsScaler()),
                ('1', SelectPercentile(percentile=6.9514258031699665)),
                ('2',
                 SMOTETomek(random_state=45139, sampling_strategy='minority')),
                ('3',
                 KNeighborsClassifier(n_neighbors=1, p=1, weights='distance'))]))
('2', Pipeline(steps=[('0', SelectPercentile(percentile=28.889410611252003)),
                ('1',
                 KNeighborsClassifier(n_neighbors=3, p=1, weights='distance'))]))
('3', Pipeline(steps=[('0',
                 RandomOverSampler(random_state=45139,
                                   sampling_strategy='not minority')),
                ('1', KNNImputer(n_neighbors=4, weights='distance')),
                ('2', RobustScaler(with_scaling=False)),
                ('3',
                 KNeighborsClassifier(n_neighbors=22, p=1,
                                      weights='distance'))]))
('4', Pipeline(steps=[('0', SimpleImputer(strategy='median')), ('1', MinMaxScaler()),
                ('2',
                 RandomOverSampler(random_state=45139,
                                   sampling_strategy='not minority')),
                ('3',
                 RandomForestClassifier(bootstrap=False, max_features='sqrt',
                                        min_samples_leaf=11,
                                        min_samples_split=6, n_estimators=66,
                                        random_state=45139))]))
('5', Pipeline(steps=[('0', KNNImputer(n_neighbors=10)),
                ('1', SelectPercentile(percentile=6.9514258031699665)),
                ('2', MinMaxScaler()),
                ('3',
                 KNeighborsClassifier(n_neighbors=1, p=1, weights='distance'))]))
('6', Pipeline(steps=[('0',
                 Nystroem(coef0=0.12977932001813874, degree=3,
                          gamma=0.007812001850920125, kernel='poly',
                          n_components=84, random_state=45139)),
                ('1', SimpleImputer(strategy='most_frequent')),
                ('2',
                 KNeighborsClassifier(n_neighbors=3, p=1, weights='distance'))]))
('7', Pipeline(steps=[('0',
                 RandomForestClassifier(bootstrap=False, max_features='sqrt',
                                        min_samples_leaf=11,
                                        min_samples_split=6, n_estimators=66,
                                        random_state=45139))]))
('8', Pipeline(steps=[('0', VarianceThreshold()),
                ('1', SimpleImputer(strategy='most_frequent')),
                ('2', MinMaxScaler()), ('3', MaxAbsScaler()),
                ('4',
                 RandomForestClassifier(bootstrap=False, criterion='entropy',
                                        max_features='sqrt',
                                        min_samples_split=20, n_estimators=72,
                                        random_state=45139))]))
('9', Pipeline(steps=[('0', SimpleImputer(strategy='most_frequent')),
                ('1', MinMaxScaler()),
                ('2',
                 RandomOverSampler(random_state=45139,
                                   sampling_strategy='not minority')),
                ('3',
                 RandomForestClassifier(bootstrap=False, max_features='sqrt',
                                        min_samples_leaf=11,
                                        min_samples_split=6, n_estimators=66,
                                        random_state=45139))]))
