['POX', 'NUC', 'VAC', 'CYT', 'CYT', 'EXC', 'CYT', 'CYT', 'EXC', 'ME1', 'ME1', 'ME2', 'MIT', 'ME2', 'CYT', 'CYT', 'CYT', 'MIT', 'MIT', 'NUC', 'VAC', 'CYT', 'CYT', 'ME1', 'MIT', 'MIT', 'MIT', 'POX', 'ME3', 'MIT', 'ME1', 'ME3', 'CYT', 'CYT', 'CYT', 'POX', 'NUC', 'MIT', 'CYT', 'EXC', 'ME3', 'CYT', 'NUC', 'CYT', 'NUC', 'CYT', 'MIT', 'NUC', 'VAC', 'NUC', 'VAC', 'NUC', 'NUC', 'MIT', 'NUC', 'MIT', 'POX', 'NUC', 'CYT', 'ME1', 'ME1', 'MIT', 'MIT', 'ME3', 'MIT', 'MIT', 'MIT', 'EXC', 'MIT', 'NUC', 'EXC', 'EXC', 'MIT', 'ME2', 'CYT', 'MIT', 'EXC', 'EXC', 'CYT', 'CYT', 'CYT', 'CYT', 'ME3', 'POX', 'NUC', 'NUC', 'CYT', 'NUC', 'MIT', 'NUC', 'ME3', 'NUC', 'ME3', 'CYT', 'ME3', 'NUC', 'MIT', 'ME2', 'CYT', 'CYT', 'ME3', 'ME3', 'NUC', 'ME1', 'ERL', 'NUC', 'CYT', 'ME3', 'ME3', 'POX', 'ME3', 'ME2', 'ME1', 'CYT', 'ME3', 'ME3', 'ME2', 'NUC', 'NUC', 'NUC', 'MIT', 'ME3', 'MIT', 'NUC', 'ME3', 'NUC', 'NUC', 'CYT', 'ME3', 'CYT', 'CYT', 'NUC', 'ME2', 'ME2', 'NUC', 'NUC', 'MIT', 'MIT', 'CYT', 'CYT', 'NUC', 'MIT', 'NUC', 'CYT', 'CYT', 'CYT', 'MIT', 'MIT', 'ME3', 'NUC', 'CYT', 'NUC', 'MIT', 'MIT', 'MIT', 'NUC', 'CYT', 'ME3', 'ME3', 'CYT', 'MIT', 'MIT', 'CYT', 'MIT', 'CYT', 'NUC', 'ME1', 'ME3', 'NUC', 'MIT', 'ME2', 'NUC', 'ERL', 'MIT', 'ME3', 'ME2', 'ME2', 'NUC', 'NUC', 'NUC', 'ME3', 'ME3', 'ME2', 'NUC', 'NUC', 'NUC', 'ME3', 'ME2', 'CYT', 'MIT', 'MIT', 'MIT', 'MIT', 'ME3', 'CYT', 'MIT', 'ME3', 'NUC', 'NUC', 'MIT', 'CYT', 'NUC', 'NUC', 'NUC', 'MIT', 'MIT', 'ME3', 'MIT', 'CYT', 'CYT', 'MIT', 'MIT', 'MIT', 'ME3', 'MIT', 'NUC', 'CYT', 'MIT', 'CYT', 'MIT', 'ME3', 'NUC', 'ME3', 'ME2', 'ME3', 'MIT', 'NUC', 'ME3', 'CYT', 'ME2', 'NUC', 'CYT', 'EXC', 'NUC', 'ME2', 'ME3', 'ME2', 'CYT', 'NUC', 'CYT', 'MIT', 'CYT', 'CYT', 'CYT', 'ME3', 'ME3', 'CYT', 'ME3', 'NUC', 'MIT', 'NUC', 'POX', 'MIT', 'CYT', 'EXC', 'CYT', 'CYT', 'NUC', 'MIT', 'EXC', 'ME2', 'ME3', 'NUC', 'NUC', 'CYT', 'CYT', 'ME3', 'CYT', 'ME2', 'MIT', 'CYT', 'NUC', 'VAC', 'MIT', 'NUC', 'CYT', 'NUC', 'NUC', 'CYT', 'MIT', 'MIT', 'MIT', 'NUC', 'CYT', 'MIT', 'CYT', 'ME2', 'CYT', 'NUC', 'CYT', 'MIT', 'NUC', 'NUC', 'MIT', 'NUC', 'NUC', 'MIT', 'CYT', 'NUC', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'NUC', 'CYT', 'CYT', 'CYT', 'NUC', 'NUC', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'MIT', 'MIT', 'CYT', 'MIT', 'NUC', 'MIT', 'CYT', 'CYT', 'CYT', 'MIT', 'MIT', 'CYT', 'MIT', 'MIT', 'MIT', 'EXC', 'ME3', 'CYT', 'CYT', 'CYT', 'NUC', 'NUC', 'ME1', 'ME3', 'NUC', 'ME1', 'NUC', 'MIT', 'MIT', 'CYT', 'CYT', 'CYT', 'ME3', 'CYT', 'NUC', 'VAC', 'ME3', 'ME3', 'NUC', 'MIT', 'ME3', 'CYT', 'CYT', 'ME3', 'MIT', 'NUC', 'NUC', 'CYT', 'CYT', 'CYT', 'CYT', 'NUC', 'NUC', 'CYT', 'MIT', 'NUC', 'CYT', 'ME3', 'ME3', 'EXC', 'ME3', 'ME1', 'NUC', 'MIT', 'NUC', 'NUC', 'ME1', 'CYT', 'CYT', 'CYT', 'MIT', 'EXC', 'CYT', 'CYT', 'CYT', 'NUC', 'NUC', 'NUC', 'CYT', 'MIT', 'NUC', 'NUC', 'NUC', 'NUC', 'CYT', 'ME1', 'ME1', 'CYT', 'NUC', 'CYT', 'CYT', 'NUC', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'NUC', 'CYT', 'ME3', 'CYT', 'CYT', 'CYT', 'ME1', 'CYT', 'ME2', 'NUC', 'ME1', 'CYT', 'ME3', 'POX', 'ME1', 'ME3', 'ME3', 'ME3', 'ME3', 'ME3', 'ME3', 'MIT', 'NUC', 'ME3', 'MIT', 'NUC', 'CYT', 'ME3', 'NUC', 'CYT', 'ME2']
{'accuracy_score': 0.550561797752809, 'balanced_accuracy_score': 0.5324464444040944, 'macro_precision_score': 0.4318153540485962, 'macro_recall_score': 0.47920179996368484, 'macro_f1_score': 0.45119688616714243, 'micro_precision_score': 0.550561797752809, 'micro_recall_score': 0.550561797752809, 'micro_f1_score': 0.550561797752809}
('0', Pipeline(steps=[('0', MinMaxScaler()), ('1', MaxAbsScaler()),
                ('2',
                 SMOTE(k_neighbors=2, random_state=67822,
                       sampling_strategy='not majority')),
                ('3',
                 ExtraTreesClassifier(class_weight='balanced_subsample',
                                      max_features='log2', min_samples_leaf=8,
                                      min_samples_split=17, n_estimators=95,
                                      random_state=67822))]))
('1', Pipeline(steps=[('0',
                 RandomOverSampler(random_state=67822,
                                   sampling_strategy='not majority')),
                ('1',
                 RBFSampler(gamma=0.09389551753430801, n_components=48,
                            random_state=67822)),
                ('2', VarianceThreshold()),
                ('3',
                 ExtraTreesClassifier(class_weight='balanced_subsample',
                                      max_features='log2', min_samples_leaf=8,
                                      min_samples_split=17, n_estimators=95,
                                      random_state=67822))]))
('2', Pipeline(steps=[('0',
                 SMOTE(k_neighbors=2, random_state=67822,
                       sampling_strategy='not minority')),
                ('1', MinMaxScaler()),
                ('2',
                 RandomOverSampler(random_state=67822,
                                   sampling_strategy='not majority')),
                ('3',
                 ExtraTreesClassifier(criterion='entropy', max_features='log2',
                                      min_samples_leaf=17, min_samples_split=9,
                                      n_estimators=24, random_state=67822))]))
('3', Pipeline(steps=[('0',
                 SMOTE(random_state=67822, sampling_strategy='not minority')),
                ('1', Normalizer(norm='max')),
                ('2',
                 RandomOverSampler(random_state=67822,
                                   sampling_strategy='not majority')),
                ('3',
                 ExtraTreesClassifier(class_weight='balanced_subsample',
                                      max_features='log2', min_samples_leaf=8,
                                      min_samples_split=17, n_estimators=95,
                                      random_state=67822))]))
('4', Pipeline(steps=[('0', SimpleImputer()), ('1', StandardScaler(with_std=False)),
                ('2', Normalizer(norm='max')),
                ('3',
                 ExtraTreesClassifier(class_weight='balanced_subsample',
                                      max_features='log2', min_samples_leaf=8,
                                      min_samples_split=17, n_estimators=95,
                                      random_state=67822))]))
('5', Pipeline(steps=[('0',
                 SMOTE(random_state=67822, sampling_strategy='not minority')),
                ('1',
                 SGDClassifier(alpha=0.0002924858816570282, average=True,
                               class_weight='balanced',
                               epsilon=4.210996341882978e-05,
                               eta0=9.199287672774423e-07,
                               l1_ratio=1.65574903868451e-09, loss='perceptron',
                               power_t=0.5076723558374685, random_state=67822,
                               tol=0.06559744771874365))]))
('6', Pipeline(steps=[('0',
                 RandomOverSampler(random_state=67822,
                                   sampling_strategy='not majority')),
                ('1',
                 RBFSampler(gamma=0.09389551753430801, n_components=48,
                            random_state=67822)),
                ('2', StandardScaler()),
                ('3',
                 ExtraTreesClassifier(class_weight='balanced_subsample',
                                      max_features='log2', min_samples_leaf=8,
                                      min_samples_split=17, n_estimators=95,
                                      random_state=67822))]))
('7', Pipeline(steps=[('0',
                 SMOTE(k_neighbors=2, random_state=67822,
                       sampling_strategy='not minority')),
                ('1', StandardScaler(with_std=False)),
                ('2',
                 RandomOverSampler(random_state=67822,
                                   sampling_strategy='not majority')),
                ('3',
                 ExtraTreesClassifier(criterion='entropy', max_features='log2',
                                      min_samples_leaf=17, min_samples_split=9,
                                      n_estimators=24, random_state=67822))]))
('8', Pipeline(steps=[('0', MinMaxScaler()),
                ('1',
                 SMOTE(k_neighbors=2, random_state=67822,
                       sampling_strategy='not majority')),
                ('2',
                 ExtraTreesClassifier(class_weight='balanced',
                                      criterion='entropy', max_features='log2',
                                      min_samples_leaf=17, min_samples_split=8,
                                      n_estimators=48, random_state=67822))]))
('9', Pipeline(steps=[('0', VarianceThreshold()),
                ('1', KNeighborsClassifier(n_neighbors=6, weights='distance'))]))
