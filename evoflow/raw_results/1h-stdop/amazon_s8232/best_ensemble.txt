['Agresti', 'Agresti', 'Agresti', 'Agresti', 'Agresti', 'Agresti', 'Ashbacher', 'Ashbacher', 'Ashbacher', 'Ashbacher', 'Ashbacher', 'Chachra', 'Ashbacher', 'Corn', 'Ashbacher', 'Ashbacher', 'Ashbacher', 'McKee', 'Ashbacher', 'McKee', 'Janson', 'Auken', 'Auken', 'Auken', 'Auken', 'Auken', 'Chachra', 'Auken', 'Auken', 'Auken', 'Blankenship', 'Blankenship', 'Blankenship', 'Blankenship', 'Blankenship', 'Blankenship', 'Brody', 'Brody', 'Bukowsky', 'Brody', 'Brody', 'Brody', 'Brody', 'Brody', 'Brown', 'Mitchell', 'Brown', 'Brown', 'Brown', 'Brown', 'Brown', 'Brown', 'Brown', 'Bukowsky', 'Bukowsky', 'Bukowsky', 'Bukowsky', 'Bukowsky', 'Davisson', 'Bukowsky', 'Bukowsky', 'Bukowsky', 'Bukowsky', 'Bukowsky', 'Bukowsky', 'Calvinnme', 'Calvinnme', 'Calvinnme', 'Calvinnme', 'Nigam', 'Calvinnme', 'Calvinnme', 'CFH', 'CFH', 'CFH', 'CFH', 'Dent', 'CFH', 'CFH', 'CFH', 'CFH', 'CFH', 'CFH', 'Chachra', 'Chachra', 'Chachra', 'Chachra', 'Chachra', 'Chachra', 'Chachra', 'Chachra', 'Chachra', 'Chandler', 'Chandler', 'Chandler', 'Chandler', 'Chandler', 'Chandler', 'Chandler', 'Chell', 'Chell', 'Brody', 'Chell', 'Chell', 'Walters', 'Chell', 'Chell', 'Chell', 'Comdet', 'CFH', 'Cholette', 'Taylor', 'Cholette', 'Cholette', 'Cholette', 'Cholette', 'Cholette', 'Comdet', 'Comdet', 'Comdet', 'Comdet', 'Comdet', 'Comdet', 'Chandler', 'Comdet', 'Agresti', 'Comdet', 'Corn', 'Corn', 'Corn', 'Corn', 'Goonan', 'Corn', 'Corn', 'Grove', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Lovitt', 'Bukowsky', 'Davisson', 'Vision', 'Davisson', 'Davisson', 'Dent', 'Dent', 'Dent', 'Dent', 'Dent', 'Dent', 'Chandler', 'Mark', 'Dent', 'Dent', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Goonan', 'Goonan', 'Goonan', 'Goonan', 'Goonan', 'Goonan', 'Goonan', 'Goonan', 'Goonan', 'Goonan', 'Goonan', 'Grove', 'Grove', 'Chandler', 'Shea', 'Grove', 'Grove', 'Grove', 'McKee', 'Grove', 'Harp', 'Harp', 'Harp', 'Harp', 'Harp', 'Harp', 'Harp', 'Hayes', 'Brody', 'Hayes', 'Hayes', 'Hayes', 'Hayes', 'Hayes', 'Hayes', 'Hayes', 'Janson', 'Janson', 'Janson', 'Janson', 'Janson', 'Janson', 'Janson', 'Janson', 'Robert', 'Johnson', 'Johnson', 'Johnson', 'Johnson', 'Johnson', 'Johnson', 'Mark', 'Kolln', 'Koenig', 'Koenig', 'Koenig', 'Koenig', 'Koenig', 'Koenig', 'Koenig', 'Koenig', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Lawyeraau', 'Lawyeraau', 'Lawyeraau', 'McKee', 'Lawyeraau', 'Messick', 'Lawyeraau', 'Davisson', 'Lawyeraau', 'Lee', 'Lee', 'Chell', 'Nigam', 'Chell', 'Lee', 'Lee', 'Chell', 'Chell', 'Lee', 'Lee', 'Lovitt', 'Lee', 'Agresti', 'Lovitt', 'Agresti', 'Lovitt', 'Lovitt', 'Neal', 'Lovitt', 'Goonan', 'Mahlers2nd', 'Mahlers2nd', 'Mahlers2nd', 'CFH', 'Mahlers2nd', 'Mahlers2nd', 'Mahlers2nd', 'Mahlers2nd', 'Mahlers2nd', 'Riley', 'Mahlers2nd', 'Nigam', 'Mark', 'Mark', 'Mark', 'Mark', 'Mark', 'Mark', 'Mark', 'Mark', 'Messick', 'McKee', 'Agresti', 'McKee', 'McKee', 'Goonan', 'McKee', 'McKee', 'McKee', 'McKee', 'McKee', 'Merritt', 'Merritt', 'Merritt', 'Merritt', 'Merritt', 'Merritt', 'Merritt', 'Merritt', 'Merritt', 'Peterson', 'Merritt', 'Merritt', 'Merritt', 'Messick', 'Messick', 'Messick', 'Messick', 'Lawyeraau', 'Messick', 'Messick', 'Mitchell', 'Mitchell', 'Mitchell', 'Mitchell', 'Mitchell', 'Mitchell', 'Morrison', 'Morrison', 'Morrison', 'Morrison', 'Morrison', 'Morrison', 'Morrison', 'Morrison', 'Morrison', 'Neal', 'Neal', 'Agresti', 'Neal', 'McKee', 'Neal', 'Neal', 'Neal', 'Neal', 'Nigam', 'Nigam', 'Goonan', 'Nigam', 'Nigam', 'Nigam', 'Nigam', 'Peterson', 'Peterson', 'Peterson', 'Power', 'Power', 'Power', 'Power', 'Power', 'Power', 'Power', 'Power', 'Power', 'Corn', 'Riley', 'Riley', 'Riley', 'Riley', 'Riley', 'Riley', 'Riley', 'Corn', 'Cholette', 'Robert', 'Robert', 'Robert', 'Robert', 'Robert', 'Robert', 'Robert', 'Shea', 'Shea', 'Shea', 'Brown', 'Riley', 'Shea', 'Shea', 'Peterson', 'Shea', 'Shea', 'Mahlers2nd', 'Sherwin', 'Sherwin', 'Sherwin', 'Chandler', 'Sherwin', 'Sherwin', 'Chandler', 'Sherwin', 'Sherwin', 'Sherwin', 'Sherwin', 'Brown', 'Taylor', 'Taylor', 'Taylor', 'Taylor', 'Taylor', 'Taylor', 'Taylor', 'Taylor', 'Vernon', 'Vernon', 'Vernon', 'Vernon', 'Vernon', 'Vision', 'Vision', 'Vision', 'Vision', 'Vision', 'Vision', 'Vision', 'Walters', 'Walters', 'Walters', 'Walters', 'Walters', 'Walters', 'Walters', 'Wilson', 'Wilson', 'Wilson', 'Wilson', 'Lovitt', 'Wilson', 'Wilson', 'Wilson', 'Wilson', 'Wilson', 'Wilson', 'Wilson']
{'accuracy_score': 0.8511111111111112, 'balanced_accuracy_score': 0.862218781218781, 'macro_precision_score': 0.8559529914529915, 'macro_recall_score': 0.862218781218781, 'macro_f1_score': 0.8499112234410121, 'micro_precision_score': 0.8511111111111112, 'micro_recall_score': 0.8511111111111112, 'micro_f1_score': 0.8511111111111112}
('0', Pipeline(steps=[('0', MaxAbsScaler()), ('1', MinMaxScaler()),
                ('2',
                 PassiveAggressiveClassifier(C=0.0001494823857929238,
                                             loss='squared_hinge',
                                             random_state=8232))]))
('1', Pipeline(steps=[('0', RobustScaler(with_centering=False, with_scaling=False)),
                ('1', MinMaxScaler()),
                ('2',
                 MLPClassifier(activation='logistic',
                               alpha=0.0003186461777625522,
                               learning_rate_init=0.3608208449192159,
                               random_state=8232, solver='sgd'))]))
('2', Pipeline(steps=[('0', MinMaxScaler()),
                ('1',
                 MLPClassifier(activation='logistic', alpha=0.09205948960184217,
                               learning_rate_init=0.20523206949525172,
                               random_state=8232, solver='lbfgs'))]))
('3', Pipeline(steps=[('0', MinMaxScaler()), ('1', VarianceThreshold()),
                ('2',
                 RandomOverSampler(random_state=8232,
                                   sampling_strategy='minority')),
                ('3',
                 MLPClassifier(activation='tanh', alpha=0.0002508470563634724,
                               learning_rate_init=0.006327646361805942,
                               random_state=8232))]))
('4', Pipeline(steps=[('0', Normalizer(norm='max')), ('1', MaxAbsScaler()),
                ('2',
                 LinearSVC(C=0.0008510040266575999, class_weight='balanced',
                           loss='hinge', random_state=8232,
                           tol=0.0019460026116616006))]))
('5', Pipeline(steps=[('0',
                 LinearSVC(C=0.0008510040266575999, class_weight='balanced',
                           loss='hinge', random_state=8232,
                           tol=0.0019460026116616006))]))
('6', Pipeline(steps=[('0', Normalizer(norm='l1')),
                ('1', BernoulliNB(alpha=0.5451924663571921))]))
('7', Pipeline(steps=[('0', MaxAbsScaler()), ('1', MinMaxScaler()),
                ('2', VarianceThreshold()),
                ('3', BernoulliNB(alpha=0.569867922843641))]))
('8', Pipeline(steps=[('0', VarianceThreshold()),
                ('1', KNNImputer(n_neighbors=7, weights='distance')),
                ('2', MaxAbsScaler()),
                ('3', BernoulliNB(alpha=0.7069900978630724))]))
('9', Pipeline(steps=[('0', StandardScaler(with_std=False)),
                ('1',
                 ExtraTreesClassifier(class_weight='balanced',
                                      max_features='sqrt', min_samples_leaf=6,
                                      min_samples_split=18, n_estimators=54,
                                      random_state=8232))]))
