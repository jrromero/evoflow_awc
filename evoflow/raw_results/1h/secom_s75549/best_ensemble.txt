
{'accuracy_score': 0.8319148936170213, 'balanced_accuracy_score': 0.612165283065976, 'macro_precision_score': 0.565737489025461, 'macro_recall_score': 0.612165283065976, 'macro_f1_score': 0.5765041345879669, 'micro_precision_score': 0.8319148936170213, 'micro_recall_score': 0.8319148936170213, 'micro_f1_score': 0.8319148936170212}
('0', Pipeline(steps=[('0', SimpleImputer(strategy='most_frequent')),
                ('1',
                 SMOTE(k_neighbors=4, random_state=75549,
                       sampling_strategy='minority')),
                ('2', VarianceThreshold()),
                ('3',
                 AdaBoostClassifier(algorithm='SAMME',
                                    learning_rate=0.3624095753271329,
                                    n_estimators=94, random_state=75549))]))
('1', Pipeline(steps=[('0', SimpleImputer(strategy='most_frequent')),
                ('1',
                 SMOTE(k_neighbors=4, random_state=75549,
                       sampling_strategy='minority')),
                ('2', VarianceThreshold()),
                ('3',
                 AdaBoostClassifier(learning_rate=0.3624095753271329,
                                    n_estimators=58, random_state=75549))]))
('2', Pipeline(steps=[('0', SimpleImputer(strategy='most_frequent')),
                ('1', SMOTE(random_state=75549, sampling_strategy='minority')),
                ('2', VarianceThreshold()),
                ('3',
                 AdaBoostClassifier(algorithm='SAMME',
                                    learning_rate=0.3624095753271329,
                                    n_estimators=25, random_state=75549))]))
('3', Pipeline(steps=[('0', MinMaxScaler()), ('1', VarianceThreshold()),
                ('2', KNNImputer(n_neighbors=7)),
                ('3',
                 LinearSVC(C=0.023297724853768912, class_weight='balanced',
                           dual=False, penalty='l1', random_state=75549,
                           tol=0.0017119617405402532))]))
('4', Pipeline(steps=[('0', MinMaxScaler()), ('1', KNNImputer(n_neighbors=9)),
                ('2', GaussianNB(var_smoothing=0.009308592183600504))]))
('5', Pipeline(steps=[('0', SimpleImputer(strategy='most_frequent')),
                ('1',
                 SMOTE(k_neighbors=4, random_state=75549,
                       sampling_strategy='minority')),
                ('2', VarianceThreshold()),
                ('3',
                 AdaBoostClassifier(learning_rate=1.7744515103935599,
                                    n_estimators=58, random_state=75549))]))
('6', Pipeline(steps=[('0', SimpleImputer(strategy='median')),
                ('1',
                 SMOTE(k_neighbors=4, random_state=75549,
                       sampling_strategy='minority')),
                ('2', VarianceThreshold()),
                ('3',
                 AdaBoostClassifier(learning_rate=1.7744515103935599,
                                    n_estimators=97, random_state=75549))]))
('7', Pipeline(steps=[('0', SimpleImputer()),
                ('1', SelectPercentile(percentile=24.734570595632444)),
                ('2', GaussianNB(var_smoothing=1.3380149095341361e-05))]))
('8', Pipeline(steps=[('0', MinMaxScaler()), ('1', KNNImputer(n_neighbors=6)),
                ('2', GaussianNB(var_smoothing=0.00010674125361612444))]))
('9', Pipeline(steps=[('0', MinMaxScaler()),
                ('1', KNNImputer(n_neighbors=8, weights='distance')),
                ('2', GaussianNB(var_smoothing=0.004080282355520703))]))
