
{'accuracy_score': 1.0, 'balanced_accuracy_score': 1.0, 'macro_precision_score': 1.0, 'macro_recall_score': 1.0, 'macro_f1_score': 1.0, 'micro_precision_score': 1.0, 'micro_recall_score': 1.0, 'micro_f1_score': 1.0}
('0', Pipeline(steps=[('0', Normalizer()),
                ('1', KNeighborsClassifier(n_neighbors=2))]))
('1', Pipeline(steps=[('0', Normalizer(norm='l1')),
                ('1', KNeighborsClassifier(n_neighbors=2))]))
('2', Pipeline(steps=[('0', MinMaxScaler()), ('1', Normalizer(norm='l1')),
                ('2', KNeighborsClassifier(n_neighbors=3, p=1))]))
('3', Pipeline(steps=[('0', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(n_clusters=12)), ('2', Normalizer()),
                ('3', KNeighborsClassifier(n_neighbors=45, p=1))]))
('4', Pipeline(steps=[('0', SimpleImputer(strategy='median')),
                ('1', FeatureAgglomeration(n_clusters=12)), ('2', Normalizer()),
                ('3',
                 RandomForestClassifier(class_weight='balanced',
                                        criterion='entropy',
                                        max_features='sqrt',
                                        min_samples_leaf=19,
                                        min_samples_split=17, n_estimators=50,
                                        random_state=0))]))
('5', Pipeline(steps=[('0', Normalizer(norm='max')), ('1', RobustScaler()),
                ('2', MaxAbsScaler()),
                ('3', KNeighborsClassifier(n_neighbors=2, weights='distance'))]))
('6', Pipeline(steps=[('0', Normalizer(norm='max')),
                ('1', RobustScaler(with_centering=False)),
                ('2', KNeighborsClassifier(n_neighbors=3))]))
('7', Pipeline(steps=[('0', Normalizer(norm='max')), ('1', RobustScaler()),
                ('2', MaxAbsScaler()),
                ('3', KNeighborsClassifier(n_neighbors=1, weights='distance'))]))
('8', Pipeline(steps=[('0', Normalizer(norm='l1')), ('1', RobustScaler()),
                ('2', KNeighborsClassifier(p=1))]))
('9', Pipeline(steps=[('0', Normalizer(norm='l1')),
                ('1', KNeighborsClassifier(n_neighbors=4, weights='distance'))]))
