['Agresti', 'Agresti', 'Agresti', 'Agresti', 'Agresti', 'Agresti', 'Ashbacher', 'Ashbacher', 'Ashbacher', 'McKee', 'Ashbacher', 'Chachra', 'Ashbacher', 'Power', 'Ashbacher', 'Ashbacher', 'Ashbacher', 'Blankenship', 'Ashbacher', 'McKee', 'Auken', 'Auken', 'Auken', 'Auken', 'Auken', 'Auken', 'Chachra', 'Auken', 'Auken', 'Auken', 'Blankenship', 'Blankenship', 'Blankenship', 'Blankenship', 'Blankenship', 'Blankenship', 'Brody', 'Brody', 'Bukowsky', 'Brody', 'Brody', 'Brody', 'Brody', 'Morrison', 'Brown', 'Mitchell', 'Brown', 'Brown', 'Brown', 'Brown', 'Brown', 'McKee', 'Brown', 'Bukowsky', 'Bukowsky', 'Bukowsky', 'Bukowsky', 'Bukowsky', 'Vernon', 'Comdet', 'Bukowsky', 'Bukowsky', 'Bukowsky', 'Bukowsky', 'Bukowsky', 'Calvinnme', 'Calvinnme', 'Peterson', 'Calvinnme', 'Koenig', 'Calvinnme', 'Calvinnme', 'CFH', 'CFH', 'CFH', 'CFH', 'Dent', 'CFH', 'CFH', 'CFH', 'CFH', 'CFH', 'CFH', 'Chachra', 'Chachra', 'Chachra', 'Chachra', 'Chachra', 'Chachra', 'Chachra', 'Chachra', 'Chachra', 'Chandler', 'Chandler', 'Chandler', 'Chandler', 'Chandler', 'Chandler', 'Chandler', 'Chell', 'Chell', 'Chell', 'Chell', 'Chell', 'Walters', 'Chell', 'Chell', 'Chell', 'Comdet', 'CFH', 'Cholette', 'Taylor', 'Cholette', 'Cholette', 'Cholette', 'Cholette', 'Cholette', 'Comdet', 'Comdet', 'Comdet', 'Comdet', 'Comdet', 'Comdet', 'Chandler', 'Comdet', 'Agresti', 'Comdet', 'Corn', 'Corn', 'Corn', 'Corn', 'Goonan', 'Corn', 'Corn', 'Grove', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Lovitt', 'Bukowsky', 'Davisson', 'Peterson', 'Davisson', 'Davisson', 'Dent', 'Dent', 'Dent', 'Dent', 'Dent', 'Dent', 'Chandler', 'Mark', 'Dent', 'Dent', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Goonan', 'Goonan', 'Goonan', 'Goonan', 'Goonan', 'Goonan', 'Goonan', 'Goonan', 'Goonan', 'Goonan', 'Goonan', 'Grove', 'Grove', 'Chandler', 'Shea', 'Grove', 'Grove', 'Grove', 'McKee', 'Grove', 'Harp', 'Harp', 'Harp', 'Harp', 'Harp', 'Harp', 'Harp', 'Hayes', 'Brody', 'Hayes', 'Hayes', 'Hayes', 'Hayes', 'Hayes', 'Hayes', 'Hayes', 'Janson', 'Janson', 'Janson', 'Janson', 'Janson', 'Janson', 'Janson', 'Lovitt', 'Calvinnme', 'Johnson', 'Johnson', 'Johnson', 'Johnson', 'Johnson', 'Johnson', 'Mark', 'Kolln', 'Koenig', 'Koenig', 'Koenig', 'Koenig', 'Koenig', 'Koenig', 'Koenig', 'Mitchell', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Lawyeraau', 'Lawyeraau', 'Lawyeraau', 'McKee', 'Lawyeraau', 'Messick', 'Lawyeraau', 'Robert', 'Peterson', 'Chell', 'Chandler', 'Chell', 'Nigam', 'Mahlers2nd', 'Lee', 'Wilson', 'Chell', 'Chell', 'Lee', 'Lee', 'Lovitt', 'Agresti', 'Chell', 'Lovitt', 'Chell', 'Lovitt', 'Lovitt', 'Lovitt', 'Lovitt', 'Goonan', 'Mahlers2nd', 'Mahlers2nd', 'Mahlers2nd', 'Mahlers2nd', 'Davisson', 'Mahlers2nd', 'Mahlers2nd', 'Mahlers2nd', 'Mahlers2nd', 'Riley', 'Mahlers2nd', 'Nigam', 'Mark', 'Mark', 'Mark', 'Mark', 'Mark', 'Mark', 'Mark', 'Mark', 'Messick', 'McKee', 'McKee', 'McKee', 'Comdet', 'Goonan', 'McKee', 'McKee', 'McKee', 'McKee', 'McKee', 'Merritt', 'Merritt', 'Merritt', 'Merritt', 'Merritt', 'Merritt', 'Merritt', 'Merritt', 'Merritt', 'Peterson', 'Merritt', 'Merritt', 'Merritt', 'Messick', 'Messick', 'Messick', 'Messick', 'Lawyeraau', 'Messick', 'Messick', 'Mitchell', 'Mitchell', 'Mitchell', 'Mitchell', 'Mitchell', 'Mitchell', 'Morrison', 'Morrison', 'Morrison', 'Morrison', 'Morrison', 'Morrison', 'Morrison', 'Morrison', 'Morrison', 'Neal', 'Neal', 'Agresti', 'Neal', 'Neal', 'Neal', 'Neal', 'Neal', 'Neal', 'Nigam', 'Nigam', 'Vernon', 'Nigam', 'Nigam', 'Koenig', 'Nigam', 'Peterson', 'Peterson', 'Peterson', 'Lovitt', 'Power', 'Power', 'Power', 'Power', 'Power', 'Power', 'Power', 'Power', 'Corn', 'Riley', 'Riley', 'Riley', 'Riley', 'Riley', 'Riley', 'Riley', 'Corn', 'Robert', 'Robert', 'Robert', 'Robert', 'Bukowsky', 'Robert', 'Robert', 'Robert', 'Shea', 'Shea', 'Shea', 'Brown', 'Shea', 'Shea', 'Shea', 'Lovitt', 'Shea', 'Shea', 'Chandler', 'Sherwin', 'Lee', 'Sherwin', 'Chandler', 'Sherwin', 'Sherwin', 'Sherwin', 'Sherwin', 'Sherwin', 'Sherwin', 'Sherwin', 'Brown', 'Taylor', 'Taylor', 'Taylor', 'Taylor', 'Taylor', 'Taylor', 'Taylor', 'Taylor', 'Vernon', 'Wilson', 'Vernon', 'Vernon', 'Vernon', 'Vision', 'Vision', 'Vision', 'Vision', 'Vision', 'Vision', 'Vision', 'Walters', 'Walters', 'Walters', 'Walters', 'Walters', 'Walters', 'Walters', 'Wilson', 'Wilson', 'Wilson', 'Wilson', 'Lovitt', 'Wilson', 'Wilson', 'Wilson', 'Wilson', 'Wilson', 'Wilson', 'Wilson']
{'accuracy_score': 0.8288888888888889, 'balanced_accuracy_score': 0.8391055056055056, 'macro_precision_score': 0.8346465201465202, 'macro_recall_score': 0.8391055056055056, 'macro_f1_score': 0.8237943485210144, 'micro_precision_score': 0.8288888888888889, 'micro_recall_score': 0.8288888888888889, 'micro_f1_score': 0.8288888888888889}
('0', Pipeline(steps=[('0', MinMaxScaler()), ('1', VarianceThreshold()),
                ('2',
                 LinearSVC(C=0.4675030348024583, class_weight='balanced',
                           loss='hinge', random_state=9,
                           tol=0.007879316504919028))]))
('1', Pipeline(steps=[('0', MinMaxScaler()),
                ('1',
                 LogisticRegression(C=16.883376219480414,
                                    class_weight='balanced', random_state=9))]))
('2', Pipeline(steps=[('0', RobustScaler()), ('1', VarianceThreshold()),
                ('2',
                 LinearSVC(C=0.7020288895071416, class_weight='balanced',
                           dual=False, random_state=9,
                           tol=0.0002797268960351546))]))
('3', Pipeline(steps=[('0', MinMaxScaler()), ('1', MaxAbsScaler()),
                ('2',
                 MultinomialNB(alpha=0.3007912024350419, fit_prior=False))]))
('4', Pipeline(steps=[('0', MultinomialNB(alpha=0.03299715117737347))]))
('5', Pipeline(steps=[('0', VarianceThreshold()), ('1', MinMaxScaler()),
                ('2', MaxAbsScaler()),
                ('3',
                 MLPClassifier(alpha=0.0009723203103565338,
                               learning_rate_init=0.00465297756562392,
                               random_state=9, solver='sgd'))]))
('6', Pipeline(steps=[('0', VarianceThreshold()),
                ('1', SMOTE(random_state=9, sampling_strategy='not majority')),
                ('2', MaxAbsScaler()),
                ('3',
                 MLPClassifier(alpha=0.0009723203103565338,
                               learning_rate_init=0.00465297756562392,
                               random_state=9, solver='sgd'))]))
('7', Pipeline(steps=[('0', BernoulliNB(alpha=0.05873133743170333))]))
('8', Pipeline(steps=[('0', VarianceThreshold()), ('1', MinMaxScaler()),
                ('2', BernoulliNB(alpha=0.28167806274583035))]))
('9', Pipeline(steps=[('0', SelectPercentile(percentile=40.460989430363846)),
                ('1', SelectFwe(alpha=0.03233972601264469)),
                ('2', MultinomialNB(alpha=1.679095254388339, fit_prior=False))]))
