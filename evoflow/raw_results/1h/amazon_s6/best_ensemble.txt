['Agresti', 'Agresti', 'Agresti', 'Agresti', 'Agresti', 'Agresti', 'Ashbacher', 'Ashbacher', 'Ashbacher', 'Ashbacher', 'Ashbacher', 'Cholette', 'Ashbacher', 'Power', 'Ashbacher', 'Ashbacher', 'Ashbacher', 'Riley', 'Ashbacher', 'Vision', 'Auken', 'Auken', 'Auken', 'Auken', 'Auken', 'Auken', 'Chachra', 'Auken', 'Auken', 'Auken', 'Blankenship', 'Blankenship', 'Blankenship', 'Blankenship', 'Blankenship', 'Blankenship', 'Brody', 'Brody', 'Bukowsky', 'Brody', 'Brody', 'Brody', 'Brody', 'Brody', 'Brown', 'Mitchell', 'Brown', 'Brown', 'Brown', 'Brown', 'Brown', 'Brown', 'Brown', 'Bukowsky', 'Bukowsky', 'Bukowsky', 'Bukowsky', 'Bukowsky', 'Vernon', 'Bukowsky', 'Bukowsky', 'Bukowsky', 'Bukowsky', 'Bukowsky', 'Bukowsky', 'Calvinnme', 'Calvinnme', 'Calvinnme', 'Calvinnme', 'Koenig', 'Calvinnme', 'Calvinnme', 'CFH', 'CFH', 'CFH', 'CFH', 'Dent', 'CFH', 'CFH', 'CFH', 'CFH', 'CFH', 'CFH', 'Chachra', 'Chachra', 'Chachra', 'Chachra', 'Chachra', 'Chachra', 'Chachra', 'Chachra', 'Chachra', 'Chandler', 'Chandler', 'Chandler', 'Chandler', 'Chandler', 'Chandler', 'Chandler', 'Chell', 'Chell', 'Chell', 'Chell', 'Chell', 'Walters', 'Chell', 'Chell', 'Chell', 'Chell', 'CFH', 'Cholette', 'Cholette', 'Cholette', 'Cholette', 'Cholette', 'Cholette', 'Cholette', 'Comdet', 'Comdet', 'Comdet', 'Comdet', 'Comdet', 'Comdet', 'Chandler', 'Comdet', 'Agresti', 'Comdet', 'Corn', 'Corn', 'Corn', 'Corn', 'Goonan', 'Goonan', 'Corn', 'Grove', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Lovitt', 'Bukowsky', 'Davisson', 'Vision', 'Davisson', 'Davisson', 'Dent', 'Dent', 'Dent', 'Dent', 'Dent', 'Dent', 'Dent', 'Engineer', 'Dent', 'Dent', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Goonan', 'Goonan', 'Goonan', 'Goonan', 'Goonan', 'Goonan', 'Goonan', 'Goonan', 'Goonan', 'Koenig', 'Goonan', 'Chachra', 'Grove', 'Chandler', 'Shea', 'Grove', 'Grove', 'Grove', 'Chachra', 'Grove', 'Harp', 'Harp', 'Harp', 'Harp', 'Harp', 'Harp', 'Harp', 'Hayes', 'Brody', 'Hayes', 'Hayes', 'Hayes', 'Hayes', 'Johnson', 'Hayes', 'Hayes', 'Janson', 'Janson', 'Janson', 'Kolln', 'Janson', 'Janson', 'Janson', 'Lovitt', 'Janson', 'Johnson', 'Johnson', 'Johnson', 'Johnson', 'Johnson', 'Johnson', 'Mark', 'Kolln', 'Koenig', 'Koenig', 'Koenig', 'Koenig', 'Koenig', 'Koenig', 'Koenig', 'Koenig', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Lawyeraau', 'Lawyeraau', 'Lawyeraau', 'Lawyeraau', 'Lawyeraau', 'Lawyeraau', 'Lawyeraau', 'Davisson', 'Peterson', 'Lee', 'Chandler', 'Chell', 'Lee', 'Chell', 'Bukowsky', 'Wilson', 'Chell', 'Lee', 'Lee', 'Lee', 'Lovitt', 'Lee', 'Chell', 'Lovitt', 'Chell', 'Lovitt', 'Lovitt', 'Lovitt', 'Lovitt', 'Goonan', 'Mahlers2nd', 'Mahlers2nd', 'Mahlers2nd', 'CFH', 'Mahlers2nd', 'Mahlers2nd', 'Mahlers2nd', 'Mahlers2nd', 'Mahlers2nd', 'Riley', 'Mahlers2nd', 'Nigam', 'Mark', 'Mark', 'Mark', 'Mark', 'Mark', 'Mark', 'Mark', 'Mark', 'Messick', 'McKee', 'McKee', 'McKee', 'Comdet', 'Goonan', 'McKee', 'McKee', 'McKee', 'McKee', 'McKee', 'Merritt', 'Merritt', 'Merritt', 'Merritt', 'Merritt', 'Merritt', 'Merritt', 'Merritt', 'Merritt', 'Merritt', 'Merritt', 'Merritt', 'Merritt', 'Messick', 'Messick', 'Messick', 'Messick', 'Lawyeraau', 'Messick', 'Peterson', 'Mitchell', 'Mitchell', 'Mitchell', 'Mitchell', 'Mitchell', 'Mitchell', 'Morrison', 'Morrison', 'Morrison', 'Morrison', 'Morrison', 'Morrison', 'Morrison', 'Morrison', 'Morrison', 'Neal', 'Neal', 'Agresti', 'Neal', 'Brody', 'Neal', 'Neal', 'Neal', 'Neal', 'Nigam', 'Nigam', 'Vernon', 'Nigam', 'Nigam', 'Koenig', 'Nigam', 'Peterson', 'Peterson', 'Peterson', 'Power', 'Power', 'Power', 'Power', 'Power', 'Power', 'Power', 'Power', 'Power', 'Riley', 'Riley', 'Riley', 'Riley', 'Riley', 'Riley', 'Riley', 'Riley', 'Wilson', 'Robert', 'Robert', 'Robert', 'Robert', 'Bukowsky', 'Robert', 'Robert', 'Robert', 'Shea', 'Shea', 'Shea', 'Cutey', 'Nigam', 'Shea', 'Shea', 'Lovitt', 'Shea', 'Shea', 'Chandler', 'Sherwin', 'Sherwin', 'Sherwin', 'Sherwin', 'Sherwin', 'Sherwin', 'Sherwin', 'Sherwin', 'Sherwin', 'Sherwin', 'Sherwin', 'Vision', 'Taylor', 'Taylor', 'Taylor', 'Taylor', 'Taylor', 'Taylor', 'Taylor', 'Taylor', 'Vernon', 'Vernon', 'Vernon', 'Vernon', 'Vernon', 'Vision', 'Vision', 'Goonan', 'Vision', 'Vision', 'Vision', 'Engineer', 'Walters', 'Walters', 'Walters', 'Walters', 'Walters', 'Walters', 'Walters', 'Wilson', 'Wilson', 'Wilson', 'Wilson', 'Lovitt', 'Wilson', 'Wilson', 'Wilson', 'Wilson', 'Wilson', 'Wilson', 'Wilson']
{'accuracy_score': 0.8511111111111112, 'balanced_accuracy_score': 0.8577692307692307, 'macro_precision_score': 0.859493117993118, 'macro_recall_score': 0.8577692307692307, 'macro_f1_score': 0.8473411873738701, 'micro_precision_score': 0.8511111111111112, 'micro_recall_score': 0.8511111111111112, 'micro_f1_score': 0.8511111111111112}
('0', Pipeline(steps=[('0', MaxAbsScaler()),
                ('1',
                 LinearSVC(C=0.0736565978053462, class_weight='balanced',
                           random_state=6, tol=0.029698795061349845))]))
('1', Pipeline(steps=[('0', VarianceThreshold()), ('1', MaxAbsScaler()),
                ('2',
                 LinearSVC(C=7.411002118197225, class_weight='balanced',
                           random_state=6, tol=0.00011422133362409182))]))
('2', Pipeline(steps=[('0',
                 SMOTETomek(random_state=6, sampling_strategy='not majority')),
                ('1', MaxAbsScaler()),
                ('2',
                 SGDClassifier(alpha=0.029476580583255994,
                               epsilon=4.140271830178362e-05,
                               eta0=0.024862943246286982,
                               l1_ratio=1.9966076887570383e-07,
                               power_t=0.011401776633302716, random_state=6,
                               tol=0.0002115904549084885))]))
('3', Pipeline(steps=[('0', MaxAbsScaler()),
                ('1',
                 SGDClassifier(alpha=0.03968989316818791,
                               epsilon=1.1804413818473912e-05,
                               eta0=0.0008105624708465149,
                               l1_ratio=2.4908606714131184e-05,
                               power_t=0.9162302848894605, random_state=6,
                               tol=0.02767032116129565))]))
('4', Pipeline(steps=[('0',
                 RandomForestClassifier(max_features='sqrt', min_samples_leaf=2,
                                        min_samples_split=15, n_estimators=95,
                                        random_state=6))]))
('5', Pipeline(steps=[('0', MaxAbsScaler()),
                ('1',
                 RandomUnderSampler(random_state=6,
                                    sampling_strategy='not majority')),
                ('2', VarianceThreshold()), ('3', MinMaxScaler()),
                ('4',
                 MLPClassifier(activation='tanh', alpha=0.00044011705707039053,
                               learning_rate_init=0.0028521216623423338,
                               random_state=6, solver='sgd'))]))
('6', Pipeline(steps=[('0',
                 SMOTE(k_neighbors=4, random_state=6,
                       sampling_strategy='not minority')),
                ('1', SimpleImputer()),
                ('2',
                 PassiveAggressiveClassifier(C=0.2627903951143095,
                                             random_state=6))]))
('7', Pipeline(steps=[('0', MinMaxScaler()), ('1', MaxAbsScaler()),
                ('2',
                 RandomForestClassifier(bootstrap=False,
                                        class_weight='balanced',
                                        max_features='sqrt',
                                        min_samples_leaf=17,
                                        min_samples_split=18, n_estimators=55,
                                        random_state=6))]))
('8', Pipeline(steps=[('0',
                 SMOTE(k_neighbors=2, random_state=6,
                       sampling_strategy='not minority')),
                ('1', VarianceThreshold()),
                ('2',
                 PassiveAggressiveClassifier(C=1.2527049495670804e-05,
                                             fit_intercept=False,
                                             random_state=6))]))
('9', Pipeline(steps=[('0',
                 RandomUnderSampler(random_state=6,
                                    sampling_strategy='not majority')),
                ('1',
                 ExtraTreesClassifier(class_weight='balanced_subsample',
                                      max_features='sqrt', min_samples_leaf=6,
                                      min_samples_split=7, n_estimators=82,
                                      random_state=6))]))
