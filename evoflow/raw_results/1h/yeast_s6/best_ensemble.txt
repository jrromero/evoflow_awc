['POX', 'NUC', 'NUC', 'CYT', 'CYT', 'EXC', 'CYT', 'NUC', 'MIT', 'ME1', 'EXC', 'ME2', 'MIT', 'ME1', 'CYT', 'NUC', 'CYT', 'MIT', 'MIT', 'NUC', 'ME3', 'CYT', 'CYT', 'ME1', 'MIT', 'MIT', 'MIT', 'POX', 'ME3', 'MIT', 'ME1', 'ME3', 'CYT', 'CYT', 'EXC', 'POX', 'NUC', 'MIT', 'CYT', 'MIT', 'ME3', 'NUC', 'NUC', 'CYT', 'NUC', 'CYT', 'MIT', 'NUC', 'CYT', 'NUC', 'CYT', 'NUC', 'NUC', 'MIT', 'CYT', 'MIT', 'POX', 'NUC', 'CYT', 'ME1', 'ME1', 'MIT', 'MIT', 'ME3', 'MIT', 'MIT', 'MIT', 'EXC', 'CYT', 'NUC', 'EXC', 'VAC', 'CYT', 'ME2', 'CYT', 'NUC', 'EXC', 'EXC', 'CYT', 'CYT', 'CYT', 'CYT', 'ME3', 'POX', 'CYT', 'NUC', 'CYT', 'NUC', 'MIT', 'CYT', 'ME3', 'NUC', 'ME3', 'CYT', 'ME3', 'NUC', 'CYT', 'ME2', 'CYT', 'CYT', 'ME3', 'ME3', 'NUC', 'EXC', 'ERL', 'NUC', 'CYT', 'ME3', 'ME3', 'POX', 'ME3', 'ME1', 'ME1', 'CYT', 'ME3', 'ME3', 'ME1', 'NUC', 'NUC', 'NUC', 'MIT', 'ME3', 'MIT', 'NUC', 'ME3', 'NUC', 'NUC', 'CYT', 'ME3', 'CYT', 'CYT', 'NUC', 'ME2', 'ME2', 'NUC', 'NUC', 'MIT', 'NUC', 'CYT', 'CYT', 'NUC', 'MIT', 'NUC', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'ME3', 'NUC', 'CYT', 'CYT', 'MIT', 'MIT', 'MIT', 'NUC', 'CYT', 'ME3', 'ME3', 'CYT', 'MIT', 'MIT', 'CYT', 'MIT', 'CYT', 'NUC', 'ME1', 'ME3', 'NUC', 'MIT', 'ME1', 'NUC', 'ERL', 'MIT', 'ME3', 'ME2', 'ME2', 'CYT', 'NUC', 'NUC', 'ME3', 'ME3', 'ME2', 'NUC', 'NUC', 'NUC', 'ME3', 'ME2', 'CYT', 'MIT', 'MIT', 'MIT', 'MIT', 'CYT', 'CYT', 'MIT', 'ME3', 'NUC', 'NUC', 'MIT', 'CYT', 'NUC', 'NUC', 'NUC', 'MIT', 'MIT', 'MIT', 'MIT', 'CYT', 'CYT', 'NUC', 'MIT', 'MIT', 'ME3', 'MIT', 'NUC', 'CYT', 'MIT', 'CYT', 'MIT', 'ME3', 'NUC', 'ME3', 'ME2', 'ME3', 'MIT', 'NUC', 'ME3', 'CYT', 'ME2', 'NUC', 'CYT', 'EXC', 'NUC', 'ME2', 'ME3', 'ME1', 'CYT', 'NUC', 'CYT', 'MIT', 'CYT', 'CYT', 'CYT', 'NUC', 'ME3', 'NUC', 'POX', 'VAC', 'MIT', 'NUC', 'POX', 'MIT', 'CYT', 'EXC', 'CYT', 'CYT', 'NUC', 'CYT', 'ME1', 'ME2', 'ME3', 'NUC', 'NUC', 'CYT', 'CYT', 'ME3', 'CYT', 'ME2', 'MIT', 'CYT', 'NUC', 'CYT', 'MIT', 'NUC', 'CYT', 'NUC', 'NUC', 'CYT', 'CYT', 'MIT', 'NUC', 'NUC', 'CYT', 'ME3', 'CYT', 'ME2', 'CYT', 'NUC', 'CYT', 'MIT', 'NUC', 'NUC', 'MIT', 'NUC', 'NUC', 'MIT', 'CYT', 'NUC', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'NUC', 'ME3', 'CYT', 'CYT', 'NUC', 'NUC', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'MIT', 'CYT', 'MIT', 'NUC', 'MIT', 'CYT', 'CYT', 'CYT', 'MIT', 'MIT', 'CYT', 'MIT', 'MIT', 'MIT', 'EXC', 'POX', 'NUC', 'CYT', 'CYT', 'CYT', 'NUC', 'ME3', 'ME3', 'CYT', 'EXC', 'NUC', 'MIT', 'MIT', 'NUC', 'CYT', 'CYT', 'ME3', 'CYT', 'NUC', 'NUC', 'ME3', 'ME3', 'NUC', 'MIT', 'ME3', 'CYT', 'CYT', 'ME3', 'MIT', 'NUC', 'NUC', 'CYT', 'CYT', 'CYT', 'CYT', 'NUC', 'NUC', 'CYT', 'MIT', 'NUC', 'NUC', 'ME3', 'ME3', 'EXC', 'ME3', 'ME1', 'NUC', 'MIT', 'NUC', 'NUC', 'EXC', 'CYT', 'CYT', 'CYT', 'MIT', 'CYT', 'CYT', 'CYT', 'CYT', 'NUC', 'NUC', 'NUC', 'CYT', 'MIT', 'NUC', 'NUC', 'NUC', 'NUC', 'CYT', 'ME1', 'ME1', 'CYT', 'NUC', 'CYT', 'CYT', 'NUC', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'ME3', 'CYT', 'NUC', 'CYT', 'ME1', 'CYT', 'ME1', 'NUC', 'ME1', 'CYT', 'ME3', 'POX', 'ME1', 'ME3', 'ME3', 'ME3', 'ME3', 'ME3', 'ME3', 'MIT', 'NUC', 'ME3', 'MIT', 'NUC', 'CYT', 'CYT', 'NUC', 'CYT', 'ME2']
{'accuracy_score': 0.6, 'balanced_accuracy_score': 0.6184728978697769, 'macro_precision_score': 0.5687149346705473, 'macro_recall_score': 0.5566256080827992, 'macro_f1_score': 0.5401055417279326, 'micro_precision_score': 0.6, 'micro_recall_score': 0.6, 'micro_f1_score': 0.6}
('0', Pipeline(steps=[('0',
                 ExtraTreesClassifier(class_weight='balanced',
                                      max_features='log2', min_samples_split=20,
                                      n_estimators=54, random_state=6))]))
('1', Pipeline(steps=[('0', VarianceThreshold()),
                ('1',
                 ExtraTreesClassifier(bootstrap=True,
                                      class_weight='balanced_subsample',
                                      criterion='entropy', max_features='log2',
                                      min_samples_split=20, n_estimators=85,
                                      random_state=6))]))
('2', Pipeline(steps=[('0', MinMaxScaler()), ('1', MaxAbsScaler()),
                ('2',
                 FastICA(algorithm='deflation', n_components=85,
                         random_state=6)),
                ('3', VarianceThreshold()),
                ('4',
                 ExtraTreesClassifier(class_weight='balanced',
                                      max_features='sqrt', min_samples_split=20,
                                      n_estimators=99, random_state=6))]))
('3', Pipeline(steps=[('0', MaxAbsScaler()),
                ('1',
                 RandomForestClassifier(class_weight='balanced',
                                        criterion='entropy',
                                        max_features='log2',
                                        min_samples_split=11, n_estimators=50,
                                        random_state=6))]))
('4', Pipeline(steps=[('0', SMOTE(random_state=6, sampling_strategy='not minority')),
                ('1', MaxAbsScaler()),
                ('2',
                 SGDClassifier(alpha=3.7322251735351336e-06,
                               class_weight='balanced',
                               epsilon=0.002814601320748469,
                               eta0=1.2681206606674672e-06,
                               l1_ratio=5.709267488854124e-09,
                               loss='squared_hinge', power_t=0.666011460885452,
                               random_state=6, tol=0.04201690972213784))]))
('5', Pipeline(steps=[('0',
                 RBFSampler(gamma=0.0016083321573203146, n_components=22,
                            random_state=6)),
                ('1', SimpleImputer(strategy='most_frequent')),
                ('2', MinMaxScaler()),
                ('3',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy',
                                        max_features='log2', min_samples_leaf=2,
                                        min_samples_split=16, n_estimators=60,
                                        random_state=6))]))
('6', Pipeline(steps=[('0',
                 RBFSampler(gamma=0.013592797315965813, n_components=32,
                            random_state=6)),
                ('1', SimpleImputer(strategy='most_frequent')),
                ('2', MinMaxScaler()),
                ('3',
                 RandomForestClassifier(class_weight='balanced',
                                        max_features='sqrt', min_samples_leaf=3,
                                        min_samples_split=19, n_estimators=93,
                                        random_state=6))]))
('7', Pipeline(steps=[('0', MaxAbsScaler()),
                ('1',
                 ExtraTreesClassifier(class_weight='balanced_subsample',
                                      max_features='log2', min_samples_split=20,
                                      n_estimators=54, random_state=6))]))
('8', Pipeline(steps=[('0',
                 RBFSampler(gamma=0.2468264467458805, n_components=25,
                            random_state=6)),
                ('1', SimpleImputer()), ('2', MinMaxScaler()),
                ('3',
                 ExtraTreesClassifier(class_weight='balanced',
                                      max_features='log2', min_samples_split=20,
                                      n_estimators=54, random_state=6))]))
('9', Pipeline(steps=[('0', MaxAbsScaler()), ('1', SimpleImputer()),
                ('2', MinMaxScaler()),
                ('3',
                 RandomForestClassifier(class_weight='balanced',
                                        max_features='sqrt', min_samples_leaf=2,
                                        min_samples_split=9, n_estimators=73,
                                        random_state=6))]))
