['Agresti', 'Agresti', 'Agresti', 'Agresti', 'Agresti', 'Agresti', 'Ashbacher', 'Ashbacher', 'Ashbacher', 'Ashbacher', 'Ashbacher', 'Cholette', 'Ashbacher', 'Power', 'Ashbacher', 'Ashbacher', 'Ashbacher', 'Riley', 'Ashbacher', 'Vision', 'Lee', 'Auken', 'Auken', 'Auken', 'Auken', 'Auken', 'Chell', 'Auken', 'Auken', 'Auken', 'Blankenship', 'Blankenship', 'Blankenship', 'Blankenship', 'Blankenship', 'Blankenship', 'Brody', 'Brody', 'Bukowsky', 'Brody', 'Brody', 'Brody', 'Brody', 'Morrison', 'Brown', 'Mitchell', 'Brown', 'Brown', 'Brown', 'Brown', 'Brown', 'Brown', 'Brown', 'Bukowsky', 'Bukowsky', 'Bukowsky', 'Bukowsky', 'Bukowsky', 'Vernon', 'Bukowsky', 'Bukowsky', 'Bukowsky', 'Bukowsky', 'Bukowsky', 'Bukowsky', 'Calvinnme', 'Calvinnme', 'Calvinnme', 'Calvinnme', 'Koenig', 'Calvinnme', 'Calvinnme', 'CFH', 'CFH', 'CFH', 'CFH', 'Dent', 'CFH', 'CFH', 'CFH', 'CFH', 'CFH', 'CFH', 'Chachra', 'Chachra', 'Chachra', 'Chachra', 'Chachra', 'Chachra', 'Chachra', 'Chachra', 'Chachra', 'Chandler', 'Chandler', 'Chandler', 'Chandler', 'Chandler', 'Chandler', 'Chandler', 'Chell', 'Chell', 'Chell', 'Chell', 'Chell', 'Walters', 'Chell', 'Chell', 'Chell', 'Comdet', 'CFH', 'Cholette', 'Taylor', 'Cholette', 'Cholette', 'Cholette', 'Cholette', 'Cholette', 'Comdet', 'Comdet', 'Comdet', 'Comdet', 'Comdet', 'Comdet', 'Chandler', 'Comdet', 'Agresti', 'Comdet', 'Corn', 'Corn', 'Corn', 'Corn', 'Goonan', 'Goonan', 'Corn', 'Grove', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Lovitt', 'Bukowsky', 'Davisson', 'Vision', 'Davisson', 'Davisson', 'Dent', 'Dent', 'Dent', 'Dent', 'Dent', 'Dent', 'Chandler', 'Mark', 'Dent', 'Dent', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Goonan', 'Goonan', 'Goonan', 'Goonan', 'Goonan', 'Goonan', 'Goonan', 'Goonan', 'Goonan', 'Goonan', 'Goonan', 'Grove', 'Grove', 'Chandler', 'Shea', 'Grove', 'Grove', 'Grove', 'McKee', 'Grove', 'Harp', 'Harp', 'Harp', 'Harp', 'Harp', 'Harp', 'Harp', 'Hayes', 'Brody', 'Brody', 'Hayes', 'Hayes', 'Hayes', 'Johnson', 'Hayes', 'Hayes', 'Janson', 'Janson', 'Janson', 'Janson', 'Janson', 'Janson', 'Janson', 'Lovitt', 'Janson', 'Johnson', 'Johnson', 'Johnson', 'Johnson', 'Johnson', 'Johnson', 'Mark', 'Kolln', 'Koenig', 'Koenig', 'Koenig', 'Koenig', 'Koenig', 'Koenig', 'Koenig', 'Koenig', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Lawyeraau', 'Lawyeraau', 'Lawyeraau', 'Lawyeraau', 'Lawyeraau', 'Messick', 'Lawyeraau', 'Davisson', 'Peterson', 'Chell', 'Chandler', 'Chell', 'Nigam', 'Chell', 'Vision', 'Wilson', 'Chell', 'Chell', 'Lee', 'Lee', 'Lovitt', 'Lee', 'Chell', 'Lovitt', 'Chell', 'Lovitt', 'Lovitt', 'Lovitt', 'Lovitt', 'Goonan', 'Mahlers2nd', 'Mahlers2nd', 'Mahlers2nd', 'CFH', 'Mahlers2nd', 'Mahlers2nd', 'Mahlers2nd', 'Mahlers2nd', 'Mahlers2nd', 'Riley', 'Mahlers2nd', 'Mahlers2nd', 'Engineer', 'Mark', 'Mark', 'Mark', 'Mark', 'Mark', 'Mark', 'Mark', 'Messick', 'McKee', 'McKee', 'McKee', 'Comdet', 'Goonan', 'McKee', 'McKee', 'McKee', 'McKee', 'McKee', 'Merritt', 'Merritt', 'Merritt', 'Merritt', 'Merritt', 'Merritt', 'Merritt', 'Merritt', 'Merritt', 'Peterson', 'Merritt', 'Merritt', 'Merritt', 'Messick', 'Messick', 'Messick', 'Messick', 'Lawyeraau', 'Messick', 'Peterson', 'Mitchell', 'Mitchell', 'Mitchell', 'Mitchell', 'Mitchell', 'Mitchell', 'Morrison', 'Morrison', 'Morrison', 'Morrison', 'Morrison', 'Morrison', 'Morrison', 'Morrison', 'Morrison', 'Neal', 'Neal', 'Agresti', 'Neal', 'Goonan', 'Neal', 'Neal', 'Neal', 'Neal', 'Nigam', 'Nigam', 'Morrison', 'Nigam', 'Nigam', 'Nigam', 'Nigam', 'Peterson', 'Peterson', 'Peterson', 'Power', 'Power', 'Power', 'Power', 'Power', 'Power', 'Power', 'Power', 'Power', 'Riley', 'Riley', 'Riley', 'Riley', 'Riley', 'Riley', 'Riley', 'Riley', 'Chachra', 'Cholette', 'Robert', 'Robert', 'Robert', 'Bukowsky', 'Robert', 'Robert', 'Robert', 'Shea', 'Shea', 'Shea', 'Brown', 'Nigam', 'Shea', 'Shea', 'Lovitt', 'Shea', 'Shea', 'Chandler', 'Sherwin', 'Sherwin', 'Sherwin', 'Chandler', 'Sherwin', 'Sherwin', 'Sherwin', 'Sherwin', 'Sherwin', 'Sherwin', 'Sherwin', 'Vision', 'Taylor', 'Taylor', 'Taylor', 'Taylor', 'Taylor', 'Taylor', 'Taylor', 'Taylor', 'Vernon', 'Vernon', 'Vernon', 'Vernon', 'Vernon', 'Vision', 'Vision', 'Goonan', 'Vision', 'Vision', 'Vision', 'Vision', 'Walters', 'Walters', 'Walters', 'Walters', 'Walters', 'Walters', 'Walters', 'Wilson', 'Wilson', 'Wilson', 'Wilson', 'Lovitt', 'Wilson', 'Wilson', 'Wilson', 'Wilson', 'Wilson', 'Wilson', 'Wilson']
{'accuracy_score': 0.8355555555555556, 'balanced_accuracy_score': 0.8443086913086911, 'macro_precision_score': 0.8435514550808668, 'macro_recall_score': 0.8443086913086911, 'macro_f1_score': 0.8307833354019785, 'micro_precision_score': 0.8355555555555556, 'micro_recall_score': 0.8355555555555556, 'micro_f1_score': 0.8355555555555556}
('0', Pipeline(steps=[('0', MinMaxScaler()), ('1', VarianceThreshold()),
                ('2', StandardScaler(with_mean=False)),
                ('3',
                 LinearSVC(C=0.010749026833865034, dual=False, random_state=7,
                           tol=0.00259854756744249))]))
('1', Pipeline(steps=[('0', MinMaxScaler()),
                ('1', SelectPercentile(percentile=73.74767014716504)),
                ('2',
                 PassiveAggressiveClassifier(C=0.0013211707185948362,
                                             fit_intercept=False,
                                             loss='squared_hinge',
                                             random_state=7))]))
('2', Pipeline(steps=[('0', MinMaxScaler()), ('1', VarianceThreshold()),
                ('2',
                 PassiveAggressiveClassifier(C=1.0841147042577262,
                                             fit_intercept=False,
                                             loss='squared_hinge',
                                             random_state=7))]))
('3', Pipeline(steps=[('0', MinMaxScaler()),
                ('1',
                 MLPClassifier(activation='tanh', alpha=0.05073202278059812,
                               learning_rate_init=0.001416748402089282,
                               random_state=7))]))
('4', Pipeline(steps=[('0', VarianceThreshold()), ('1', SimpleImputer()),
                ('2', MaxAbsScaler()),
                ('3', MultinomialNB(alpha=0.14615331138185222))]))
('5', Pipeline(steps=[('0', MaxAbsScaler()), ('1', SimpleImputer(strategy='median')),
                ('2',
                 SMOTETomek(random_state=7, sampling_strategy='not minority')),
                ('3',
                 MLPClassifier(activation='tanh', alpha=0.07465193136061347,
                               learning_rate_init=0.0027848097972430074,
                               random_state=7, solver='lbfgs'))]))
('6', Pipeline(steps=[('0',
                 MLPClassifier(activation='logistic', alpha=0.04100530811265877,
                               learning_rate_init=0.0016238422809657478,
                               random_state=7))]))
('7', Pipeline(steps=[('0', SelectFwe(alpha=0.0012703174338070684)),
                ('1', MaxAbsScaler()),
                ('2', GaussianNB(var_smoothing=0.009082078345069659))]))
('8', Pipeline(steps=[('0', BernoulliNB(alpha=0.6576037900891282, fit_prior=False))]))
('9', Pipeline(steps=[('0',
                 SMOTE(k_neighbors=4, random_state=7,
                       sampling_strategy='minority')),
                ('1',
                 LinearSVC(C=1.9700397672074677, class_weight='balanced',
                           dual=False, random_state=7,
                           tol=0.014576961950280399))]))
