['Agresti', 'Agresti', 'Agresti', 'Agresti', 'Agresti', 'Agresti', 'Ashbacher', 'Ashbacher', 'Ashbacher', 'Ashbacher', 'Ashbacher', 'Cholette', 'Ashbacher', 'Power', 'Ashbacher', 'Ashbacher', 'Ashbacher', 'Riley', 'Ashbacher', 'McKee', 'Auken', 'Auken', 'Auken', 'Auken', 'Auken', 'Auken', 'Chachra', 'Auken', 'Auken', 'Auken', 'Blankenship', 'Blankenship', 'Blankenship', 'Blankenship', 'Blankenship', 'Blankenship', 'Brody', 'Brody', 'Janson', 'Brody', 'Brody', 'Brody', 'Brody', 'Brody', 'Brown', 'Mitchell', 'Brown', 'Brown', 'Brown', 'Brown', 'Brown', 'McKee', 'Brown', 'Bukowsky', 'Bukowsky', 'Bukowsky', 'Bukowsky', 'Bukowsky', 'Vernon', 'Bukowsky', 'Bukowsky', 'Bukowsky', 'Bukowsky', 'Bukowsky', 'Bukowsky', 'Calvinnme', 'Calvinnme', 'Calvinnme', 'Calvinnme', 'Koenig', 'Calvinnme', 'Calvinnme', 'CFH', 'CFH', 'CFH', 'CFH', 'Dent', 'CFH', 'CFH', 'CFH', 'CFH', 'CFH', 'CFH', 'Chachra', 'Chachra', 'Chachra', 'Chachra', 'Chachra', 'Chachra', 'Chachra', 'Chachra', 'Chachra', 'Chandler', 'Chandler', 'Chandler', 'Chandler', 'Chandler', 'Chandler', 'Chandler', 'Chell', 'Chell', 'Brody', 'Chell', 'Chell', 'Walters', 'Chell', 'Chell', 'Chell', 'Comdet', 'CFH', 'Cholette', 'Cholette', 'Cholette', 'Cholette', 'Cholette', 'Cholette', 'Cholette', 'Comdet', 'Comdet', 'Comdet', 'Comdet', 'Comdet', 'Comdet', 'Chandler', 'Comdet', 'Agresti', 'Comdet', 'Corn', 'Corn', 'Corn', 'Corn', 'Goonan', 'Corn', 'Corn', 'Grove', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Cutey', 'Lovitt', 'Bukowsky', 'Davisson', 'Vision', 'Davisson', 'Davisson', 'Dent', 'Dent', 'Dent', 'Dent', 'Dent', 'Dent', 'Chandler', 'Chell', 'Dent', 'Dent', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Engineer', 'Goonan', 'Goonan', 'Goonan', 'Goonan', 'Goonan', 'Goonan', 'Goonan', 'Goonan', 'Goonan', 'Goonan', 'Goonan', 'Grove', 'Grove', 'Chandler', 'Shea', 'Grove', 'Grove', 'Grove', 'McKee', 'Grove', 'Harp', 'Harp', 'Harp', 'Harp', 'Harp', 'Harp', 'Harp', 'Hayes', 'Brody', 'Brody', 'Hayes', 'Hayes', 'Hayes', 'Johnson', 'Hayes', 'Hayes', 'Janson', 'Janson', 'Janson', 'Kolln', 'Janson', 'Chachra', 'Janson', 'Lovitt', 'Koenig', 'Johnson', 'Johnson', 'Johnson', 'Johnson', 'Johnson', 'Johnson', 'Mark', 'Kolln', 'Koenig', 'Koenig', 'Koenig', 'Koenig', 'Koenig', 'Koenig', 'Koenig', 'Koenig', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Kolln', 'Lawyeraau', 'Lawyeraau', 'Lawyeraau', 'McKee', 'Lawyeraau', 'Messick', 'Lawyeraau', 'Calvinnme', 'Peterson', 'Lee', 'Lee', 'Chell', 'Nigam', 'Chell', 'Comdet', 'Wilson', 'Chell', 'Chell', 'Lee', 'Lee', 'Lovitt', 'Agresti', 'Chell', 'Lovitt', 'Chell', 'Lovitt', 'Lovitt', 'Lovitt', 'Lovitt', 'Goonan', 'Mahlers2nd', 'Mahlers2nd', 'Mahlers2nd', 'Mahlers2nd', 'Mahlers2nd', 'Mahlers2nd', 'Mahlers2nd', 'Mahlers2nd', 'Mahlers2nd', 'Riley', 'Mahlers2nd', 'Mahlers2nd', 'Mark', 'Mark', 'Mark', 'Mark', 'Mark', 'Mark', 'Mark', 'Mark', 'Messick', 'McKee', 'McKee', 'McKee', 'Comdet', 'Goonan', 'McKee', 'McKee', 'McKee', 'McKee', 'McKee', 'Merritt', 'Merritt', 'Merritt', 'Merritt', 'Merritt', 'Merritt', 'Merritt', 'Merritt', 'Merritt', 'Peterson', 'Merritt', 'Merritt', 'Merritt', 'Messick', 'Messick', 'Messick', 'Messick', 'Lawyeraau', 'Messick', 'Vernon', 'Mitchell', 'Mitchell', 'Mitchell', 'Mitchell', 'Mitchell', 'Mitchell', 'Morrison', 'Morrison', 'Morrison', 'Morrison', 'Morrison', 'Morrison', 'Morrison', 'Morrison', 'Morrison', 'Neal', 'Neal', 'Agresti', 'Neal', 'McKee', 'Neal', 'Neal', 'Neal', 'Neal', 'Nigam', 'Nigam', 'Vernon', 'Nigam', 'Nigam', 'Koenig', 'Nigam', 'Peterson', 'Peterson', 'Peterson', 'Power', 'Power', 'Power', 'Power', 'Power', 'Power', 'Power', 'Power', 'Power', 'Riley', 'Riley', 'Riley', 'Riley', 'Riley', 'Riley', 'Riley', 'Riley', 'Wilson', 'Cholette', 'Robert', 'Robert', 'Robert', 'Bukowsky', 'Robert', 'Robert', 'Robert', 'Shea', 'Shea', 'Shea', 'Cutey', 'Shea', 'Shea', 'Shea', 'Lovitt', 'Shea', 'Shea', 'Sherwin', 'Sherwin', 'Sherwin', 'Sherwin', 'Chandler', 'Sherwin', 'Sherwin', 'Sherwin', 'Sherwin', 'Sherwin', 'Sherwin', 'Sherwin', 'Vision', 'Taylor', 'Taylor', 'Taylor', 'Taylor', 'Taylor', 'Taylor', 'Taylor', 'Taylor', 'Vernon', 'Wilson', 'Vernon', 'Vernon', 'Vernon', 'Vision', 'Vision', 'Goonan', 'Vision', 'Vision', 'Vision', 'Vision', 'Walters', 'Walters', 'Walters', 'Walters', 'Walters', 'Walters', 'Walters', 'Wilson', 'Wilson', 'Wilson', 'Wilson', 'Lovitt', 'Wilson', 'Wilson', 'Wilson', 'Wilson', 'Wilson', 'Wilson', 'Wilson']
{'accuracy_score': 0.8377777777777777, 'balanced_accuracy_score': 0.8430537240537241, 'macro_precision_score': 0.8501456876456877, 'macro_recall_score': 0.8430537240537241, 'macro_f1_score': 0.8324810768866496, 'micro_precision_score': 0.8377777777777777, 'micro_recall_score': 0.8377777777777777, 'micro_f1_score': 0.8377777777777777}
('0', Pipeline(steps=[('0', MinMaxScaler()), ('1', StandardScaler(with_mean=False)),
                ('2',
                 PassiveAggressiveClassifier(C=0.003750603866769089,
                                             loss='squared_hinge',
                                             random_state=38727))]))
('1', Pipeline(steps=[('0', MinMaxScaler()),
                ('1',
                 RandomOverSampler(random_state=38727,
                                   sampling_strategy='not majority')),
                ('2',
                 PassiveAggressiveClassifier(C=0.7696769233615699,
                                             random_state=38727))]))
('2', Pipeline(steps=[('0', VarianceThreshold()), ('1', MinMaxScaler()),
                ('2', StandardScaler(with_std=False)),
                ('3',
                 LogisticRegression(C=6.201081029355537,
                                    class_weight='balanced',
                                    random_state=38727))]))
('3', Pipeline(steps=[('0', VarianceThreshold()), ('1', MinMaxScaler()),
                ('2', StandardScaler(with_std=False)),
                ('3',
                 LogisticRegression(C=9.053503235621227,
                                    class_weight='balanced',
                                    random_state=38727))]))
('4', Pipeline(steps=[('0', VarianceThreshold()), ('1', StandardScaler()),
                ('2',
                 SGDClassifier(alpha=7.4985214867856795e-06, average=True,
                               epsilon=0.023846561470034354,
                               eta0=9.433846532617937e-05,
                               l1_ratio=4.971848349158223e-07,
                               loss='squared_hinge', power_t=0.2456940778717269,
                               random_state=38727,
                               tol=1.7273069847470573e-05))]))
('5', Pipeline(steps=[('0', MaxAbsScaler()),
                ('1',
                 LogisticRegression(C=2.293315887548722,
                                    class_weight='balanced',
                                    random_state=38727))]))
('6', Pipeline(steps=[('0', MinMaxScaler()), ('1', VarianceThreshold()),
                ('2', SelectPercentile(percentile=94.94211304759627)),
                ('3', MultinomialNB(alpha=0.07025029684798054))]))
('7', Pipeline(steps=[('0', MaxAbsScaler()),
                ('1',
                 MLPClassifier(activation='logistic', alpha=0.05290776001846517,
                               learning_rate_init=0.057890565274062306,
                               random_state=38727, solver='lbfgs'))]))
('8', Pipeline(steps=[('0', MaxAbsScaler()),
                ('1', BernoulliNB(alpha=0.37379699445580494, fit_prior=False))]))
('9', Pipeline(steps=[('0', KNNImputer(n_neighbors=8)),
                ('1',
                 LinearSVC(C=0.0003556538216376541, class_weight='balanced',
                           random_state=38727, tol=0.00013166352989844423))]))
