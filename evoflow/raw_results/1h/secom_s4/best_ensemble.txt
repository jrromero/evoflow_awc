
{'accuracy_score': 0.7617021276595745, 'balanced_accuracy_score': 0.6358529430122963, 'macro_precision_score': 0.5546186855379056, 'macro_recall_score': 0.6358529430122963, 'macro_f1_score': 0.5509145509145509, 'micro_precision_score': 0.7617021276595745, 'micro_recall_score': 0.7617021276595745, 'micro_f1_score': 0.7617021276595745}
('0', Pipeline(steps=[('0', SimpleImputer()),
                ('1',
                 SMOTE(k_neighbors=2, random_state=4,
                       sampling_strategy='not majority')),
                ('2',
                 DecisionTreeClassifier(class_weight='balanced',
                                        max_depth=1.884454760438246,
                                        max_features=0.7803263030996527,
                                        min_samples_leaf=3, min_samples_split=4,
                                        random_state=4))]))
('1', Pipeline(steps=[('0', SimpleImputer()),
                ('1',
                 SMOTE(k_neighbors=2, random_state=4,
                       sampling_strategy='not majority')),
                ('2',
                 DecisionTreeClassifier(class_weight='balanced',
                                        max_depth=1.884454760438246,
                                        max_features=0.7803263030996527,
                                        min_samples_leaf=13,
                                        min_samples_split=4, random_state=4))]))
('2', Pipeline(steps=[('0', SimpleImputer()),
                ('1',
                 SMOTE(k_neighbors=2, random_state=4,
                       sampling_strategy='minority')),
                ('2',
                 DecisionTreeClassifier(class_weight='balanced',
                                        max_depth=1.884454760438246,
                                        max_features=0.7803263030996527,
                                        min_samples_leaf=13,
                                        min_samples_split=4, random_state=4))]))
('3', Pipeline(steps=[('0', SimpleImputer(strategy='most_frequent')),
                ('1', SMOTE(random_state=4, sampling_strategy='not minority')),
                ('2', VarianceThreshold()),
                ('3',
                 DecisionTreeClassifier(class_weight='balanced',
                                        criterion='entropy',
                                        max_depth=1.4136043938644784,
                                        max_features=0.38364963602405633,
                                        min_samples_leaf=13,
                                        min_samples_split=11,
                                        random_state=4))]))
('4', Pipeline(steps=[('0', KNNImputer(n_neighbors=3, weights='distance')),
                ('1', MaxAbsScaler()), ('2', MinMaxScaler()),
                ('3',
                 SGDClassifier(alpha=0.018282467067088873, average=True,
                               class_weight='balanced',
                               epsilon=0.0004889572742737588,
                               eta0=0.015757860562240055,
                               l1_ratio=0.002913106043147974, loss='perceptron',
                               power_t=0.6117693121459202, random_state=4,
                               tol=0.0013762225388575513))]))
('5', Pipeline(steps=[('0', KNNImputer(n_neighbors=10, weights='distance')),
                ('1', MaxAbsScaler()), ('2', MinMaxScaler()),
                ('3',
                 SGDClassifier(alpha=0.018282467067088873, average=True,
                               class_weight='balanced',
                               epsilon=2.0370152812089378e-05,
                               eta0=0.015757860562240055,
                               l1_ratio=0.002913106043147974, loss='perceptron',
                               power_t=0.6117693121459202, random_state=4,
                               tol=0.0013762225388575513))]))
('6', Pipeline(steps=[('0', SimpleImputer(strategy='median')),
                ('1', SMOTE(random_state=4, sampling_strategy='not majority')),
                ('2',
                 SGDClassifier(alpha=0.018282467067088873, average=True,
                               epsilon=0.0004889572742737588,
                               eta0=0.015757860562240055,
                               l1_ratio=0.002913106043147974, loss='perceptron',
                               power_t=0.6117693121459202, random_state=4,
                               tol=3.7079708390796775e-05))]))
('7', Pipeline(steps=[('0', SimpleImputer(strategy='most_frequent')),
                ('1',
                 SMOTE(k_neighbors=3, random_state=4,
                       sampling_strategy='not minority')),
                ('2',
                 BernoulliNB(alpha=0.031183354733612504, fit_prior=False))]))
('8', Pipeline(steps=[('0', SimpleImputer(strategy='median')),
                ('1',
                 SMOTE(k_neighbors=2, random_state=4,
                       sampling_strategy='not majority')),
                ('2',
                 DecisionTreeClassifier(class_weight='balanced',
                                        max_depth=1.884454760438246,
                                        max_features=0.7803263030996527,
                                        min_samples_leaf=8, min_samples_split=4,
                                        random_state=4))]))
('9', Pipeline(steps=[('0', KNNImputer(n_neighbors=9, weights='distance')),
                ('1', MaxAbsScaler()), ('2', MinMaxScaler()),
                ('3',
                 BernoulliNB(alpha=0.031183354733612504, fit_prior=False))]))
