
{'accuracy_score': 0.7382978723404255, 'balanced_accuracy_score': 0.7096623182073528, 'macro_precision_score': 0.573947692849595, 'macro_recall_score': 0.7096623182073528, 'macro_f1_score': 0.5643261411851596, 'micro_precision_score': 0.7382978723404255, 'micro_recall_score': 0.7382978723404255, 'micro_f1_score': 0.7382978723404255}
('0', Pipeline(steps=[('0', SimpleImputer()),
                ('1',
                 RandomUnderSampler(random_state=2,
                                    sampling_strategy='not minority')),
                ('2',
                 RandomForestClassifier(class_weight='balanced',
                                        criterion='entropy',
                                        max_features='sqrt',
                                        min_samples_leaf=10,
                                        min_samples_split=3, n_estimators=80,
                                        random_state=2))]))
('1', Pipeline(steps=[('0', MaxAbsScaler()), ('1', StandardScaler()),
                ('2', SimpleImputer(strategy='most_frequent')),
                ('3',
                 SGDClassifier(alpha=7.502257434096059e-07, average=True,
                               class_weight='balanced',
                               epsilon=0.07860154466924438,
                               eta0=1.7027702307281237e-05,
                               l1_ratio=1.9890622400740728e-08,
                               loss='squared_hinge', power_t=0.6309991679378882,
                               random_state=2, tol=0.0001491621567423311))]))
('2', Pipeline(steps=[('0', SimpleImputer(strategy='most_frequent')),
                ('1',
                 RandomUnderSampler(random_state=2, replacement=True,
                                    sampling_strategy='not majority')),
                ('2', GaussianNB(var_smoothing=8.545035833878863e-07))]))
('3', Pipeline(steps=[('0', SimpleImputer(strategy='most_frequent')),
                ('1',
                 RandomUnderSampler(random_state=2,
                                    sampling_strategy='not minority')),
                ('2',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy',
                                        max_features='log2', min_samples_leaf=4,
                                        min_samples_split=9, n_estimators=21,
                                        random_state=2))]))
('4', Pipeline(steps=[('0', SimpleImputer(strategy='most_frequent')),
                ('1',
                 RandomUnderSampler(random_state=2, replacement=True,
                                    sampling_strategy='not minority')),
                ('2',
                 ExtraTreesClassifier(class_weight='balanced',
                                      criterion='entropy', max_features='sqrt',
                                      min_samples_leaf=3, min_samples_split=11,
                                      n_estimators=75, random_state=2))]))
('5', Pipeline(steps=[('0', MaxAbsScaler()), ('1', StandardScaler()),
                ('2', SimpleImputer(strategy='most_frequent')),
                ('3',
                 SGDClassifier(alpha=7.502257434096059e-07, average=True,
                               class_weight='balanced',
                               epsilon=0.07860154466924438,
                               eta0=1.7027702307281237e-05,
                               l1_ratio=9.118182127697148e-06,
                               loss='squared_hinge', power_t=0.6309991679378882,
                               random_state=2, tol=0.0001491621567423311))]))
('6', Pipeline(steps=[('0', KNNImputer(n_neighbors=2)), ('1', MinMaxScaler()),
                ('2', VarianceThreshold()),
                ('3',
                 SGDClassifier(alpha=1.1027452763936348e-06, average=True,
                               class_weight='balanced',
                               epsilon=0.0035431509833676778,
                               eta0=1.7027702307281237e-05,
                               l1_ratio=0.17424630699869145,
                               loss='modified_huber',
                               power_t=0.8180698424427765, random_state=2,
                               tol=0.0022893491763227016))]))
('7', Pipeline(steps=[('0', SimpleImputer(strategy='most_frequent')),
                ('1',
                 RandomUnderSampler(random_state=2,
                                    sampling_strategy='not minority')),
                ('2',
                 RandomForestClassifier(max_features='log2',
                                        min_samples_leaf=10,
                                        min_samples_split=3, n_estimators=21,
                                        random_state=2))]))
('8', Pipeline(steps=[('0', SimpleImputer(strategy='most_frequent')),
                ('1',
                 RandomUnderSampler(random_state=2,
                                    sampling_strategy='not minority')),
                ('2',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy',
                                        max_features='log2',
                                        min_samples_leaf=13,
                                        min_samples_split=9, n_estimators=21,
                                        random_state=2))]))
('9', Pipeline(steps=[('0', SimpleImputer()),
                ('1',
                 RandomUnderSampler(random_state=2,
                                    sampling_strategy='not minority')),
                ('2',
                 RandomForestClassifier(class_weight='balanced',
                                        criterion='entropy',
                                        max_features='sqrt',
                                        min_samples_leaf=12,
                                        min_samples_split=3, n_estimators=80,
                                        random_state=2))]))
