['0', '0', '0', '0', '0', '0', '0', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '2', '2', '2', '2', '2', '2', '2', '3', '1', '3', '3', '1', '4', '4', '4', '4', '4', '5', '5', '5', '5', '5', '5', '6', '6', '6', '6', '6', '6', '7', '7', '7', '7', '7', '8', '8', '8', '8', '8', '9', '4', '0', '0', '0', '0', '0', '0', '1', '1', '1', '1', '1', '1', '2', '2', '2', '2', '3', '3', '7', '3', '3', '3', '3', '3', '6', '1', '4', '4', '4', '4', '4', '4', '5', '5', '5', '5', '6', '6', '6', '6', '8', '7', '7', '7', '7', '7', '7', '7', '8', '8', '8', '8', '9', '9', '9', '4', '0', '0', '5', '0', '2', '0', '0', '0', '0', '0', '1', '1', '1', '1', '1', '7', '1', '2', '9', '3', '3', '3', '3', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '5', '5', '5', '5', '5', '5', '6', '6', '6', '6', '6', '6', '6', '7', '7', '7', '7', '7', '8', '8', '2', '8', '8', '7', '8', '8', '9', '9', '9', '9', '0', '0', '0', '0', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '2', '8', '2', '2', '2', '2', '2', '2', '2', '5', '3', '3', '3', '3', '3', '3', '4', '4', '1', '4', '4', '1', '4', '4', '4', '4', '5', '5', '6', '6', '6', '6', '6', '6', '6', '6', '4', '7', '7', '7', '7', '7', '7', '7', '8', '8', '8', '8', '8', '9', '9', '0', '9', '9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '1', '1', '1', '1', '4', '1', '1', '1', '1', '1', '1', '1', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '3', '3', '2', '3', '3', '3', '3', '3', '4', '4', '4', '4', '4', '4', '4', '4', '4', '5', '5', '5', '5', '5', '5', '5', '5', '5', '6', '6', '6', '6', '6', '6', '6', '6', '6', '6', '6', '6', '6', '6', '6', '6', '6', '7', '7', '7', '7', '7', '7', '7', '7', '7', '7', '7', '7', '7', '8', '8', '8', '8', '8', '8', '8', '8', '8', '0', '8', '8', '8', '9', '9', '9', '3', '9', '9', '9', '9', '9', '8', '0', '0', '0', '0', '0', '0', '0', '5', '0', '0', '0', '1', '1', '1', '1', '1', '5', '1', '1', '1', '1', '1', '1', '9', '2', '2', '4', '2', '4', '2', '2', '2', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '4', '4', '4', '4', '4', '4', '4', '4', '4', '5', '5', '5', '5', '5', '9', '5', '5', '5', '5', '5', '5', '5', '5', '6', '6', '6', '6', '6', '6', '0', '6', '6', '6', '6', '6', '1', '7', '4', '7', '7', '4', '7', '7', '7', '7', '7', '7', '7', '7', '8', '8', '8', '8', '8', '8', '8', '9', '8', '8', '7', '8', '8', '9', '9', '9', '9', '9', '9', '9', '9', '9', '3', '9']
{'accuracy_score': 0.9161425576519916, 'balanced_accuracy_score': 0.9136922468672489, 'macro_precision_score': 0.9159100585368816, 'macro_recall_score': 0.9136922468672489, 'macro_f1_score': 0.9143673184867149, 'micro_precision_score': 0.9161425576519916, 'micro_recall_score': 0.9161425576519916, 'micro_f1_score': 0.9161425576519915}
('0', Pipeline(steps=[('0', VarianceThreshold()),
                ('1',
                 MLPClassifier(alpha=0.03725185440391689,
                               learning_rate_init=0.015347370475289956,
                               random_state=76083))]))
('1', Pipeline(steps=[('0', StandardScaler(with_mean=False, with_std=False)),
                ('1', MaxAbsScaler()), ('2', MinMaxScaler()),
                ('3',
                 MLPClassifier(alpha=0.004958485812625157,
                               learning_rate_init=0.015189044617317989,
                               random_state=76083))]))
('2', Pipeline(steps=[('0', MaxAbsScaler()),
                ('1',
                 RandomUnderSampler(random_state=76083,
                                    sampling_strategy='not minority')),
                ('2',
                 RandomForestClassifier(bootstrap=False,
                                        class_weight='balanced',
                                        criterion='entropy',
                                        max_features='log2', min_samples_leaf=2,
                                        min_samples_split=8, n_estimators=50,
                                        random_state=76083))]))
('3', Pipeline(steps=[('0',
                 RandomForestClassifier(bootstrap=False,
                                        class_weight='balanced',
                                        criterion='entropy',
                                        max_features='log2', min_samples_leaf=2,
                                        min_samples_split=13, n_estimators=50,
                                        random_state=76083))]))
('4', Pipeline(steps=[('0',
                 MLPClassifier(alpha=0.07159430521550998,
                               learning_rate_init=0.019473455969275185,
                               random_state=76083, solver='lbfgs'))]))
('5', Pipeline(steps=[('0',
                 MLPClassifier(alpha=0.03725185440391689,
                               learning_rate_init=0.015347370475289956,
                               random_state=76083))]))
('6', Pipeline(steps=[('0', StandardScaler(with_mean=False)),
                ('1',
                 RandomOverSampler(random_state=76083,
                                   sampling_strategy='not minority')),
                ('2', MinMaxScaler()),
                ('3',
                 MLPClassifier(alpha=0.03725185440391689,
                               learning_rate_init=0.015347370475289956,
                               random_state=76083))]))
('7', Pipeline(steps=[('0', StandardScaler(with_std=False)), ('1', MaxAbsScaler()),
                ('2', MinMaxScaler()),
                ('3',
                 MLPClassifier(alpha=0.004474153589019221,
                               learning_rate_init=0.015189044617317989,
                               random_state=76083))]))
('8', Pipeline(steps=[('0', KNNImputer(n_neighbors=9)), ('1', SimpleImputer()),
                ('2',
                 SMOTE(random_state=76083, sampling_strategy='not majority')),
                ('3',
                 ExtraTreesClassifier(bootstrap=True, criterion='entropy',
                                      max_features='log2', min_samples_split=5,
                                      n_estimators=69, random_state=76083))]))
('9', Pipeline(steps=[('0', VarianceThreshold()),
                ('1',
                 MLPClassifier(alpha=0.04759919539354874,
                               learning_rate_init=0.015347370475289956,
                               random_state=76083))]))
