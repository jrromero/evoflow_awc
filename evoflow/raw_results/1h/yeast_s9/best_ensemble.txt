['POX', 'NUC', 'CYT', 'CYT', 'MIT', 'EXC', 'CYT', 'CYT', 'MIT', 'ME1', 'ME1', 'ME2', 'MIT', 'ME1', 'CYT', 'NUC', 'CYT', 'MIT', 'MIT', 'NUC', 'ME3', 'CYT', 'CYT', 'ME1', 'MIT', 'MIT', 'MIT', 'POX', 'ME3', 'NUC', 'ME1', 'ME3', 'CYT', 'CYT', 'CYT', 'POX', 'NUC', 'MIT', 'CYT', 'MIT', 'ME3', 'NUC', 'NUC', 'CYT', 'NUC', 'CYT', 'MIT', 'NUC', 'CYT', 'NUC', 'CYT', 'NUC', 'NUC', 'MIT', 'NUC', 'MIT', 'POX', 'NUC', 'CYT', 'ME1', 'ME1', 'MIT', 'MIT', 'ME3', 'MIT', 'MIT', 'MIT', 'EXC', 'CYT', 'NUC', 'EXC', 'NUC', 'CYT', 'ME2', 'CYT', 'NUC', 'EXC', 'EXC', 'CYT', 'CYT', 'CYT', 'CYT', 'ME3', 'POX', 'NUC', 'NUC', 'CYT', 'NUC', 'MIT', 'NUC', 'ME3', 'NUC', 'ME3', 'CYT', 'ME3', 'NUC', 'CYT', 'ME2', 'CYT', 'CYT', 'ME3', 'ME3', 'NUC', 'EXC', 'NUC', 'NUC', 'MIT', 'ME3', 'ME3', 'POX', 'ME3', 'ME1', 'ME1', 'CYT', 'ME3', 'ME3', 'ME2', 'CYT', 'NUC', 'CYT', 'MIT', 'ME3', 'MIT', 'NUC', 'ME3', 'CYT', 'NUC', 'CYT', 'ME3', 'CYT', 'CYT', 'NUC', 'ME2', 'ME2', 'NUC', 'NUC', 'MIT', 'NUC', 'CYT', 'CYT', 'NUC', 'MIT', 'NUC', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'ME3', 'NUC', 'CYT', 'CYT', 'MIT', 'MIT', 'MIT', 'NUC', 'CYT', 'ME3', 'ME3', 'CYT', 'MIT', 'MIT', 'CYT', 'MIT', 'CYT', 'NUC', 'ME1', 'ME3', 'NUC', 'MIT', 'ME1', 'NUC', 'ERL', 'MIT', 'ME3', 'ME2', 'ME2', 'CYT', 'CYT', 'ME3', 'ME3', 'ME3', 'ME2', 'CYT', 'NUC', 'NUC', 'ME3', 'ME2', 'CYT', 'MIT', 'MIT', 'MIT', 'MIT', 'CYT', 'CYT', 'MIT', 'ME3', 'NUC', 'NUC', 'MIT', 'CYT', 'NUC', 'NUC', 'NUC', 'MIT', 'MIT', 'ME3', 'MIT', 'CYT', 'CYT', 'NUC', 'MIT', 'MIT', 'ME3', 'MIT', 'NUC', 'CYT', 'MIT', 'CYT', 'MIT', 'ME3', 'NUC', 'ME3', 'ME2', 'ME3', 'MIT', 'NUC', 'ME3', 'CYT', 'ME2', 'CYT', 'NUC', 'EXC', 'NUC', 'ME2', 'ME3', 'ME1', 'CYT', 'NUC', 'CYT', 'MIT', 'CYT', 'CYT', 'CYT', 'NUC', 'ME3', 'CYT', 'POX', 'NUC', 'MIT', 'NUC', 'POX', 'MIT', 'CYT', 'EXC', 'CYT', 'CYT', 'NUC', 'MIT', 'ME1', 'ME2', 'ME3', 'NUC', 'NUC', 'CYT', 'CYT', 'ME3', 'CYT', 'ME2', 'MIT', 'CYT', 'NUC', 'CYT', 'MIT', 'NUC', 'CYT', 'NUC', 'NUC', 'CYT', 'CYT', 'MIT', 'NUC', 'NUC', 'CYT', 'ME3', 'CYT', 'ME2', 'CYT', 'NUC', 'CYT', 'MIT', 'NUC', 'NUC', 'MIT', 'CYT', 'NUC', 'MIT', 'CYT', 'NUC', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'NUC', 'CYT', 'CYT', 'CYT', 'NUC', 'NUC', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'MIT', 'CYT', 'MIT', 'NUC', 'CYT', 'CYT', 'CYT', 'CYT', 'MIT', 'MIT', 'CYT', 'MIT', 'MIT', 'MIT', 'EXC', 'POX', 'NUC', 'CYT', 'CYT', 'NUC', 'NUC', 'ME3', 'ME3', 'NUC', 'ME1', 'NUC', 'MIT', 'MIT', 'NUC', 'CYT', 'CYT', 'ME3', 'CYT', 'NUC', 'CYT', 'ME3', 'ME3', 'NUC', 'MIT', 'ME3', 'CYT', 'CYT', 'ME3', 'MIT', 'NUC', 'NUC', 'CYT', 'CYT', 'CYT', 'CYT', 'NUC', 'NUC', 'CYT', 'MIT', 'NUC', 'CYT', 'ME3', 'ME3', 'EXC', 'ME3', 'ME1', 'NUC', 'MIT', 'NUC', 'CYT', 'ME1', 'CYT', 'CYT', 'CYT', 'NUC', 'CYT', 'CYT', 'CYT', 'CYT', 'NUC', 'NUC', 'NUC', 'CYT', 'MIT', 'NUC', 'NUC', 'NUC', 'NUC', 'CYT', 'ME1', 'ME1', 'CYT', 'NUC', 'CYT', 'CYT', 'NUC', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'ME3', 'CYT', 'CYT', 'CYT', 'ME1', 'CYT', 'ME1', 'NUC', 'ME1', 'CYT', 'ME3', 'POX', 'ME3', 'ME3', 'ME3', 'ME3', 'ME3', 'ME3', 'ME3', 'MIT', 'NUC', 'ME3', 'MIT', 'NUC', 'CYT', 'CYT', 'NUC', 'CYT', 'ME2']
{'accuracy_score': 0.5910112359550562, 'balanced_accuracy_score': 0.5770541394552294, 'macro_precision_score': 0.47212068060723344, 'macro_recall_score': 0.5193487255097063, 'macro_f1_score': 0.4903249756260604, 'micro_precision_score': 0.5910112359550562, 'micro_recall_score': 0.5910112359550562, 'micro_f1_score': 0.5910112359550562}
('0', Pipeline(steps=[('0', KNNImputer(n_neighbors=7)),
                ('1',
                 RandomForestClassifier(class_weight='balanced',
                                        criterion='entropy',
                                        max_features='log2', min_samples_leaf=2,
                                        min_samples_split=13, n_estimators=48,
                                        random_state=9))]))
('1', Pipeline(steps=[('0', VarianceThreshold()), ('1', MaxAbsScaler()),
                ('2',
                 RandomOverSampler(random_state=9,
                                   sampling_strategy='not majority')),
                ('3',
                 MLPClassifier(activation='identity',
                               alpha=0.00012468456886281958,
                               learning_rate_init=0.7919203702003479,
                               random_state=9, solver='lbfgs'))]))
('2', Pipeline(steps=[('0',
                 FastICA(fun='exp', n_components=63, random_state=9,
                         whiten=False)),
                ('1', StandardScaler(with_std=False)),
                ('2',
                 RBFSampler(gamma=0.009194230548249478, n_components=67,
                            random_state=9)),
                ('3',
                 RandomForestClassifier(bootstrap=False,
                                        class_weight='balanced',
                                        criterion='entropy',
                                        max_features='log2', min_samples_leaf=2,
                                        min_samples_split=9, n_estimators=87,
                                        random_state=9))]))
('3', Pipeline(steps=[('0', VarianceThreshold()),
                ('1',
                 RBFSampler(gamma=0.007093056680615626, n_components=95,
                            random_state=9)),
                ('2', RobustScaler(with_scaling=False)),
                ('3',
                 ExtraTreesClassifier(class_weight='balanced',
                                      max_features='sqrt', min_samples_split=19,
                                      n_estimators=70, random_state=9))]))
('4', Pipeline(steps=[('0', KNNImputer(n_neighbors=7)),
                ('1',
                 RBFSampler(gamma=0.030503273724452898, n_components=29,
                            random_state=9)),
                ('2',
                 RandomForestClassifier(class_weight='balanced',
                                        criterion='entropy',
                                        max_features='log2', min_samples_leaf=2,
                                        min_samples_split=20, n_estimators=43,
                                        random_state=9))]))
('5', Pipeline(steps=[('0', MaxAbsScaler()), ('1', RobustScaler()),
                ('2',
                 RandomForestClassifier(class_weight='balanced',
                                        max_features='sqrt', min_samples_leaf=2,
                                        min_samples_split=10, n_estimators=17,
                                        random_state=9))]))
('6', Pipeline(steps=[('0',
                 FastICA(algorithm='deflation', fun='cube', n_components=78,
                         random_state=9, whiten=False)),
                ('1',
                 RBFSampler(gamma=0.007093056680615626, n_components=72,
                            random_state=9)),
                ('2',
                 RandomForestClassifier(class_weight='balanced',
                                        criterion='entropy',
                                        max_features='log2',
                                        min_samples_leaf=10,
                                        min_samples_split=20, n_estimators=24,
                                        random_state=9))]))
('7', Pipeline(steps=[('0',
                 FastICA(algorithm='deflation', fun='cube', n_components=46,
                         random_state=9, whiten=False)),
                ('1', StandardScaler(with_mean=False, with_std=False)),
                ('2',
                 RBFSampler(gamma=0.00880996710890271, n_components=71,
                            random_state=9)),
                ('3',
                 RandomForestClassifier(class_weight='balanced',
                                        criterion='entropy',
                                        max_features='log2', min_samples_leaf=8,
                                        min_samples_split=11, n_estimators=25,
                                        random_state=9))]))
('8', Pipeline(steps=[('0', KNNImputer(n_neighbors=9)),
                ('1',
                 RandomForestClassifier(class_weight='balanced',
                                        criterion='entropy',
                                        max_features='log2', min_samples_leaf=2,
                                        min_samples_split=13, n_estimators=48,
                                        random_state=9))]))
('9', Pipeline(steps=[('0', MinMaxScaler()), ('1', MaxAbsScaler()),
                ('2',
                 RandomForestClassifier(class_weight='balanced',
                                        criterion='entropy',
                                        max_features='log2', min_samples_leaf=2,
                                        min_samples_split=13, n_estimators=18,
                                        random_state=9))]))
