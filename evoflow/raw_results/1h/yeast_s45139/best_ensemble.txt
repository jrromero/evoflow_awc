['POX', 'NUC', 'CYT', 'NUC', 'CYT', 'EXC', 'CYT', 'CYT', 'MIT', 'ME1', 'ME1', 'ME2', 'MIT', 'ME1', 'CYT', 'CYT', 'CYT', 'MIT', 'MIT', 'NUC', 'ME3', 'CYT', 'CYT', 'ME1', 'MIT', 'MIT', 'MIT', 'POX', 'ME3', 'MIT', 'ME1', 'ME3', 'CYT', 'CYT', 'CYT', 'POX', 'NUC', 'MIT', 'CYT', 'EXC', 'ME3', 'CYT', 'NUC', 'CYT', 'NUC', 'CYT', 'MIT', 'NUC', 'CYT', 'NUC', 'CYT', 'NUC', 'NUC', 'MIT', 'CYT', 'MIT', 'POX', 'NUC', 'CYT', 'ME1', 'ME1', 'MIT', 'MIT', 'ME3', 'MIT', 'MIT', 'MIT', 'EXC', 'MIT', 'NUC', 'EXC', 'NUC', 'CYT', 'ME2', 'CYT', 'MIT', 'EXC', 'EXC', 'CYT', 'CYT', 'CYT', 'CYT', 'ME3', 'POX', 'NUC', 'NUC', 'NUC', 'NUC', 'MIT', 'NUC', 'ME3', 'NUC', 'ME3', 'CYT', 'ME3', 'NUC', 'CYT', 'ME2', 'CYT', 'CYT', 'ME3', 'ME3', 'NUC', 'ME1', 'ERL', 'NUC', 'CYT', 'ME3', 'ME3', 'POX', 'ME3', 'ME1', 'ME1', 'CYT', 'ME3', 'ME3', 'ME1', 'CYT', 'NUC', 'NUC', 'MIT', 'ME3', 'MIT', 'NUC', 'ME3', 'NUC', 'NUC', 'CYT', 'ME3', 'CYT', 'CYT', 'NUC', 'ME2', 'ME2', 'NUC', 'NUC', 'MIT', 'MIT', 'CYT', 'CYT', 'NUC', 'MIT', 'NUC', 'CYT', 'CYT', 'CYT', 'MIT', 'MIT', 'ME3', 'NUC', 'CYT', 'NUC', 'MIT', 'MIT', 'MIT', 'NUC', 'CYT', 'ME3', 'ME3', 'CYT', 'MIT', 'MIT', 'CYT', 'MIT', 'CYT', 'NUC', 'ME1', 'ME3', 'NUC', 'MIT', 'ME1', 'NUC', 'ERL', 'MIT', 'ME3', 'ME2', 'ME2', 'NUC', 'CYT', 'NUC', 'ME3', 'ME3', 'ME2', 'CYT', 'NUC', 'NUC', 'ME3', 'ME2', 'CYT', 'MIT', 'MIT', 'MIT', 'MIT', 'ME3', 'MIT', 'MIT', 'ME3', 'NUC', 'NUC', 'MIT', 'CYT', 'NUC', 'NUC', 'NUC', 'MIT', 'MIT', 'ME3', 'MIT', 'CYT', 'CYT', 'NUC', 'MIT', 'MIT', 'ME3', 'MIT', 'NUC', 'CYT', 'MIT', 'CYT', 'MIT', 'ME3', 'NUC', 'ME3', 'EXC', 'ME3', 'MIT', 'NUC', 'ME3', 'CYT', 'ME2', 'NUC', 'CYT', 'EXC', 'NUC', 'ME2', 'ME3', 'ME2', 'CYT', 'NUC', 'CYT', 'MIT', 'CYT', 'CYT', 'CYT', 'NUC', 'ME3', 'NUC', 'POX', 'NUC', 'MIT', 'NUC', 'POX', 'MIT', 'CYT', 'EXC', 'CYT', 'NUC', 'NUC', 'CYT', 'ME1', 'ME2', 'ME3', 'NUC', 'NUC', 'CYT', 'CYT', 'ME3', 'CYT', 'ME2', 'MIT', 'CYT', 'NUC', 'CYT', 'MIT', 'NUC', 'CYT', 'NUC', 'NUC', 'CYT', 'CYT', 'MIT', 'MIT', 'NUC', 'CYT', 'MIT', 'CYT', 'ME2', 'CYT', 'NUC', 'CYT', 'MIT', 'NUC', 'NUC', 'MIT', 'ME3', 'NUC', 'MIT', 'CYT', 'NUC', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'NUC', 'ME3', 'CYT', 'CYT', 'NUC', 'NUC', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'MIT', 'CYT', 'MIT', 'NUC', 'MIT', 'CYT', 'CYT', 'CYT', 'MIT', 'MIT', 'CYT', 'MIT', 'MIT', 'MIT', 'EXC', 'CYT', 'NUC', 'CYT', 'CYT', 'CYT', 'NUC', 'ME3', 'ME3', 'CYT', 'EXC', 'NUC', 'MIT', 'MIT', 'NUC', 'CYT', 'CYT', 'ME3', 'CYT', 'NUC', 'NUC', 'ME3', 'ME3', 'NUC', 'MIT', 'ME3', 'CYT', 'CYT', 'ME3', 'MIT', 'NUC', 'NUC', 'CYT', 'CYT', 'MIT', 'CYT', 'NUC', 'NUC', 'CYT', 'MIT', 'NUC', 'CYT', 'ME3', 'ME3', 'EXC', 'ME3', 'ME1', 'NUC', 'MIT', 'NUC', 'NUC', 'ME1', 'CYT', 'CYT', 'CYT', 'NUC', 'CYT', 'CYT', 'CYT', 'CYT', 'NUC', 'NUC', 'NUC', 'CYT', 'MIT', 'NUC', 'NUC', 'NUC', 'NUC', 'CYT', 'ME1', 'ME1', 'CYT', 'NUC', 'CYT', 'CYT', 'NUC', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'CYT', 'ME3', 'CYT', 'CYT', 'CYT', 'ME1', 'CYT', 'ME1', 'NUC', 'ME1', 'CYT', 'ME3', 'POX', 'ME3', 'ME3', 'ME3', 'ME3', 'ME3', 'ME3', 'ME3', 'MIT', 'NUC', 'ME3', 'MIT', 'NUC', 'CYT', 'ME3', 'NUC', 'CYT', 'ME2']
{'accuracy_score': 0.5842696629213483, 'balanced_accuracy_score': 0.5585948255008445, 'macro_precision_score': 0.45205842739152696, 'macro_recall_score': 0.50273534295076, 'macro_f1_score': 0.4719176147164282, 'micro_precision_score': 0.5842696629213483, 'micro_recall_score': 0.5842696629213483, 'micro_f1_score': 0.5842696629213483}
('0', Pipeline(steps=[('0', KNNImputer(n_neighbors=7)),
                ('1',
                 RBFSampler(gamma=0.017380233701597612, n_components=72,
                            random_state=45139)),
                ('2',
                 ExtraTreesClassifier(class_weight='balanced_subsample',
                                      criterion='entropy', max_features='sqrt',
                                      min_samples_leaf=3, min_samples_split=19,
                                      n_estimators=15, random_state=45139))]))
('1', Pipeline(steps=[('0', MinMaxScaler()),
                ('1',
                 ExtraTreesClassifier(class_weight='balanced',
                                      criterion='entropy', max_features='sqrt',
                                      min_samples_leaf=3, min_samples_split=19,
                                      n_estimators=82, random_state=45139))]))
('2', Pipeline(steps=[('0',
                 MLPClassifier(alpha=0.0748421826170222,
                               learning_rate_init=0.07050348603936667,
                               random_state=45139, solver='lbfgs'))]))
('3', Pipeline(steps=[('0', KNNImputer(n_neighbors=9)),
                ('1', StandardScaler(with_std=False)),
                ('2',
                 ExtraTreesClassifier(class_weight='balanced',
                                      criterion='entropy', max_features='sqrt',
                                      min_samples_leaf=3, n_estimators=35,
                                      random_state=45139))]))
('4', Pipeline(steps=[('0',
                 FastICA(fun='exp', n_components=42, random_state=45139,
                         whiten=False)),
                ('1', VarianceThreshold()),
                ('2',
                 ExtraTreesClassifier(class_weight='balanced',
                                      criterion='entropy', max_features='sqrt',
                                      min_samples_leaf=3, min_samples_split=19,
                                      n_estimators=56, random_state=45139))]))
('5', Pipeline(steps=[('0', VarianceThreshold()),
                ('1',
                 ExtraTreesClassifier(bootstrap=True, class_weight='balanced',
                                      max_features='log2', min_samples_leaf=3,
                                      min_samples_split=16, n_estimators=44,
                                      random_state=45139))]))
('6', Pipeline(steps=[('0', KNNImputer(n_neighbors=9)),
                ('1', StandardScaler(with_mean=False, with_std=False)),
                ('2',
                 ExtraTreesClassifier(class_weight='balanced',
                                      criterion='entropy', max_features='sqrt',
                                      min_samples_leaf=3, n_estimators=35,
                                      random_state=45139))]))
('7', Pipeline(steps=[('0',
                 FastICA(n_components=73, random_state=45139, whiten=False)),
                ('1', RobustScaler(with_centering=False, with_scaling=False)),
                ('2', VarianceThreshold()),
                ('3',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        criterion='entropy',
                                        max_features='log2', min_samples_leaf=3,
                                        min_samples_split=13, n_estimators=90,
                                        random_state=45139))]))
('8', Pipeline(steps=[('0', VarianceThreshold()), ('1', Normalizer(norm='max')),
                ('2', MaxAbsScaler()), ('3', MinMaxScaler()),
                ('4',
                 ExtraTreesClassifier(class_weight='balanced',
                                      criterion='entropy', max_features='sqrt',
                                      min_samples_leaf=3, min_samples_split=19,
                                      n_estimators=82, random_state=45139))]))
('9', Pipeline(steps=[('0', KNNImputer(n_neighbors=7, weights='distance')),
                ('1', StandardScaler(with_std=False)),
                ('2',
                 ExtraTreesClassifier(class_weight='balanced',
                                      criterion='entropy', max_features='log2',
                                      min_samples_split=13, n_estimators=35,
                                      random_state=45139))]))
