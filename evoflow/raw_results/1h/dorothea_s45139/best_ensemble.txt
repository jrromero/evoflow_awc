
{'accuracy_score': 0.9507246376811594, 'balanced_accuracy_score': 0.7511022927689595, 'macro_precision_score': 0.7902650356778798, 'macro_recall_score': 0.7511022927689595, 'macro_f1_score': 0.7689944464138013, 'micro_precision_score': 0.9507246376811594, 'micro_recall_score': 0.9507246376811594, 'micro_f1_score': 0.9507246376811594}
('0', Pipeline(steps=[('0',
                 PCA(n_components=0.7911965566271888, random_state=45139,
                     whiten=True)),
                ('1',
                 PassiveAggressiveClassifier(C=0.00015026240117807917,
                                             fit_intercept=False,
                                             random_state=45139))]))
('1', Pipeline(steps=[('0', SelectPercentile(percentile=62.814184164750806)),
                ('1', SelectFwe(alpha=0.02683953985960119)),
                ('2', MinMaxScaler()),
                ('3',
                 SGDClassifier(alpha=1.5495656025639776e-05,
                               class_weight='balanced',
                               epsilon=0.0017811102247671916,
                               eta0=0.0008512168157108822,
                               l1_ratio=0.588022487355246, loss='squared_hinge',
                               power_t=0.8678948976296776, random_state=45139,
                               tol=0.0008867498290072738))]))
('2', Pipeline(steps=[('0', RobustScaler(with_scaling=False)),
                ('1',
                 Nystroem(coef0=-0.06857462061577557, degree=2,
                          gamma=0.0007783899010949138, kernel='cosine',
                          n_components=24, random_state=45139)),
                ('2', VarianceThreshold()),
                ('3', MultinomialNB(alpha=2.019866215953942, fit_prior=False))]))
('3', Pipeline(steps=[('0', SelectPercentile(percentile=65.86867115699592)),
                ('1', PCA(n_components=0.9537885378995343, random_state=45139)),
                ('2', VarianceThreshold()),
                ('3', BernoulliNB(alpha=0.04141918968716763, fit_prior=False))]))
('4', Pipeline(steps=[('0',
                 RandomUnderSampler(random_state=45139, replacement=True,
                                    sampling_strategy='not minority')),
                ('1',
                 ExtraTreesClassifier(class_weight='balanced',
                                      criterion='entropy', max_features='sqrt',
                                      min_samples_leaf=3, min_samples_split=19,
                                      n_estimators=15, random_state=45139))]))
('5', Pipeline(steps=[('0', VarianceThreshold()), ('1', MaxAbsScaler()),
                ('2',
                 Nystroem(coef0=-0.4035057657895207, degree=5,
                          gamma=0.0002759867181903057, kernel='sigmoid',
                          n_components=84, random_state=45139)),
                ('3', MinMaxScaler()),
                ('4',
                 RandomForestClassifier(bootstrap=False,
                                        class_weight='balanced_subsample',
                                        max_features='sqrt',
                                        min_samples_leaf=10,
                                        min_samples_split=13, n_estimators=20,
                                        random_state=45139))]))
('6', Pipeline(steps=[('0', MaxAbsScaler()), ('1', MinMaxScaler()),
                ('2',
                 MLPClassifier(alpha=0.004498664017902515,
                               learning_rate_init=0.04196621630158927,
                               random_state=45139, solver='lbfgs'))]))
('7', Pipeline(steps=[('0',
                 SMOTE(k_neighbors=3, random_state=45139,
                       sampling_strategy='not minority')),
                ('1', MaxAbsScaler()),
                ('2',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        max_features='sqrt',
                                        min_samples_leaf=16,
                                        min_samples_split=18, n_estimators=22,
                                        random_state=45139))]))
('8', Pipeline(steps=[('0',
                 Nystroem(coef0=0.12977932001813874, degree=3,
                          gamma=0.007812001850920125, kernel='poly',
                          n_components=84, random_state=45139)),
                ('1', SimpleImputer(strategy='most_frequent')),
                ('2',
                 KNeighborsClassifier(n_neighbors=3, p=1, weights='distance'))]))
('9', Pipeline(steps=[('0', MinMaxScaler()), ('1', VarianceThreshold()),
                ('2',
                 LogisticRegression(C=0.0002944047686340512,
                                    class_weight='balanced',
                                    random_state=45139))]))
