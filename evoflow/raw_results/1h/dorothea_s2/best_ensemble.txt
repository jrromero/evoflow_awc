
{'accuracy_score': 0.9304347826086956, 'balanced_accuracy_score': 0.8516313932980599, 'macro_precision_score': 0.7205069124423963, 'macro_recall_score': 0.8516313932980599, 'macro_f1_score': 0.766786840919333, 'micro_precision_score': 0.9304347826086956, 'micro_recall_score': 0.9304347826086956, 'micro_f1_score': 0.9304347826086956}
('0', Pipeline(steps=[('0', MinMaxScaler()),
                ('1',
                 SGDClassifier(alpha=1.8420618934765882e-07,
                               class_weight='balanced',
                               epsilon=0.016046429875551757,
                               eta0=0.06322397310169882,
                               l1_ratio=0.0025846482527840525,
                               power_t=0.6288438830630952, random_state=2,
                               tol=0.027656099481194348))]))
('1', Pipeline(steps=[('0', MinMaxScaler()),
                ('1',
                 FastICA(algorithm='deflation', fun='exp', n_components=69,
                         random_state=2)),
                ('2',
                 RandomUnderSampler(random_state=2, replacement=True,
                                    sampling_strategy='not minority')),
                ('3',
                 PassiveAggressiveClassifier(C=1.11819103293457e-05,
                                             fit_intercept=False,
                                             loss='squared_hinge',
                                             random_state=2))]))
('2', Pipeline(steps=[('0', VarianceThreshold()),
                ('1',
                 RandomOverSampler(random_state=2,
                                   sampling_strategy='not minority')),
                ('2',
                 SGDClassifier(alpha=7.502257434096059e-07, average=True,
                               class_weight='balanced',
                               epsilon=0.07860154466924438,
                               eta0=1.7027702307281237e-05,
                               l1_ratio=3.1162844971793974e-08,
                               loss='squared_hinge', power_t=0.6309991679378882,
                               random_state=2, tol=0.09384403651298492))]))
('3', Pipeline(steps=[('0', Normalizer(norm='l1')),
                ('1',
                 SMOTE(k_neighbors=4, random_state=2,
                       sampling_strategy='minority')),
                ('2', KNeighborsClassifier(n_neighbors=25, p=1))]))
('4', Pipeline(steps=[('0',
                 SGDClassifier(alpha=0.005231482080655605, average=True,
                               class_weight='balanced',
                               epsilon=0.0003008209780520249,
                               eta0=0.0021918358936967733,
                               l1_ratio=2.1231794668149138e-09, loss='log',
                               power_t=0.8975816225886228, random_state=2,
                               tol=0.05923907389199503))]))
('5', Pipeline(steps=[('0',
                 RandomUnderSampler(random_state=2,
                                    sampling_strategy='not minority')),
                ('1',
                 SMOTETomek(random_state=2, sampling_strategy='not minority')),
                ('2', MinMaxScaler()),
                ('3',
                 PassiveAggressiveClassifier(C=0.0032404740099753197,
                                             random_state=2))]))
('6', Pipeline(steps=[('0', Normalizer(norm='max')), ('1', MaxAbsScaler()),
                ('2', StandardScaler()),
                ('3',
                 PassiveAggressiveClassifier(C=0.2770312280117449,
                                             fit_intercept=False,
                                             loss='squared_hinge',
                                             random_state=2))]))
('7', Pipeline(steps=[('0', SimpleImputer(strategy='median')),
                ('1', TruncatedSVD(algorithm='arpack', random_state=2)),
                ('2', KNNImputer(n_neighbors=10, weights='distance')),
                ('3',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        max_features='sqrt',
                                        min_samples_leaf=10,
                                        min_samples_split=6, n_estimators=94,
                                        random_state=2))]))
('8', Pipeline(steps=[('0', MaxAbsScaler()),
                ('1',
                 Nystroem(coef0=0.22528583494685406, degree=5,
                          gamma=0.0002462372598220128, n_components=64,
                          random_state=2)),
                ('2',
                 RandomForestClassifier(class_weight='balanced_subsample',
                                        max_features='sqrt',
                                        min_samples_leaf=20,
                                        min_samples_split=7, n_estimators=42,
                                        random_state=2))]))
('9', Pipeline(steps=[('0', MinMaxScaler()), ('1', RobustScaler(with_scaling=False)),
                ('2', VarianceThreshold()),
                ('3',
                 RandomForestClassifier(bootstrap=False,
                                        class_weight='balanced',
                                        criterion='entropy',
                                        max_features='sqrt',
                                        min_samples_split=9, n_estimators=56,
                                        random_state=2))]))
