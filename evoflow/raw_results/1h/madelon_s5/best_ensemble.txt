['-1', '-1', '1', '-1', '1', '-1', '1', '-1', '-1', '1', '-1', '1', '-1', '-1', '1', '-1', '-1', '-1', '-1', '1', '-1', '1', '-1', '-1', '-1', '-1', '1', '1', '-1', '-1', '1', '1', '-1', '-1', '-1', '1', '1', '1', '1', '-1', '-1', '1', '-1', '-1', '-1', '-1', '1', '-1', '1', '1', '-1', '1', '-1', '1', '-1', '1', '-1', '1', '1', '-1', '-1', '-1', '1', '1', '1', '1', '-1', '1', '-1', '-1', '1', '1', '1', '-1', '-1', '1', '1', '1', '1', '1', '1', '-1', '-1', '1', '-1', '-1', '-1', '-1', '1', '1', '1', '-1', '1', '-1', '-1', '-1', '1', '1', '1', '1', '1', '1', '-1', '-1', '-1', '1', '1', '1', '1', '1', '1', '1', '-1', '-1', '1', '-1', '-1', '-1', '-1', '-1', '1', '1', '1', '1', '1', '1', '1', '-1', '1', '1', '-1', '1', '-1', '-1', '-1', '-1', '1', '1', '1', '-1', '1', '1', '-1', '-1', '-1', '-1', '-1', '1', '-1', '-1', '1', '-1', '-1', '1', '1', '-1', '1', '-1', '-1', '1', '1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '1', '-1', '1', '-1', '-1', '-1', '-1', '1', '-1', '-1', '1', '1', '-1', '-1', '1', '-1', '-1', '1', '1', '-1', '-1', '-1', '1', '1', '1', '-1', '1', '1', '-1', '-1', '-1', '-1', '1', '1', '-1', '-1', '-1', '-1', '-1', '1', '1', '1', '-1', '1', '1', '-1', '-1', '1', '-1', '-1', '-1', '1', '-1', '1', '1', '1', '-1', '-1', '1', '-1', '-1', '-1', '-1', '-1', '-1', '1', '1', '-1', '-1', '-1', '-1', '1', '-1', '1', '1', '1', '-1', '1', '1', '1', '-1', '1', '-1', '1', '1', '1', '-1', '1', '1', '1', '1', '-1', '1', '1', '-1', '1', '1', '1', '-1', '-1', '1', '1', '1', '1', '-1', '1', '1', '-1', '-1', '1', '1', '1', '-1', '-1', '1', '1', '1', '1', '-1', '1', '-1', '-1', '1', '-1', '1', '1', '-1', '1', '-1', '-1', '1', '-1', '-1', '1', '1', '1', '1', '1', '1', '-1', '1', '-1', '1', '-1', '1', '1', '1', '-1', '1', '-1', '1', '-1', '-1', '1', '1', '1', '-1', '1', '-1', '-1', '1', '-1', '1', '-1', '1', '-1', '1', '-1', '1', '-1', '-1', '1', '-1', '-1', '-1', '-1', '1', '-1', '-1', '-1', '1', '-1', '1', '-1', '1', '1', '1', '-1', '-1', '1', '-1', '1', '1', '-1', '1', '-1', '-1', '1', '-1', '-1', '-1', '-1', '-1', '-1', '1', '-1', '-1', '-1', '1', '1', '1', '1', '-1', '1', '1', '1', '-1', '1', '-1', '1', '1', '-1', '-1', '-1', '1', '-1', '-1', '1', '-1', '-1', '1', '-1', '-1', '1', '1', '-1', '-1', '-1', '-1', '1', '-1', '1', '1', '-1', '-1', '-1', '1', '1', '1', '-1', '1', '-1', '1', '1', '-1', '1', '-1', '1', '-1', '-1', '-1', '1', '1', '1', '1', '1', '-1', '-1', '1', '-1', '-1', '-1', '1', '-1', '-1', '-1', '1', '1', '1', '-1', '1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '1', '-1', '-1', '-1', '1', '1', '-1', '1', '-1', '-1', '1', '-1', '-1', '-1', '-1', '1', '-1', '-1', '1', '-1', '1', '-1', '-1', '-1', '1', '-1', '-1', '1', '1', '-1', '-1', '1', '-1', '1', '-1', '1', '-1', '-1', '-1', '1', '-1', '-1', '-1', '1', '-1', '-1', '1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '1', '1', '-1', '-1', '1', '1', '-1', '1', '1', '1', '-1', '1', '1', '-1', '1', '1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '1', '-1', '-1', '1', '-1', '-1', '-1', '-1', '1', '-1', '-1', '-1', '-1', '1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '1', '-1', '1', '1', '-1', '-1', '1', '-1', '1', '-1', '1', '-1', '-1', '-1', '1', '-1', '-1', '-1', '1', '-1', '-1', '-1', '-1', '1', '1', '-1', '1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '1', '-1', '-1', '-1', '1', '-1', '1', '1', '-1', '1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '1', '1', '-1', '1', '-1', '1', '1', '-1', '-1', '1', '-1', '1', '1', '1', '-1', '1', '1', '-1', '1', '1', '1', '-1', '-1', '1', '1', '1', '-1', '-1', '-1', '1', '-1', '1', '-1', '1', '-1', '1', '-1', '-1', '-1', '1', '-1', '1', '-1', '-1', '-1', '1', '-1', '1', '-1', '1', '-1', '-1', '1', '1', '-1', '-1', '1', '1', '-1', '-1', '-1', '1', '1', '-1', '1', '-1', '1', '-1', '-1', '-1', '1', '1', '1', '1', '-1', '1', '-1', '1', '-1', '1', '1', '-1', '1', '-1', '-1', '1', '-1', '1', '1', '1', '-1', '-1', '1', '-1', '1', '1', '1', '-1', '1', '-1', '1', '-1', '1', '-1', '-1', '1', '-1', '1', '-1', '1', '-1', '-1', '-1', '1', '1', '1', '1', '1', '1', '-1', '-1', '-1', '1', '1', '-1', '-1', '-1', '-1', '-1', '1', '1', '-1', '-1', '1', '-1', '1', '1', '1', '-1', '1', '-1', '1', '-1', '1', '1', '1', '1', '-1', '-1', '1', '1', '1', '-1', '-1', '1', '-1', '-1', '-1', '-1', '-1', '-1', '1', '-1', '1', '1', '1', '1', '1']
{'accuracy_score': 0.8692307692307693, 'balanced_accuracy_score': 0.8694771723122239, 'macro_precision_score': 0.8726426354738601, 'macro_recall_score': 0.8694771723122239, 'macro_f1_score': 0.8689818260863837, 'micro_precision_score': 0.8692307692307693, 'micro_recall_score': 0.8692307692307693, 'micro_f1_score': 0.8692307692307693}
('0', Pipeline(steps=[('0',
                 FeatureAgglomeration(affinity='cosine', linkage='average',
                                      n_clusters=11)),
                ('1',
                 RandomForestClassifier(bootstrap=False,
                                        class_weight='balanced',
                                        criterion='entropy',
                                        max_features='sqrt', min_samples_leaf=2,
                                        min_samples_split=8, n_estimators=12,
                                        random_state=5))]))
('1', Pipeline(steps=[('0',
                 FeatureAgglomeration(affinity='cosine', linkage='average',
                                      n_clusters=11)),
                ('1',
                 RandomForestClassifier(bootstrap=False,
                                        class_weight='balanced',
                                        criterion='entropy',
                                        max_features='sqrt', min_samples_leaf=2,
                                        min_samples_split=20, n_estimators=12,
                                        random_state=5))]))
('2', Pipeline(steps=[('0',
                 FeatureAgglomeration(affinity='cosine', linkage='average',
                                      n_clusters=21)),
                ('1', KNeighborsClassifier(n_neighbors=9, p=1))]))
('3', Pipeline(steps=[('0', FeatureAgglomeration(linkage='complete', n_clusters=24)),
                ('1', KNeighborsClassifier(n_neighbors=24, p=1))]))
('4', Pipeline(steps=[('0',
                 FeatureAgglomeration(affinity='cosine', linkage='complete',
                                      n_clusters=21)),
                ('1',
                 RandomForestClassifier(bootstrap=False,
                                        class_weight='balanced_subsample',
                                        criterion='entropy',
                                        max_features='sqrt', min_samples_leaf=9,
                                        min_samples_split=8, n_estimators=12,
                                        random_state=5))]))
('5', Pipeline(steps=[('0',
                 FeatureAgglomeration(affinity='cosine', linkage='complete',
                                      n_clusters=20)),
                ('1',
                 RandomForestClassifier(bootstrap=False,
                                        class_weight='balanced_subsample',
                                        max_features='log2', min_samples_leaf=4,
                                        min_samples_split=20, n_estimators=12,
                                        random_state=5))]))
('6', Pipeline(steps=[('0',
                 FeatureAgglomeration(affinity='manhattan', linkage='average',
                                      n_clusters=18)),
                ('1', KNeighborsClassifier(p=1, weights='distance'))]))
('7', Pipeline(steps=[('0',
                 FeatureAgglomeration(affinity='cosine', linkage='complete',
                                      n_clusters=21)),
                ('1', KNeighborsClassifier(n_neighbors=1, weights='distance'))]))
('8', Pipeline(steps=[('0', SelectFwe(alpha=0.039646918476832826)),
                ('1',
                 KNeighborsClassifier(n_neighbors=12, weights='distance'))]))
('9', Pipeline(steps=[('0', SelectPercentile(percentile=24.508930675194268)),
                ('1',
                 KNeighborsClassifier(n_neighbors=12, p=1,
                                      weights='distance'))]))
